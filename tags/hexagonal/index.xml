<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hexagonal on Sergio Carracedo</title><link>https://sergiocarracedo.es/tags/hexagonal/</link><description>Recent content in Hexagonal on Sergio Carracedo</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 20 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://sergiocarracedo.es/tags/hexagonal/index.xml" rel="self" type="application/rss+xml"/><item><title>A real case: why hexagonal architecture, decoupling, and Dependency injection can be very useful in the frontend</title><link>https://sergiocarracedo.es/hexagonal-architecture-frontend/</link><pubDate>Mon, 20 May 2024 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/hexagonal-architecture-frontend/</guid><description>&lt;p>Hexagonal architecture is a software design pattern based on the separation of responsibilities. The goal is to decouple the business logic (domain) and the application from other external interfaces.&lt;/p>
&lt;p>Simplifying in hexagonal architecture we communicate the core of the app (domain + application) with the external elements using ports and adapters. A &lt;strong>port&lt;/strong> lives in the core, it is the interface any external code must use to interact with the core (or the core with the external code), the &lt;strong>adapter&lt;/strong> is the external piece of code that follows the port interface and execute the tasks, get the data, etc.&lt;/p></description></item></channel></rss>
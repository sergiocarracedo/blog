<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Frontend on Sergio Carracedo</title><link>https://sergiocarracedo.es/tags/frontend/</link><description>Recent content in Frontend on Sergio Carracedo</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 08 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://sergiocarracedo.es/tags/frontend/index.xml" rel="self" type="application/rss+xml"/><item><title>UI components library (Chapter II): Components anatomy and interfaces</title><link>https://sergiocarracedo.es/ui-components-library-ii-anatomy-interfaces/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/ui-components-library-ii-anatomy-interfaces/</guid><description>&lt;blockquote>
&lt;p>This is the second post of a series about why and how to create a UI components library. I&amp;rsquo;m going to focus on the code examples in Vue.js, but the concepts are valid for any other framework like React, Angular, LitElements, etc.&lt;/p>
&lt;p>&lt;a href="https://sergiocarracedo.es/ui-components-library-i-why-and-to-create-one/">Chapter I: Introduction&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>Before creating a components library, it&amp;rsquo;s important to understand the anatomy of a component, its interfaces, and how to create a good &amp;ldquo;API&amp;rdquo; for the components.&lt;/p></description></item><item><title>UI components library (Chapter I): Why and to create one? Characteristics of a good UI library</title><link>https://sergiocarracedo.es/ui-components-library-i-why-and-to-create-one/</link><pubDate>Mon, 12 Feb 2024 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/ui-components-library-i-why-and-to-create-one/</guid><description>&lt;blockquote>
&lt;p>This is the first post of a series about why and how to create a UI components library. I&amp;rsquo;m going to focus on the code examples in Vue.js, but the concepts are valid for any other framework like React, Angular, LitElements, etc.
In this first post I&amp;rsquo;m going to talk about the component of why you should (or should not) create a UI components library, but first let&amp;rsquo;s define what is a UI components library.&lt;/p></description></item><item><title>The advantage of using cache to decouple the frontend code</title><link>https://sergiocarracedo.es/using-cache-to-decouple-frontend-code/</link><pubDate>Mon, 20 Nov 2023 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/using-cache-to-decouple-frontend-code/</guid><description>&lt;p>We can agree decoupling is a good practice that simplifies the code and the maintainability of the project.&lt;/p>
&lt;p>A common way of decoupling the code is to divide the responsibilities into different layers, a very common division is:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>view layer&lt;/strong>: in charge of render HTML and interacting with the user&lt;/li>
&lt;li>&lt;strong>domain layer&lt;/strong>: in charge of the business logic&lt;/li>
&lt;li>&lt;strong>infra layer&lt;/strong>: in charge of getting the data from the backend and returning it to the domain layer(here is very common to use the repository pattern, which is just a contract to get the data. The contract is unique but you can have multiple implementations, for example, one for a REST API and another for a GraphQL API, you should be able to change the implementation without changing other pieces in the code)&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s see a couple of examples use cases where it is very typical to put the performance over the decoupling. (Spoiler: we can have both)&lt;/p></description></item><item><title>Typescript tips for legacy projects: Type only you need</title><link>https://sergiocarracedo.es/typescript-tips/</link><pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/typescript-tips/</guid><description>&lt;p>When you introduce Typescript in a legacy project, or you are using a library that doesn&amp;rsquo;t provide types, you might be tempted to use &lt;code>any&lt;/code> for the types you will need. But this is not a good idea, because you are losing all the benefits of Typescript. &lt;strong>&lt;code>any&lt;/code> it&amp;rsquo;s something you must remove from code, and from your mind&lt;/strong>.&lt;/p>
&lt;h2 id="type-a-shape-progressively">Type a shape progressively&lt;/h2>
&lt;p>It&amp;rsquo;s very common to have an object with a lot of properties, and trying to type completely the shape (that is the final goal) of an object you don&amp;rsquo;t completely understand can be an overwhelming task.&lt;/p></description></item><item><title>Generative AI Models: Boosting Merchandising Analytics User Experience</title><link>https://sergiocarracedo.es/generative-ai-models-boosting-merchandising-analytics-user-experience/</link><pubDate>Thu, 29 Jun 2023 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/generative-ai-models-boosting-merchandising-analytics-user-experience/</guid><description>&lt;blockquote>
&lt;p>This article was published originally in &lt;a href="https://dzone.com/articles/chatgpt-boosting-merchandising-user-experience">DZone&lt;/a>.
I wrote it in collaboration with &lt;a href="https://www.linkedin.com/in/mgarlorenzo/">Miguel García&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>In this article, we will explain how using the new Generative AI Models (&lt;a href="https://en.wikipedia.org/wiki/Large_language_model">LLM&lt;/a>) can improve the experience of business users on our &lt;a href="https://dzone.com/articles/business-analytics-tools-amp-use-cases">analytical platform&lt;/a>. Let&amp;rsquo;s say we provide our retail merchandising managers with a web application or a mobile application where they can analyze sales and stock behavior in real-time using natural language.&lt;/p>
&lt;p>These applications usually have a series of restrictions that mainly show a generic type of analysis, which users can filter or segment based on some filters and provide information such as:&lt;/p></description></item><item><title>Front-End: Cache Strategies You Should Know</title><link>https://sergiocarracedo.es/front-end-cache-strategies-you-should-know/</link><pubDate>Sun, 07 May 2023 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/front-end-cache-strategies-you-should-know/</guid><description>&lt;blockquote>
&lt;p>This article was published originally in &lt;a href="https://dzone.com/articles/front-end-cache-strategies-you-should-know">DZone&lt;/a>.
I wrote it with &lt;a href="https://www.linkedin.com/in/mgarlorenzo/">Miguel García&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://dzone.com/articles/introducing-amp-assimilating-caching-quick-read-fo">Caches&lt;/a> are very useful software components that all engineers must know. It is a transversal component that applies to all the tech areas and architecture layers such as operating systems, data platforms, backend, frontend, and other components. In this article, we are going to describe what is a cache and explain specific use cases focusing on the frontend and &lt;a href="https://dzone.com/articles/web-caching-client-side">client side&lt;/a>.&lt;/p></description></item><item><title>Frontend team roles and skills, breaking the borders</title><link>https://sergiocarracedo.es/tech-roles-in-the-frontend/</link><pubDate>Wed, 28 Dec 2022 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/tech-roles-in-the-frontend/</guid><description>&lt;p>15-20 years ago, web application developers had the knowledge and the technical skills necessary to create an application: HTML, CSS, JS, PHP/Python/ASP, Web Server management, MySQL/Postgres (both data and service management), etc.&lt;/p>
&lt;p>With time the web applications became more complex with bigger requirements. New technologies, frameworks, and paradigms bounce into the development and pushed developers to specialize in some areas arising new roles from this specialization.&lt;/p>
&lt;p>Nowadays, the equivalent typical roles for a web application that cover the exposed tasks/skills and the typical requirements are: Designer, Frontend developer, Backend developer, Platform engineer, and, in a data-oriented company: Data engineer, Data scientist, etc.&lt;/p></description></item><item><title>Dealing with infinite pagination</title><link>https://sergiocarracedo.es/dealing-with-infinite-pagination/</link><pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/dealing-with-infinite-pagination/</guid><description>&lt;p>In the software development context, pagination is the process of dividing a list of items (rows) into groups of the same size.&lt;/p>
&lt;p>For example if we have these items:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">items&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#ae81ff">7&lt;/span>, &lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#ae81ff">9&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">11&lt;/span>, &lt;span style="color:#ae81ff">12&lt;/span>, &lt;span style="color:#ae81ff">13&lt;/span>, &lt;span style="color:#ae81ff">14&lt;/span>, &lt;span style="color:#ae81ff">15&lt;/span>, &lt;span style="color:#ae81ff">16&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and we want to paginate in pages (groups) of 5 elements we should know the list or the total items in the list, and we can calculate the number of pages, and how to get the items on a page (I&amp;rsquo;m assuming that the page value starts in 0)&lt;/p></description></item><item><title>How to create a table with a fixed header</title><link>https://sergiocarracedo.es/how-to-create-a-table-with-a-fixed-header/</link><pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/how-to-create-a-table-with-a-fixed-header/</guid><description>&lt;p>Tables in HTML are one of the older things in the standard, even before CSS we had HTML tables. In the past tables were used to markup the webpages, but the correct usage is to display tabular data.&lt;/p>
&lt;p>Over time the standard improves the table styling covering most of the use cases you can consider.&lt;/p>
&lt;p>But, there is a use case it&amp;rsquo;s not easy to get with the table attributes or style properties, I&amp;rsquo;m talking about creating a table with a fixed/sticky header (or footer).&lt;/p></description></item><item><title>Usabilidad: Notificaciones en el título de la página</title><link>https://sergiocarracedo.es/2010/08/25/usabilidad-notificaciones-en-el-titulo-de-la-pagina/</link><pubDate>Wed, 25 Aug 2010 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/2010/08/25/usabilidad-notificaciones-en-el-titulo-de-la-pagina/</guid><description>&lt;p>Hoy en dia la mayoria de los usuarios cuando estamos navegando tenemos abiertas simultaneamente varias pestañas en el navegador. A veces nuestra aplicación web necesita llamar la atención del usuario para requerir de el una acción o simplemente hacerle sabes que ha recibido una notificación.&lt;/p>
&lt;p>Una buena manera de hacerlo es cambiar alternativamente el título de la página por un aviso, de la misma forma que hace facebook cuando recibimos una notificación de chat; el título de la página cambia 3 o 4 veces entre &amp;ldquo;Facebook&amp;hellip;.&amp;rdquo; y &amp;ldquo;Fulanito te ha enviado un mensaje&amp;rdquo;.&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Typescript on Sergio Carracedo</title><link>https://sergiocarracedo.es/tags/typescript/</link><description>Recent content in Typescript on Sergio Carracedo</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 25 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://sergiocarracedo.es/tags/typescript/index.xml" rel="self" type="application/rss+xml"/><item><title>Are you using semicolons in JS/TS? Maybe is time to remove them</title><link>https://sergiocarracedo.es/no-more-js-semicolons/</link><pubDate>Sun, 25 Aug 2024 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/no-more-js-semicolons/</guid><description>I have been using standardjs (and standardts) for 5 years as lint ruleset in my projects, and I am very happy with that. I tried before Google config lint and eslint-config-airbnb and one of the main differences I found between those rulesets is relative to semicolons; Google and Airbnb require the use of semicolons at the of the lines, but standardjs don&amp;rsquo;t.
I worked a long time ago with PHP that requires them, but I adapted very fast to not use them in JavaScript and Go.</description></item><item><title>Detecting circular dependencies in Javascript projects</title><link>https://sergiocarracedo.es/circular-dependencies/</link><pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/circular-dependencies/</guid><description>Circular imports (or circular dependencies, or cycle dependencies, but not the same as circular references) are easy to have in your code base, and more when the code grows. It can impact in the bundle generation or cause issues (for example in HMR) and you should avoid them because they are a symptom of an incorrect architecture or code organization and is a big code smell.
What are circular dependencies Circular dependencies occur when a package (A) depends on another package (B) and B also depends on A.</description></item><item><title>A real case: why hexagonal architecture, decoupling, and Dependency injection can be very useful in the frontend</title><link>https://sergiocarracedo.es/hexagonal-architecture-frontend/</link><pubDate>Mon, 20 May 2024 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/hexagonal-architecture-frontend/</guid><description>Hexagonal architecture is a software design pattern based on the separation of responsibilities. The goal is to decouple the business logic (domain) and the application from other external interfaces.
Simplifying in hexagonal architecture we communicate the core of the app (domain + application) with the external elements using ports and adapters. A port lives in the core, it is the interface any external code must use to interact with the core (or the core with the external code), the adapter is the external piece of code that follows the port interface and execute the tasks, get the data, etc.</description></item><item><title>Typescript enums: Replacing them with const and union types</title><link>https://sergiocarracedo.es/typescript-enums-ii/</link><pubDate>Mon, 01 Apr 2024 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/typescript-enums-ii/</guid><description>Last year I wrote a post about the typescript enums: how to use them, some of the disadvantages, how to mitigate them, and how to replace the enums with const enums and read-only maps.
In that post, I showed how to replace the enums with const enums and read-only maps, and I also mentioned the union types as an alternative to the enums.
In this post, I want to go deeper into the union types as a replacement for the enums in some cases.</description></item><item><title>The advantage of using cache to decouple the frontend code</title><link>https://sergiocarracedo.es/using-cache-to-decouple-frontend-code/</link><pubDate>Mon, 20 Nov 2023 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/using-cache-to-decouple-frontend-code/</guid><description>We can agree decoupling is a good practice that simplifies the code and the maintainability of the project.
A common way of decoupling the code is to divide the responsibilities into different layers, a very common division is:
view layer: in charge of render HTML and interacting with the user domain layer: in charge of the business logic infra layer: in charge of getting the data from the backend and returning it to the domain layer(here is very common to use the repository pattern, which is just a contract to get the data.</description></item><item><title>Typescript tips for legacy projects: Type only you need</title><link>https://sergiocarracedo.es/typescript-tips/</link><pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/typescript-tips/</guid><description>When you introduce Typescript in a legacy project, or you are using a library that doesn&amp;rsquo;t provide types, you might be tempted to use any for the types you will need. But this is not a good idea, because you are losing all the benefits of Typescript. any it&amp;rsquo;s something you must remove from code, and from your mind.
Type a shape progressively It&amp;rsquo;s very common to have an object with a lot of properties, and trying to type completely the shape (that is the final goal) of an object you don&amp;rsquo;t completely understand can be an overwhelming task.</description></item><item><title>Typescript enums, const enums and readonly maps</title><link>https://sergiocarracedo.es/typescript-enums/</link><pubDate>Sun, 29 Jan 2023 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/typescript-enums/</guid><description>Enum basics Enums is one of the nice things Typescript bring to the Javascript development&amp;rsquo;s environment. Enums allows you to define a set of named values (constants), generally with a semantic meaning.
One of the advantages over the regular constants is the grouping, making easy to know the different values you can use in certain place (and limiting the possible values to use)
In Typescript an enum has this shape:</description></item><item><title>Typescript typing challenges and type utilities</title><link>https://sergiocarracedo.es/typescript-typing-challenges-and-type-utilities/</link><pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/typescript-typing-challenges-and-type-utilities/</guid><description>Recently I was looking for more knowledge about Typescript typing, how to create more advanced and better types, and I can say that it&amp;rsquo;s a big deal, there are a lot of things you can do and, you never imagined before.
During that &amp;ldquo;investigation&amp;rdquo; I found very interesting resources I want to share with you.
Type Challenge https://tsch.js.org/
It&amp;rsquo;s a repository that includes a lot of, very well-documented, and designed typing challenges.</description></item><item><title>Typescript type narrowing, type guards and type predicates ([var] is [type])</title><link>https://sergiocarracedo.es/typescript-type-narrowing/</link><pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/typescript-type-narrowing/</guid><description>One useful feature in Typescript is union types, for example string | number | null, it&amp;rsquo;s a way to specify an argument, return, or variable that can get values with different types.
Type Narrowing is a technique that allows Typescript compiler to reduce the types of a value evaluating guard clauses in compilation time.
Let&amp;rsquo;s see a simple example, imagine we have a function to uppercase a value that can be number, string, or just null, into the function we need to handle the different cases, but at the same time Typescript can understand the types and reduce value type to the correct type in each code&amp;rsquo;s branch.</description></item><item><title>Tips using Typescript and Vue</title><link>https://sergiocarracedo.es/tips-using-typescript-and-vue/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/tips-using-typescript-and-vue/</guid><description>Typescript is a great &amp;ldquo;language&amp;rdquo;, makes it possible to create more maintainable and understandable software, but requires extra effort to type the variables, the functions&amp;rsquo; arguments, etc&amp;hellip;
Vue 2.x, and even more Vue 3 provide a great typescript integration, providing the necessary types to use your app, but not always are trivial, and you need to know the types you must use in every case.
I want to share with all of you the lessons I learned in my experience using Vue and TS, the typical questions, and the &amp;ldquo;problems&amp;rdquo; I found in the way.</description></item><item><title>Start using Typescript in Vue. The easy way.</title><link>https://sergiocarracedo.es/2020/02/27/start-using-typescript-in-vue-easy-way/</link><pubDate>Thu, 27 Feb 2020 10:58:02 +0000</pubDate><guid>https://sergiocarracedo.es/2020/02/27/start-using-typescript-in-vue-easy-way/</guid><description>If you program in JavaScript probably somebody told you about the advantages of using Typescript or you thought about start using it.
As you can see in this chart, more than 50% Javascript developers are using Typescript
Source: https://2019.stateofjs.com/javascript-flavors/
Start to use a new technology, new paradigm, new framework or anything could be hard and challenging, this is why is important start integrating new technologies avoiding friction with previous one. Today I&amp;rsquo;ll try to show you the easiest way to start using Typescript in your Vue projects.</description></item></channel></rss>
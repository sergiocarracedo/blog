<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reactivity on Sergio Carracedo</title><link>https://sergiocarracedo.es/tags/reactivity/</link><description>Recent content in Reactivity on Sergio Carracedo</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 08 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://sergiocarracedo.es/tags/reactivity/index.xml" rel="self" type="application/rss+xml"/><item><title>How Vue's reactivity works (I): Object.defineProperty</title><link>https://sergiocarracedo.es/how-vue-reactivity-works-i/</link><pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/how-vue-reactivity-works-i/</guid><description>&lt;p>Maybe you don&amp;rsquo;t need to know how Vue reactivity works under the hood to make Vue apps, but anyway it will be interesting and useful.&lt;/p>
&lt;p>In this context &lt;strong>reactivity&lt;/strong>, means, simplifying, the capacity to detect a data change and do something after that.&lt;/p>
&lt;p>In a Vue component, &lt;strong>reactivity&lt;/strong>, means that the component will be re-rendered (totally or partially) after a change in the value of a variable to show the component updated with the new value. For example in this basic component:&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Devops on Sergio Carracedo</title><link>https://sergiocarracedo.es/tags/devops/</link><description>Recent content in Devops on Sergio Carracedo</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 07 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://sergiocarracedo.es/tags/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>Front-End: Cache Strategies You Should Know</title><link>https://sergiocarracedo.es/front-end-cache-strategies-you-should-know/</link><pubDate>Sun, 07 May 2023 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/front-end-cache-strategies-you-should-know/</guid><description>&lt;blockquote>
&lt;p>This article was published originally in &lt;a href="https://dzone.com/articles/front-end-cache-strategies-you-should-know">DZone&lt;/a>.
I wrote it with &lt;a href="https://www.linkedin.com/in/mgarlorenzo/">Miguel García&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://dzone.com/articles/introducing-amp-assimilating-caching-quick-read-fo">Caches&lt;/a> are very useful software components that all engineers must know. It is a transversal component that applies to all the tech areas and architecture layers such as operating systems, data platforms, backend, frontend, and other components. In this article, we are going to describe what is a cache and explain specific use cases focusing on the frontend and &lt;a href="https://dzone.com/articles/web-caching-client-side">client side&lt;/a>.&lt;/p></description></item><item><title>Running workflows in you k8s cluster: Argo Workflows</title><link>https://sergiocarracedo.es/running-workflows-in-you-k8s-cluster-argo-workflows/</link><pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/running-workflows-in-you-k8s-cluster-argo-workflows/</guid><description>&lt;p>Simplifying it, a workflow is a list of tasks to run in some order and/or fulfilling some dependencies, for example, if we have 5 tasks to run: &lt;code>A&lt;/code>, &lt;code>B&lt;/code>, &lt;code>C&lt;/code>, &lt;code>D&lt;/code>, &lt;code>E&lt;/code>.
Task &lt;code>C&lt;/code> depends on finishing tasks &lt;code>A&lt;/code> and &lt;code>B&lt;/code>, task &lt;code>D&lt;/code> depends on finishing &lt;code>C&lt;/code> and &lt;code>E&lt;/code>&lt;/p>
&lt;p>Something like this:&lt;/p>
&lt;p>&lt;img src="grafo.svg"alt="Grafo" title="" />&lt;/p>
&lt;p>There are several tools to orchestrate that, but we&amp;rsquo;ll focus on &lt;em>&lt;a href="https://argoproj.github.io/argo-workflows/">Argo Workflows&lt;/a>&lt;/em>&lt;/p>
&lt;p>&lt;em>Argo Workflows is an open-source container-native workflow engine for orchestrating parallel jobs on &lt;em>Kubernetes&lt;/em>.&lt;/em>&lt;/p></description></item><item><title>Integration tests in Golang with dockertest</title><link>https://sergiocarracedo.es/integration-tests-in-golang-with-dockertest/</link><pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/integration-tests-in-golang-with-dockertest/</guid><description>&lt;p>Do integration testing (or system testing) usually means to have a database populated with data, services like redis, elasticsearch, etc&amp;hellip; working, In general, any infrastructure with which our software interacts.&lt;/p>
&lt;p>The most common way to do it is to have a replica of our production infrastructure. Actually, it&amp;rsquo;s relatively easy to achieve using containers, for example, docker containers.&lt;/p>
&lt;p>We can set up and run a container for every service we need to replicate, we can orchestrate it with docker-compose and create some makefiles or just a simple script to prepare the infrastructure and run the integration tests.&lt;/p></description></item><item><title>Database migrations in Golang.</title><link>https://sergiocarracedo.es/database-migrations-in-golang/</link><pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/database-migrations-in-golang/</guid><description>&lt;p>During the development of an app, it&amp;rsquo;s very common to do changes in the database schema, for a new feature you need to add a new table, add a new column to an existing table, alter the type of existing column or delete a column.&lt;/p>
&lt;p>When you work alone you could do it manually, run the queries to alter the database schemas manually.&lt;/p>
&lt;p>What happens when your team is not a one-person team? You need to share the queries to change the schema with your teammates, and they should know what changes they applied before to know if there are some new changes.&lt;/p></description></item><item><title>How to run GitHub Actions in local with Act</title><link>https://sergiocarracedo.es/act-how-to-run-github-actions-in-local/</link><pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/act-how-to-run-github-actions-in-local/</guid><description>&lt;p>GitHub Actions is a powerful tool, you can run tests, build your app, deploy it, even &lt;a href="https://github.blog/2021-04-22-github-actions-update-helping-maintainers-combat-bad-actors/">mining bitcoins&lt;/a> &amp;#x1f614;&lt;/p>
&lt;p>When you are creating an action or workflow in GitHub Actions, it is very common the needing of test it, check if all works as you need and if something is not correct, fix it, in other works as other software GitHub Actions need to be iterated.&lt;/p>
&lt;p>Doing it in GitHub have disadvantages:&lt;/p></description></item><item><title>Deploying a static website in Azure Static Web Apps</title><link>https://sergiocarracedo.es/azure-static-web-apps/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/azure-static-web-apps/</guid><description>&lt;p>Nowadays &lt;a href="https://jamstack.org/">JAMStack&lt;/a> is trendy because a lot of reasons: performance, security, decoupling, etc.&lt;/p>
&lt;p>JAMStack consists of pre-rendering your website or application&amp;rsquo;s frontend and get the dynamic data from an API.&lt;/p>
&lt;p>Your pre-rendered markup can be host in a server, but as it is static, your host only needs to serve static files, just HTML, CSS, and JS. You don&amp;rsquo;t need to run any code on the server.&lt;/p>
&lt;p>There are a lot of different options to deploy a static website, for example:&lt;/p></description></item><item><title>Servidor de Máquinas virtuales remotas con Virtualbox</title><link>https://sergiocarracedo.es/2010/10/19/servidor-de-maquinas-virtuales-remotas-con-virtualbox/</link><pubDate>Tue, 19 Oct 2010 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/2010/10/19/servidor-de-maquinas-virtuales-remotas-con-virtualbox/</guid><description>&lt;p>Para un desarrollador de web, es muy importante tener un entorno de desarrollo y de prueba completamente optimizado.&lt;/p>
&lt;p>En el apartado de pruebas lo recomendable es que probemos nuestros desarrollos web con la mayor cantidad de navegadores posibles.&lt;/p>
&lt;p>Si como es nuestro caso, empleas Linux como sistema operativo de desarrollo, podras probar si problema la mayoria de los navegadores: Firefox, Chrome, Opera, Konqueror, etc, (incluso Safari usando &lt;strong>wine)&lt;/strong>, pero hay un navegador que se nos va a escapar y que por desgracia para la web es ampliamente utilizado: &lt;strong>Internet Explorer.&lt;/strong>&lt;/p></description></item></channel></rss>
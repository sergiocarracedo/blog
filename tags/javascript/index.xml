<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Javascript on Sergio Carracedo</title><link>https://sergiocarracedo.es/tags/javascript/</link><description>Recent content in Javascript on Sergio Carracedo</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 25 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://sergiocarracedo.es/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Are you using semicolons in JS/TS? Maybe is time to remove them</title><link>https://sergiocarracedo.es/no-more-js-semicolons/</link><pubDate>Sun, 25 Aug 2024 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/no-more-js-semicolons/</guid><description>&lt;p>I have been using &lt;a href="https://standardjs.com/">standardjs&lt;/a> (and &lt;a href="https://github.com/standard/ts-standard">standardts&lt;/a>) for 5 years as &lt;em>lint&lt;/em> ruleset in my projects, and I am very happy with that. I tried before &lt;a href="https://github.com/google/eslint-config-google">Google config lint&lt;/a> and &lt;a href="https://github.com/airbnb/javascript">eslint-config-airbnb
&lt;/a> and one of the main differences I found between those rulesets is relative to semicolons; Google and Airbnb require the use of semicolons at the of the lines, but &lt;em>standardjs&lt;/em> don&amp;rsquo;t.&lt;/p>
&lt;p>I worked a long time ago with PHP that requires them, but I adapted very fast to not use them in JavaScript and Go. Now I&amp;rsquo;m working on a project with a ruleset that includes the semicolons rule, and I found it a little bit uncomfortable in some situations&lt;/p></description></item><item><title>Detecting circular dependencies in Javascript projects</title><link>https://sergiocarracedo.es/circular-dependencies/</link><pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/circular-dependencies/</guid><description>&lt;p>Circular imports (or circular dependencies, or cycle dependencies, but not the same as circular references) are easy to have in your code base, and more when the code grows. It can impact in the bundle generation or cause issues (for example in HMR) and you should avoid them because they are a symptom of an incorrect architecture or code organization and is a big code smell.&lt;/p>
&lt;h2 id="what-are-circular-dependencies">What are circular dependencies&lt;/h2>
&lt;p>Circular dependencies occur when a package (A) depends on another package (B) and B also depends on A. Circular dependencies can be more complex: A depends on B, B on C, C on D and D on A&lt;/p></description></item><item><title>The advantage of using cache to decouple the frontend code</title><link>https://sergiocarracedo.es/using-cache-to-decouple-frontend-code/</link><pubDate>Mon, 20 Nov 2023 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/using-cache-to-decouple-frontend-code/</guid><description>&lt;p>We can agree decoupling is a good practice that simplifies the code and the maintainability of the project.&lt;/p>
&lt;p>A common way of decoupling the code is to divide the responsibilities into different layers, a very common division is:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>view layer&lt;/strong>: in charge of render HTML and interacting with the user&lt;/li>
&lt;li>&lt;strong>domain layer&lt;/strong>: in charge of the business logic&lt;/li>
&lt;li>&lt;strong>infra layer&lt;/strong>: in charge of getting the data from the backend and returning it to the domain layer(here is very common to use the repository pattern, which is just a contract to get the data. The contract is unique but you can have multiple implementations, for example, one for a REST API and another for a GraphQL API, you should be able to change the implementation without changing other pieces in the code)&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s see a couple of examples use cases where it is very typical to put the performance over the decoupling. (Spoiler: we can have both)&lt;/p></description></item><item><title>Typescript tips for legacy projects: Type only you need</title><link>https://sergiocarracedo.es/typescript-tips/</link><pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/typescript-tips/</guid><description>&lt;p>When you introduce Typescript in a legacy project, or you are using a library that doesn&amp;rsquo;t provide types, you might be tempted to use &lt;code>any&lt;/code> for the types you will need. But this is not a good idea, because you are losing all the benefits of Typescript. &lt;strong>&lt;code>any&lt;/code> it&amp;rsquo;s something you must remove from code, and from your mind&lt;/strong>.&lt;/p>
&lt;h2 id="type-a-shape-progressively">Type a shape progressively&lt;/h2>
&lt;p>It&amp;rsquo;s very common to have an object with a lot of properties, and trying to type completely the shape (that is the final goal) of an object you don&amp;rsquo;t completely understand can be an overwhelming task.&lt;/p></description></item><item><title>How Vue's reactivity works (I): Object.defineProperty</title><link>https://sergiocarracedo.es/how-vue-reactivity-works-i/</link><pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/how-vue-reactivity-works-i/</guid><description>&lt;p>Maybe you don&amp;rsquo;t need to know how Vue reactivity works under the hood to make Vue apps, but anyway it will be interesting and useful.&lt;/p>
&lt;p>In this context &lt;strong>reactivity&lt;/strong>, means, simplifying, the capacity to detect a data change and do something after that.&lt;/p>
&lt;p>In a Vue component, &lt;strong>reactivity&lt;/strong>, means that the component will be re-rendered (totally or partially) after a change in the value of a variable to show the component updated with the new value. For example in this basic component:&lt;/p></description></item></channel></rss>
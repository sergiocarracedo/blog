<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ui on Sergio Carracedo</title><link>https://sergiocarracedo.es/tags/ui/</link><description>Recent content in Ui on Sergio Carracedo</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 06 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://sergiocarracedo.es/tags/ui/index.xml" rel="self" type="application/rss+xml"/><item><title>Input-field concept to improve reusability and consistency in your form-related UI components</title><link>https://sergiocarracedo.es/input-field/</link><pubDate>Mon, 06 Jan 2025 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/input-field/</guid><description>&lt;p>Reusability and consistency are two concepts I am &amp;ldquo;obsessed&amp;rdquo; with. Maybe it&amp;rsquo;s because I know the effort and pain of maintaining a UI component library without those concepts in mind. It&amp;rsquo;s also about the developer experience, and the less time you spend on repetitive tasks, the more time you have to focus on the real problems and deliver value to your users. From the user&amp;rsquo;s point of view, consistency is a key factor in the usability of an application.&lt;/p></description></item><item><title>Even more features. Lessons I Learned Creating a Table Component (4/4)</title><link>https://sergiocarracedo.es/creating-a-table-component-iv/</link><pubDate>Wed, 27 Nov 2024 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/creating-a-table-component-iv/</guid><description>&lt;blockquote>
&lt;p>This post is part of a post series: &lt;a href="https://sergiocarracedo.es/creating-a-table-component-i/">First part&lt;/a>, &lt;a href="https://sergiocarracedo.es/creating-a-table-component-ii/">Second part&lt;/a>, &lt;a href="https://sergiocarracedo.es/creating-a-table-component-iii/">Third part&lt;/a>) and an extra related post: &lt;a href="https://sergiocarracedo.es/query-builder-filter-data/">Writing a query builder to filter data&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>As I mentioned in the previous chapters of this series, I prefer to provide the maximum number of features in the table. There are several reasons behind this decision, those are the more relevant ones:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Homogeneity&lt;/strong>: Same solution to the same problem in different places. If you don&amp;rsquo;t provide a solution for the common or repeated needs, you are taking the risk of having different solutions for the same problem. That is very common in large applications where the teams work on different parts of the application, and they can provide different solutions and different user experiences for similar use cases, this causes duplication of work and a bad user experience.&lt;/li>
&lt;li>&lt;strong>Maintainability&lt;/strong>: In general it&amp;rsquo;s easy to maintain the code, if you solve a bug it will be solved in all the places the table&amp;rsquo;s feature is used, or if a feature changes it will change in all the places, this is very related to the previous point. For example if we decide to use a recycle view to render the table rows for a better performance, we only need to do it once, and all the implementation will benefit from that.&lt;/li>
&lt;li>&lt;strong>Implementation simplicity&lt;/strong>: Using a table with a lot of use cases and features (mostly based on configurations or props) makes it very simple to implement the table even for any developer, even if is a new-joiner or junior.&lt;/li>
&lt;/ul>
&lt;p>The trade-offs of this are:&lt;/p></description></item><item><title>Column related features: Lessons I Learned Creating a Table Component (3/4)</title><link>https://sergiocarracedo.es/creating-a-table-component-iii/</link><pubDate>Tue, 12 Nov 2024 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/creating-a-table-component-iii/</guid><description>&lt;blockquote>
&lt;p>This post is part of a post series: &lt;a href="https://sergiocarracedo.es/creating-a-table-component-i/">First part&lt;/a>, &lt;a href="https://sergiocarracedo.es/creating-a-table-component-ii/">Second part&lt;/a>, &lt;a href="https://sergiocarracedo.es/creating-a-table-component-iv/">Fourth part&lt;/a> and an extra related post: &lt;a href="https://sergiocarracedo.es/query-builder-filter-data/">Writing a query builder to filter data&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>I want to use this last post in the series to discuss col-related features, such as col sorting, hidden cols, excluded cols, fixed cols, etc.&lt;/p>
&lt;h2 id="user-defined-cols-vs-internal-cols">User-defined cols vs internal cols&lt;/h2>
&lt;p>It&amp;rsquo;s important to know that one thing is the cols defined by the user, those are data cols and are defined via the cols definition property, and another thing is the cols in general, which include the user cols, but also cols are defined by other props or features of the table (internal cols), for example the col that renders the checkboxes in the case of a selectable table, the col, that shows an arrow to expand the col, the col that renders the action buttons, etc.&lt;/p></description></item><item><title>Query builder to filter data in TypeScript</title><link>https://sergiocarracedo.es/query-builder-filter-data/</link><pubDate>Mon, 04 Nov 2024 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/query-builder-filter-data/</guid><description>&lt;p>I wrote posts (&lt;a href="https://sergiocarracedo.es/creating-a-table-component-i/">1&lt;/a>, &lt;a href="https://sergiocarracedo.es/creating-a-table-component-ii/">2&lt;/a>, &lt;a href="https://sergiocarracedo.es/creating-a-table-component-iii/">3&lt;/a> and , &lt;a href="https://sergiocarracedo.es/creating-a-table-component-iv/">4&lt;/a>) about my learnings creating table components, and this post can be the third part as I made a query builder for that component, but it can be used in other uses cases.&lt;/p>
&lt;p>A query builder provides a convenient and (usually) simple interface for creating and executing queries (filtering) on a data set.&lt;/p>
&lt;p>In TypeScript (or any other language) if you want to filter an array of objects like:&lt;/p></description></item><item><title>Table pagination, sorting, filtering and row selection. Lessons I learned creating a table component (2/4)</title><link>https://sergiocarracedo.es/creating-a-table-component-ii/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/creating-a-table-component-ii/</guid><description>&lt;blockquote>
&lt;p>This post is part of a post series: &lt;a href="https://sergiocarracedo.es/creating-a-table-component-i/">First part&lt;/a>), &lt;a href="https://sergiocarracedo.es/creating-a-table-component-iii/">Third part&lt;/a>, &lt;a href="https://sergiocarracedo.es/creating-a-table-component-iv/">Fourth part&lt;/a>, and an extra related post: &lt;a href="https://sergiocarracedo.es/query-builder-filter-data/">Writing a query builder to filter data&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>In the &lt;a href="https://sergiocarracedo.es/creating-a-table-component-i/">first chapter&lt;/a> I talked about the data and cols definition. How to manipulate the data, transform it, and format it.&lt;/p>
&lt;p>This second chapter will focus on the pagination, sorting, and filtering features and the row selection.&lt;/p>
&lt;p>Those features can be or cannot be the responsibility of the table, maybe you can delegate them in your code, and in some true way, but I like to provide a homogeneous and complete developer experience minimizing the repetitive tasks and putting them all together where they are needed.&lt;/p></description></item><item><title>Lessons I learned creating a table component (1/4)</title><link>https://sergiocarracedo.es/creating-a-table-component-i/</link><pubDate>Sat, 19 Oct 2024 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/creating-a-table-component-i/</guid><description>&lt;blockquote>
&lt;p>This post is part of a post series: &lt;a href="https://sergiocarracedo.es/creating-a-table-component-ii/">Second part&lt;/a>), &lt;a href="https://sergiocarracedo.es/creating-a-table-component-iii/">Third part&lt;/a>, &lt;a href="https://sergiocarracedo.es/creating-a-table-component-iv/">Fourth part&lt;/a>, and an extra related post: &lt;a href="https://sergiocarracedo.es/query-builder-filter-data/">Writing a query builder to filter data&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>I love creating UI components because they are the fundamental bricks supporting a UI application. When the components are good enough, both User and Developer experience increases, making applications consistent, easy to implement, and easy to scale.&lt;/p>
&lt;p>If the UI application shows data in lists, sooner or later, you will need a table. Tables are UI components that can become very complex depending on their features. The goal of this blog post is not to tell you how to program features but to help you understand some typical needs and features tables should implement to give you useful ideas for your custom UI table component&amp;rsquo;s implementation.&lt;/p></description></item><item><title>UI components library (Chapter II): Components anatomy and interfaces</title><link>https://sergiocarracedo.es/ui-components-library-ii-anatomy-interfaces/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/ui-components-library-ii-anatomy-interfaces/</guid><description>&lt;blockquote>
&lt;p>This is the second post of a series about why and how to create a UI components library. I&amp;rsquo;m going to focus on the code examples in Vue.js, but the concepts are valid for any other framework like React, Angular, LitElements, etc.&lt;/p>
&lt;p>&lt;a href="https://sergiocarracedo.es/ui-components-library-i-why-and-to-create-one/">Chapter I: Introduction&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Before creating a components library, it&amp;rsquo;s important to understand the anatomy of a component, its interfaces, and how to create a good &amp;ldquo;API&amp;rdquo; for the components.&lt;/p></description></item><item><title>UI components library (Chapter I): Why and to create one? Characteristics of a good UI library</title><link>https://sergiocarracedo.es/ui-components-library-i-why-and-to-create-one/</link><pubDate>Mon, 12 Feb 2024 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/ui-components-library-i-why-and-to-create-one/</guid><description>&lt;blockquote>
&lt;p>This is the first post of a series about why and how to create a UI components library. I&amp;rsquo;m going to focus on the code examples in Vue.js, but the concepts are valid for any other framework like React, Angular, LitElements, etc.
In this first post I&amp;rsquo;m going to talk about the component of why you should (or should not) create a UI components library, but first let&amp;rsquo;s define what is a UI components library.&lt;/p></description></item><item><title>CSS variables scoping to create and theme flexible ui components</title><link>https://sergiocarracedo.es/css-variables-scoping/</link><pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/css-variables-scoping/</guid><description>&lt;p>The real name of the &lt;em>CSS variables&lt;/em> is &lt;strong>CSS Custom Properties&lt;/strong> is a draft standard (yes when I wrote these lines is on &lt;a href="https://www.w3.org/standards/history/css-variables-1">Candidate Recommendation Snapshot&lt;/a>), but is widely supported by modern browsers.&lt;/p>
&lt;p>&lt;figure class="image-caption">
 &lt;img
 src="https://sergiocarracedo.es/css-variables-scoping/caniuse_hu1024568659502407434.jpg"
 alt="caniuse css variables"
 title=""
 width="1100"
 height="478" srcset="https://sergiocarracedo.es/css-variables-scoping/caniuse_hu2712143101988994246.webp 458w, https://sergiocarracedo.es/css-variables-scoping/caniuse_hu16625346311424674725.webp 768w, https://sergiocarracedo.es/css-variables-scoping/caniuse_hu2765121895761830054.webp 1377w" sizes="(max-width: 458px) 100vw, (max-width: 768px) 100vw, 1377px"/>
 &lt;figcaption>&lt;/figcaption>
 &lt;/figure>&lt;/p>
&lt;p>CSS variables allow us, like another kind of variable in another programming language to store a value we can reuse across our document.&lt;/p></description></item><item><title>How to create a table with a fixed header</title><link>https://sergiocarracedo.es/how-to-create-a-table-with-a-fixed-header/</link><pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/how-to-create-a-table-with-a-fixed-header/</guid><description>&lt;p>Tables in HTML are one of the older things in the standard, even before CSS we had HTML tables. In the past tables were used to markup the webpages, but the correct usage is to display tabular data.&lt;/p>
&lt;p>Over time the standard improves the table styling covering most of the use cases you can consider.&lt;/p>
&lt;p>But, there is a use case it&amp;rsquo;s not easy to get with the table attributes or style properties, I&amp;rsquo;m talking about creating a table with a fixed/sticky header (or footer).&lt;/p></description></item><item><title>Custom SVG icon set management with Vue</title><link>https://sergiocarracedo.es/custom-svg-icon-set-management-with-vue/</link><pubDate>Thu, 01 Apr 2021 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/custom-svg-icon-set-management-with-vue/</guid><description>&lt;p>Manage an icon set can seem a simple task but can be tricky.&lt;/p>
&lt;p>First, there a lot of ways to use an icon on a web page, all with pros and contras:&lt;/p>
&lt;p>Let&amp;rsquo;s use this SVG image created by &lt;a href="https://freeicons.io/profile/730">Anu Rocks&lt;/a> for all examples.&lt;/p>
&lt;p>&lt;strong>We will assume our icon set is monochrome.&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>&lt;a href="https://freeicons.io/common-ui-icons/battery-medium-icon-54110">&lt;img src="example.svg"alt="" title="" />&lt;/a>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="img-tag">&amp;lt;img&amp;gt; tag&lt;/h2>
&lt;p>The simplest way of adding an icon is using the &lt;code>&amp;lt;img&amp;gt;&lt;/code> tag as the other images.&lt;/p></description></item></channel></rss>
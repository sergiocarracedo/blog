<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ui on Sergio Carracedo</title><link>https://sergiocarracedo.es/tags/ui/</link><description>Recent content in Ui on Sergio Carracedo</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 11 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://sergiocarracedo.es/tags/ui/index.xml" rel="self" type="application/rss+xml"/><item><title>UI components library (Chapter I): Why and to create one? Characteristics of a good UI library</title><link>https://sergiocarracedo.es/ui-components-library-i-why-and-to-create-one/</link><pubDate>Sun, 11 Feb 2024 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/ui-components-library-i-why-and-to-create-one/</guid><description>This is the first post of a series about why and how to create a UI components library. I&amp;rsquo;m going to focus on the code examples in Vue.js, but the concepts are valid for any other framework like React, Angular, LitElements, etc. In this first post I&amp;rsquo;m going to talk about the component of why you should (or should not) create a UI components library, but first let&amp;rsquo;s define what is a UI components library.</description></item><item><title>CSS variables scoping to create and theme flexible ui components</title><link>https://sergiocarracedo.es/css-variables-scoping/</link><pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/css-variables-scoping/</guid><description>The real name of the CSS variables is CSS Custom Properties is a draft standard (yes when I wrote these lines is on Candidate Recommendation Snapshot), but is widely supported by modern browsers.
CSS variables allow us, like another kind of variable in another programming language to store a value we can reuse across our document.
For example, if we define a CSS variable for the primary color doing: --primary-color: #f00;, then we can use it in any component like:</description></item><item><title>How to create a table with a fixed header</title><link>https://sergiocarracedo.es/how-to-create-a-table-with-a-fixed-header/</link><pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/how-to-create-a-table-with-a-fixed-header/</guid><description>Tables in HTML are one of the older things in the standard, even before CSS we had HTML tables. In the past tables were used to markup the webpages, but the correct usage is to display tabular data.
Over time the standard improves the table styling covering most of the use cases you can consider.
But, there is a use case it&amp;rsquo;s not easy to get with the table attributes or style properties, I&amp;rsquo;m talking about creating a table with a fixed/sticky header (or footer).</description></item><item><title>Custom SVG icon set management with Vue</title><link>https://sergiocarracedo.es/custom-svg-icon-set-management-with-vue/</link><pubDate>Thu, 01 Apr 2021 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/custom-svg-icon-set-management-with-vue/</guid><description>Manage an icon set can seem a simple task but can be tricky.
First, there a lot of ways to use an icon on a web page, all with pros and contras:
Let&amp;rsquo;s use this SVG image created by Anu Rocks for all examples.
We will assume our icon set is monochrome.
&amp;lt;img&amp;gt; tag The simplest way of adding an icon is using the &amp;lt;img&amp;gt; tag as the other images.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Infra on Sergio Carracedo</title><link>https://sergiocarracedo.es/tags/infra/</link><description>Recent content in Infra on Sergio Carracedo</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 20 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://sergiocarracedo.es/tags/infra/index.xml" rel="self" type="application/rss+xml"/><item><title>The advantage of using cache to decouple the frontend code</title><link>https://sergiocarracedo.es/using-cache-to-decouple-frontend-code/</link><pubDate>Mon, 20 Nov 2023 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/using-cache-to-decouple-frontend-code/</guid><description>&lt;p>We can agree decoupling is a good practice that simplifies the code and the maintainability of the project.&lt;/p>
&lt;p>A common way of decoupling the code is to divide the responsibilities into different layers, a very common division is:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>view layer&lt;/strong>: in charge of render HTML and interacting with the user&lt;/li>
&lt;li>&lt;strong>domain layer&lt;/strong>: in charge of the business logic&lt;/li>
&lt;li>&lt;strong>infra layer&lt;/strong>: in charge of getting the data from the backend and returning it to the domain layer(here is very common to use the repository pattern, which is just a contract to get the data. The contract is unique but you can have multiple implementations, for example, one for a REST API and another for a GraphQL API, you should be able to change the implementation without changing other pieces in the code)&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s see a couple of examples use cases where it is very typical to put the performance over the decoupling. (Spoiler: we can have both)&lt;/p></description></item></channel></rss>
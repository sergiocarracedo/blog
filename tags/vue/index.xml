<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vue on Sergio Carracedo</title><link>https://sergiocarracedo.es/tags/vue/</link><description>Recent content in Vue on Sergio Carracedo</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 08 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://sergiocarracedo.es/tags/vue/index.xml" rel="self" type="application/rss+xml"/><item><title>UI components library (Chapter II): Components anatomy and interfaces</title><link>https://sergiocarracedo.es/ui-components-library-ii-anatomy-interfaces/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/ui-components-library-ii-anatomy-interfaces/</guid><description>&lt;blockquote>
&lt;p>This is the second post of a series about why and how to create a UI components library. I&amp;rsquo;m going to focus on the code examples in Vue.js, but the concepts are valid for any other framework like React, Angular, LitElements, etc.&lt;/p>
&lt;p>&lt;a href="https://sergiocarracedo.es/ui-components-library-i-why-and-to-create-one/">Chapter I: Introduction&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Before creating a components library, it&amp;rsquo;s important to understand the anatomy of a component, its interfaces, and how to create a good &amp;ldquo;API&amp;rdquo; for the components.&lt;/p></description></item><item><title>UI components library (Chapter I): Why and to create one? Characteristics of a good UI library</title><link>https://sergiocarracedo.es/ui-components-library-i-why-and-to-create-one/</link><pubDate>Mon, 12 Feb 2024 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/ui-components-library-i-why-and-to-create-one/</guid><description>&lt;blockquote>
&lt;p>This is the first post of a series about why and how to create a UI components library. I&amp;rsquo;m going to focus on the code examples in Vue.js, but the concepts are valid for any other framework like React, Angular, LitElements, etc.
In this first post I&amp;rsquo;m going to talk about the component of why you should (or should not) create a UI components library, but first let&amp;rsquo;s define what is a UI components library.&lt;/p></description></item><item><title>SPA (Vue / React / Angular) app loader</title><link>https://sergiocarracedo.es/spa-vue-react-angular-app-loader/</link><pubDate>Mon, 04 Dec 2023 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/spa-vue-react-angular-app-loader/</guid><description>&lt;p>As big a SPA is, more resources (javascript, css, images, etc.) need to load before starting to work (render/show the application in the user&amp;rsquo;s browser)&lt;/p>
&lt;p>This, the time between the page starts to load and the user can interact with, is the TTI, &lt;a href="https://web.dev/articles/tti?hl=en">Time to Interactive&lt;/a>. This is an important metric for your application. &lt;strong>As higher is the value lower is the user experience&lt;/strong> using the application.&lt;/p>
&lt;blockquote>
&lt;p>TTI is a metric for any application, not only for SPAs.&lt;/p></description></item><item><title>Withdraw your library because there is another one better: It's something nice!</title><link>https://sergiocarracedo.es/withdraw-your-library-there-is-another-better/</link><pubDate>Sun, 30 Apr 2023 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/withdraw-your-library-there-is-another-better/</guid><description>&lt;p>In 2019 (almost 4 years ago) I wrote an article about how to handle a &lt;a href="https://sergiocarracedo.es/2019/12/05/tu-propio-v-model-en-un-componente-vue/">custom v-model in Vue 2&lt;/a> (Spanish), in that article I explained how to create a custom v-model in Vue 2, the good practices synchronizing the prop and the internal status and how to avoid the warning message &amp;ldquo;&lt;em>Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop’s value.&lt;/em>&amp;rdquo;&lt;/p></description></item><item><title>Vue Composition API: How to split and reuse code</title><link>https://sergiocarracedo.es/vue-composition-api-how-to-split-and-reuse-code/</link><pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/vue-composition-api-how-to-split-and-reuse-code/</guid><description>&lt;p>The Vue Composition API arrived at us in Nov 2018, 2 years ago, as a &lt;a href="https://medium.com/vue-mastery/evan-you-previews-vue-js-3-0-ab063dec3547">preview&lt;/a> and become with &lt;a href="https://dev.to/danielelkington/vue-s-darkest-day-3fgh">some controversial&lt;/a>, because people believed composition API would replace the traditional Object API, but would not.&lt;/p>
&lt;p>Anyway, after start to develop Vue apps using the composition API I don&amp;rsquo;t want to go back, maybe for very small components makes you write more code than with the Object API, but in most cases, you can take advantage of the composition API features.&lt;/p></description></item><item><title>Simplifying the use of custom a Vue v-model</title><link>https://sergiocarracedo.es/vue-use-model-helpers/</link><pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/vue-use-model-helpers/</guid><description>&lt;p>One year ago I wrote a post about how to manage your
&lt;a href="https://sergiocarracedo.es/2019/12/05/tu-propio-v-model-en-un-componente-vue/">custom v-model in your component&lt;/a>
(&lt;em>Spanish&lt;/em>).&lt;/p>
&lt;p>The problem still being the same, if you try to mutate the value of the property into the component you will get this error message:&lt;/p>
&lt;blockquote>
&lt;p>Error message: Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop’s value.&lt;/p></description></item><item><title>Tips using Typescript and Vue</title><link>https://sergiocarracedo.es/tips-using-typescript-and-vue/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/tips-using-typescript-and-vue/</guid><description>&lt;p>Typescript is a great &amp;ldquo;language&amp;rdquo;, makes it possible to create more maintainable and understandable software, but requires extra effort to type the variables, the functions&amp;rsquo; arguments, etc&amp;hellip;&lt;/p>
&lt;p>Vue 2.x, and even more Vue 3 provide a great typescript integration, providing the necessary types to use your app, but not always are trivial, and you need to know the types you must use in every case.&lt;/p>
&lt;p>I want to share with all of you the lessons I learned in my experience using Vue and TS, the typical questions, and the &amp;ldquo;problems&amp;rdquo; I found in the way.&lt;/p></description></item><item><title>Talk: Creating your own Vue UI components library: From scratch to NPM</title><link>https://sergiocarracedo.es/blog/2020/creating-your-own-vue-ui-components-library-from-scratch-to-npm/</link><pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/blog/2020/creating-your-own-vue-ui-components-library-from-scratch-to-npm/</guid><description>&lt;p>Past September 29th I did a talk about how to create your own Vue UI components.&lt;/p>
&lt;p>I explained some tips about how to organize the components&amp;rsquo; code, talked in deep about how to set the values in &lt;code>package.json&lt;/code> and their meaning. And how to publish on NPM and then how to use them in another project.&lt;/p>
&lt;p>The talk was in Spanish, but slides are in English.&lt;/p>

 &lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/z_K5iuSjCDo?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
 &lt;/div>

&lt;iframe frameborder="0" marginheight="0" marginwidth="0" width="100%" height="600" type="text/html" src="https://docs.google.com/presentation/d/e/2PACX-1vS9j4GjB2eZrnGI9b47FbecBunSSa_zYPJJsNu2mcJ_uux4CbisJOdG6vaFXB9rPTiPnv4N_KeXlLPl/embed?start=false&amp;amp;loop=false&amp;amp;delayms=5000">&lt;/iframe></description></item><item><title>How Vue's reactivity works (I): Object.defineProperty</title><link>https://sergiocarracedo.es/how-vue-reactivity-works-i/</link><pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/how-vue-reactivity-works-i/</guid><description>&lt;p>Maybe you don&amp;rsquo;t need to know how Vue reactivity works under the hood to make Vue apps, but anyway it will be interesting and useful.&lt;/p>
&lt;p>In this context &lt;strong>reactivity&lt;/strong>, means, simplifying, the capacity to detect a data change and do something after that.&lt;/p>
&lt;p>In a Vue component, &lt;strong>reactivity&lt;/strong>, means that the component will be re-rendered (totally or partially) after a change in the value of a variable to show the component updated with the new value. For example in this basic component:&lt;/p></description></item><item><title>What is VuePress and why you should use it to document your project?</title><link>https://sergiocarracedo.es/vuepress/</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/vuepress/</guid><description>&lt;p>&lt;a href="https://vuepress.vuejs.org/">VuePress&lt;/a> defines itself as a &lt;em>Vue-powered Static Site Generator&lt;/em>. In other words, is a tool to create static sites. A static site is a website where nothing runs on the server. The server only takes care of return the file (HTML file) as is stored in the server.&lt;/p>
&lt;p>Is the opposite of a &lt;strong>dynamic site&lt;/strong>, like for example a PHP webpage, in that case, your browser makes a request to the server, and the server executes PHP code that, for example, get a post from a database, process it, put that post in an HTML template, etc and returns the result to the browser.&lt;/p></description></item><item><title>Export and import Vuex state</title><link>https://sergiocarracedo.es/2020/07/22/export-and-import-vuex-state/</link><pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/2020/07/22/export-and-import-vuex-state/</guid><description>&lt;p>If you are familiarized with Vuex, you must know that Vuex is a &lt;a href="https://vuex.vuejs.org/#what-is-vuex">state management pattern library&lt;/a> for Vue applications. Vuex centralizes the application&amp;rsquo;s state and how components, and other code parts, change it.&lt;/p>
&lt;p>You can find a lot of articles talking about Vuex, I even wrote 2 articles 3 year ago talking about it:
&lt;a href="https://sergiocarracedo.es/2017/04/03/vuex-el-redux-de-vuejs-i/" title="Vuex el redux de VueJS I">Vuex el redux de VueJS I&lt;/a>
and
&lt;a href="https://sergiocarracedo.es/2017/04/03/vuex-el-redux-de-vuejs-i/" title="Vuex el redux de VueJS II">Vuex el redux de VueJS II&lt;/a> (&lt;em>Spanish&lt;/em>)&lt;/p></description></item><item><title>Creating a simple donut progress chart</title><link>https://sergiocarracedo.es/2020/05/18/Creating-a-simple-donut-chart/</link><pubDate>Mon, 18 May 2020 09:28:03 +0000</pubDate><guid>https://sergiocarracedo.es/2020/05/18/Creating-a-simple-donut-chart/</guid><description>&lt;p>One of more simpler charts you can create is a circular chart to represent the percent of completion of something.&lt;/p>
&lt;h1 id="first-approximation">First approximation&lt;/h1>
&lt;p>We could create a SVG document to draw our donut. SVG allow us to represent graphical elements, for example, cicles, rectangles, polygons, etc&amp;hellip; using XML (and therefore accesing to the elements via DOM). SVG is vertorial and is perfect for responsive.&lt;/p>
&lt;p>&lt;img src="01.svg"alt="" title="" />&lt;/p>
&lt;p>Figure 1 represent that kind of chart, if the value is 100% the donut is perfect, if is 50% donut is a half donut, and 0% means no donut.&lt;/p></description></item><item><title>Start using Typescript in Vue. The easy way.</title><link>https://sergiocarracedo.es/2020/02/27/start-using-typescript-in-vue-easy-way/</link><pubDate>Thu, 27 Feb 2020 10:58:02 +0000</pubDate><guid>https://sergiocarracedo.es/2020/02/27/start-using-typescript-in-vue-easy-way/</guid><description>&lt;p>If you program in &lt;em>JavaScript&lt;/em> probably somebody told you about the advantages of using &lt;em>Typescript&lt;/em> or you thought about start using it.&lt;/p>
&lt;p>As you can see in this chart, more than 50% &lt;em>Javascript&lt;/em> developers are using &lt;em>Typescript&lt;/em>&lt;/p>
&lt;p>&lt;img src="https://sergiocarracedo.es/images/javascript_flavors_section_overview.png"alt="" title="" />
&lt;em>Source: &lt;a href="https://2019.stateofjs.com/javascript-flavors/">https://2019.stateofjs.com/javascript-flavors/&lt;/a>&lt;/em>&lt;/p>
&lt;p>Start to use a new technology, new paradigm, new framework or anything could be hard and challenging, this is why is important start integrating new technologies avoiding friction with previous one. Today I&amp;rsquo;ll try to show you the easiest way to start using &lt;em>Typescript&lt;/em> in your Vue projects.&lt;/p></description></item><item><title>Vue Router lazy loading and chunking</title><link>https://sergiocarracedo.es/2019/12/29/vue-router-lazy-loading-and-chunking/</link><pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/2019/12/29/vue-router-lazy-loading-and-chunking/</guid><description>&lt;p>When you start to create SPA &lt;em>(Single page application)&lt;/em> you must bear in mind that SPA doesn&amp;rsquo;t mean &lt;em>Single JavaScript file&lt;/em>.&lt;/p>
&lt;p>You normally use &lt;em>Webpack&lt;/em> to handle your app builds, by default, &lt;em>Webpack&lt;/em> create one file for all assets, &lt;em>even CSS&lt;/em>.&lt;/p>
&lt;p>The first step, maybe, is separate styles from &lt;em>app.js&lt;/em> in their own CSS files.&lt;/p>
&lt;p>To do this, we&amp;rsquo;ll use the &lt;em>Webpack&lt;/em> plugin &lt;em>&lt;a href="https://webpack.js.org/plugins/mini-css-extract-plugin/">MiniCssExtractPlugin&lt;/a>&lt;/em> which we&amp;rsquo;ll configure like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// webpack.config.js
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">MiniCssExtractPlugin&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;mini-css-extract-plugin&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">module&lt;/span>.&lt;span style="color:#a6e22e">exports&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">plugins&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">MiniCssExtractPlugin&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">filename&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[name].css&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">module&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">rules&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">test&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">/\.css$/&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">use&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">loader&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">MiniCssExtractPlugin&lt;/span>.&lt;span style="color:#a6e22e">loader&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">options&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">publicPath&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/public/path/to/&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;css-loader&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ... &lt;span style="color:#75715e">// Other loaders like sass-loader or postcss-loader
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This forces &lt;em>Webpack&lt;/em> to extract CSS into separated files, for example &lt;code>app.css&lt;/code>&lt;/p></description></item><item><title>Tu propio v-model en un componente Vue (The right way)</title><link>https://sergiocarracedo.es/2019/12/05/tu-propio-v-model-en-un-componente-vue/</link><pubDate>Thu, 05 Dec 2019 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/2019/12/05/tu-propio-v-model-en-un-componente-vue/</guid><description>&lt;p>Si has usado componentes de Vue (o incluso un input básico) habrás usado &lt;code>v-model&lt;/code> para enlazar un valor en el componente padre y en el componente hijo.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;message&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// o
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">datepicker&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;date&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/datepicker&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Si en el componente padre (aquel donde incluimos &lt;em>datepicker&lt;/em>) modificamos el valor de &lt;code>date&lt;/code> automáticamente se modificará el valor dentro del componente, de igual forma si el componente modifica el valor de &lt;code>date&lt;/code> el valor se modificará en el padre. Esto lo que permite, por ejemplo, es que cuando en un campo input escribimos algo en el componente padre se pueda mostrar lo que escribimos usando &lt;code>{% raw %}{{ date }}{% endraw %}&lt;/code>&lt;/p></description></item></channel></rss>
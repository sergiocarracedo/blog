<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Clear Code on Sergio Carracedo</title><link>https://sergiocarracedo.es/tags/clear-code/</link><description>Recent content in Clear Code on Sergio Carracedo</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 10 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://sergiocarracedo.es/tags/clear-code/index.xml" rel="self" type="application/rss+xml"/><item><title>Detecting circular dependencies in Javascript projects</title><link>https://sergiocarracedo.es/circular-dependencies/</link><pubDate>Sat, 10 Aug 2024 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/circular-dependencies/</guid><description>Circular imports (or circular dependencies, or cycle dependencies, but not the same as circular references) are easy to have in your code base, and more when the code grows. It can impact in the bundle generation or cause issues (for example in HMR) and you should avoid them because they are a symptom of an incorrect architecture or code organization and is a big code smell.
What are circular dependencies Circular dependencies occur when a package (A) depends on another package (B) and B also depends on A.</description></item></channel></rss>
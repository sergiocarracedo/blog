<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Performance on Sergio Carracedo</title><link>https://sergiocarracedo.es/tags/performance/</link><description>Recent content in Performance on Sergio Carracedo</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 17 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://sergiocarracedo.es/tags/performance/index.xml" rel="self" type="application/rss+xml"/><item><title>Math.max (and min) 'Maximum call stack size exceeded' with large datasets and how to reimplement it to make it much faster</title><link>https://sergiocarracedo.es/math-max-problem-fast-max/</link><pubDate>Tue, 17 Dec 2024 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/math-max-problem-fast-max/</guid><description>&lt;p>Even though Javascript was not created with the management of large datasets in mind, manipulating them nowadays is very common.&lt;/p>
&lt;p>Data aggregation is also a common functionality, calculate the max value in an array, is a simple task, the language provides the &lt;code>Math.max&lt;/code> method to do it.&lt;/p>
&lt;p>But, try to do this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Array.&lt;span style="color:#66d9ef">from&lt;/span>({ &lt;span style="color:#a6e22e">length&lt;/span>: &lt;span style="color:#66d9ef">1_000_000&lt;/span> }, () &lt;span style="color:#f92672">=&amp;gt;&lt;/span> Math.&lt;span style="color:#a6e22e">random&lt;/span>() &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">1000&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(Math.&lt;span style="color:#a6e22e">max&lt;/span>(...&lt;span style="color:#a6e22e">data&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The code is simple: it generates and array with 1.000.000 random items and then tries to get the max value of the array and as the &lt;code>Math.max&lt;/code> &lt;strong>doesn&amp;rsquo;t accept an array as param, we need to spread the array to pass the values as function&amp;rsquo;s arguments&lt;/strong>.&lt;/p></description></item><item><title>Find a item in lists in js: Performance of Set vs Array</title><link>https://sergiocarracedo.es/js-lists-performance/</link><pubDate>Mon, 04 Sep 2023 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/js-lists-performance/</guid><description>&lt;p>In our apps, it&amp;rsquo;s very common to store data in lists, for example, a list of users, a list of posts, a list of selected ids, etc, and also it&amp;rsquo;s very common too need to check if a value is in the list or not.&lt;/p>
&lt;p>In most cases, we use simple arrays to store the data, and we use the &lt;code>includes&lt;/code> method to check if a value is in the array or not. This works and if your list is not too big, or you only need to find one element once you will not notice any performance issue, imagine the following case:&lt;/p></description></item></channel></rss>
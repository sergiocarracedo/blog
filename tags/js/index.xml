<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Js on Sergio Carracedo</title><link>https://sergiocarracedo.es/tags/js/</link><description>Recent content in Js on Sergio Carracedo</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 04 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://sergiocarracedo.es/tags/js/index.xml" rel="self" type="application/rss+xml"/><item><title>Find a item in lists in js: Performance of Set vs Array</title><link>https://sergiocarracedo.es/js-lists-performance/</link><pubDate>Mon, 04 Sep 2023 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/js-lists-performance/</guid><description>&lt;p>In our apps, it&amp;rsquo;s very common to store data in lists, for example, a list of users, a list of posts, a list of selected ids, etc, and also it&amp;rsquo;s very common too need to check if a value is in the list or not.&lt;/p>
&lt;p>In most cases, we use simple arrays to store the data, and we use the &lt;code>includes&lt;/code> method to check if a value is in the array or not. This works and if your list is not too big, or you only need to find one element once you will not notice any performance issue, imagine the following case:&lt;/p></description></item><item><title>Typescript typing challenges and type utilities</title><link>https://sergiocarracedo.es/typescript-typing-challenges-and-type-utilities/</link><pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/typescript-typing-challenges-and-type-utilities/</guid><description>&lt;p>Recently I was looking for more knowledge about Typescript typing, how to create more advanced and better types, and I can say that it&amp;rsquo;s a big deal, there are a lot of things you can do and, you never imagined before.&lt;/p>
&lt;p>During that &amp;ldquo;investigation&amp;rdquo; I found very interesting resources I want to share with you.&lt;/p>
&lt;h1 id="type-challenge">Type Challenge&lt;/h1>
&lt;p>&lt;a href="https://tsch.js.org/">https://tsch.js.org/&lt;/a>&lt;/p>
&lt;p>It&amp;rsquo;s a repository that includes a lot of, very well-documented, and designed typing challenges. Each challenge provides you a definition of it in a &lt;code>README.md&lt;/code> file, a &lt;code>test-cases.ts&lt;/code> file with the tests the type you should define should pass, and finally the file &lt;code>template.ts&lt;/code> where you should do your job creating the type necessary to meet the requirements and to pass all the tests.&lt;/p></description></item><item><title>Typescript type narrowing, type guards and type predicates ([var] is [type])</title><link>https://sergiocarracedo.es/typescript-type-narrowing/</link><pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/typescript-type-narrowing/</guid><description>&lt;p>One useful feature in Typescript is &lt;em>union types&lt;/em>, for example &lt;code>string | number | null&lt;/code>, it&amp;rsquo;s a way to specify an argument, return, or variable that can get values with different types.&lt;/p>
&lt;p>&lt;strong>Type Narrowing&lt;/strong> is a technique that allows Typescript compiler to &lt;strong>reduce&lt;/strong> the types of a value evaluating &lt;strong>guard clauses&lt;/strong> in compilation time.&lt;/p>
&lt;p>Let&amp;rsquo;s see a simple example, imagine we have a function to uppercase a value that can be &lt;code>number&lt;/code>, &lt;code>string&lt;/code>, or just &lt;code>null&lt;/code>, into the function we need to handle the different cases, but at the same time Typescript can understand the types and reduce value type to the correct type in each code&amp;rsquo;s branch.&lt;/p></description></item><item><title>Creating custom events in JS</title><link>https://sergiocarracedo.es/creating-custom-events-in-js/</link><pubDate>Mon, 18 Oct 2021 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/creating-custom-events-in-js/</guid><description>&lt;p>When you try to encapsulate features but need to interact with async events or events generated by user interaction, one of the easiest ways to achieve that is using event and event handlers (often called callbacks).&lt;/p>
&lt;p>Imagine you have a UI component to render a TO-DO list with a button to create a TO-DO item through a form. This component is self-encapsulated, you only need to put the component in your app, and the component itself renders the list, the button, the form, do the request to API, etc.&lt;/p></description></item><item><title>Understanding d3.js - A simple line chart</title><link>https://sergiocarracedo.es/understanding-d3-js-introduction/</link><pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/understanding-d3-js-introduction/</guid><description>&lt;p>Before starting is important to say that &lt;strong>d3.js is not a chart library is a library for making charts&lt;/strong>, if you are expecting to pass the data to the library and set 4, 5,&amp;hellip; 10 params and get the chart to render, d3.js is not your library.&lt;/p>
&lt;p>&lt;a href="https://d3js.org/">d3.js&lt;/a> is more than that, is a very flexible library to manage data (data-driven documents) and create the representation of that data (not only charts). &lt;strong>d3.js&lt;/strong> provides you the different pieces to create your customized data visualizations (for example charts)&lt;/p></description></item><item><title>Export and import Vuex state</title><link>https://sergiocarracedo.es/2020/07/22/export-and-import-vuex-state/</link><pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/2020/07/22/export-and-import-vuex-state/</guid><description>&lt;p>If you are familiarized with Vuex, you must know that Vuex is a &lt;a href="https://vuex.vuejs.org/#what-is-vuex">state management pattern library&lt;/a> for Vue applications. Vuex centralizes the application&amp;rsquo;s state and how components, and other code parts, change it.&lt;/p>
&lt;p>You can find a lot of articles talking about Vuex, I even wrote 2 articles 3 year ago talking about it:
&lt;a href="https://sergiocarracedo.es/2017/04/03/vuex-el-redux-de-vuejs-i/" title="Vuex el redux de VueJS I">Vuex el redux de VueJS I&lt;/a>
and
&lt;a href="https://sergiocarracedo.es/2017/04/03/vuex-el-redux-de-vuejs-i/" title="Vuex el redux de VueJS II">Vuex el redux de VueJS II&lt;/a> (&lt;em>Spanish&lt;/em>)&lt;/p></description></item><item><title>Creating a simple donut progress chart</title><link>https://sergiocarracedo.es/2020/05/18/Creating-a-simple-donut-chart/</link><pubDate>Mon, 18 May 2020 09:28:03 +0000</pubDate><guid>https://sergiocarracedo.es/2020/05/18/Creating-a-simple-donut-chart/</guid><description>&lt;p>One of more simpler charts you can create is a circular chart to represent the percent of completion of something.&lt;/p>
&lt;h1 id="first-approximation">First approximation&lt;/h1>
&lt;p>We could create a SVG document to draw our donut. SVG allow us to represent graphical elements, for example, cicles, rectangles, polygons, etc&amp;hellip; using XML (and therefore accesing to the elements via DOM). SVG is vertorial and is perfect for responsive.&lt;/p>
&lt;p>&lt;img src="01.svg"alt="" title="" />&lt;/p>
&lt;p>Figure 1 represent that kind of chart, if the value is 100% the donut is perfect, if is 50% donut is a half donut, and 0% means no donut.&lt;/p></description></item><item><title>Javascript unary operators: Taking advantage using them</title><link>https://sergiocarracedo.es/2020/05/09/js-unary-operators-and-taking-advantage/</link><pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/2020/05/09/js-unary-operators-and-taking-advantage/</guid><description>&lt;h2 id="whats-an-operator">What&amp;rsquo;s an operator?&lt;/h2>
&lt;p>An operator is a symbol that define the operation to do between 1 o more operands.&lt;/p>
&lt;p>&lt;figure class="image-caption">
 &lt;img
 src="https://sergiocarracedo.es/2020/05/09/js-unary-operators-and-taking-advantage/operators_hu1462919087267906555.jpg"
 alt=""
 title="" srcset="https://sergiocarracedo.es/2020/05/09/js-unary-operators-and-taking-advantage/operators_hu8621489050594597029.webp 499w" sizes="499px"/>
 &lt;figcaption>&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>We use a lot of operators: sum (+), subtraction (-), multiply (*), division (/), logic and (&amp;amp;&amp;amp;), negation (!),&amp;hellip;&lt;/p>
&lt;h2 id="whats-a-unary-operator">What&amp;rsquo;s a unary operator?&lt;/h2>
&lt;p>A unary operator is an operator that only needs one operand to work.
For example&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example we have an operand (&lt;code>i&lt;/code>) and an operator (&lt;code>++&lt;/code>), we don&amp;rsquo;t need more to increment the &lt;code>i&lt;/code> variable value.&lt;/p></description></item><item><title>Understanding Javascript's event loop: Macrotasks and microtasks</title><link>https://sergiocarracedo.es/2020/04/27/js-loop/</link><pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/2020/04/27/js-loop/</guid><description>&lt;p>Despite what it may seem, Javascript execution in a browser is &lt;em>synchronous&lt;/em>. It is a similar thing as a &lt;em>multitask&lt;/em> OS running in a mono-core processor, in that case multitasking is &amp;ldquo;fake&amp;rdquo;, because the processor can only execute one instruction at a time, but the OS controls the execution and distribute the processor time between each app, making it looks like multitasking.&lt;/p>
&lt;p>In &lt;em>Javascript&lt;/em> we have a similar approximation in a way to distribute the execution time. It&amp;rsquo;s not exactly the same. Lets see how it works.&lt;/p></description></item><item><title>Start using Typescript in Vue. The easy way.</title><link>https://sergiocarracedo.es/2020/02/27/start-using-typescript-in-vue-easy-way/</link><pubDate>Thu, 27 Feb 2020 10:58:02 +0000</pubDate><guid>https://sergiocarracedo.es/2020/02/27/start-using-typescript-in-vue-easy-way/</guid><description>&lt;p>If you program in &lt;em>JavaScript&lt;/em> probably somebody told you about the advantages of using &lt;em>Typescript&lt;/em> or you thought about start using it.&lt;/p>
&lt;p>As you can see in this chart, more than 50% &lt;em>Javascript&lt;/em> developers are using &lt;em>Typescript&lt;/em>&lt;/p>
&lt;p>&lt;img src="https://sergiocarracedo.es/images/javascript_flavors_section_overview.png"alt="" title="" />
&lt;em>Source: &lt;a href="https://2019.stateofjs.com/javascript-flavors/">https://2019.stateofjs.com/javascript-flavors/&lt;/a>&lt;/em>&lt;/p>
&lt;p>Start to use a new technology, new paradigm, new framework or anything could be hard and challenging, this is why is important start integrating new technologies avoiding friction with previous one. Today I&amp;rsquo;ll try to show you the easiest way to start using &lt;em>Typescript&lt;/em> in your Vue projects.&lt;/p></description></item><item><title>(Deep) Cloning objects in Javascript</title><link>https://sergiocarracedo.es/deep-cloning-objects-in-javascript/</link><pubDate>Sat, 22 Feb 2020 18:28:28 +0000</pubDate><guid>https://sergiocarracedo.es/deep-cloning-objects-in-javascript/</guid><description>&lt;p>Cloning objects in &lt;em>Javascript&lt;/em> (and in other languages) is a tricky task. JS doesn’t store the object value in your variable or in your constant, instead, stores a pointer to the object value (the object reference).&lt;/p>
&lt;p>Even when you pass an object to a function or method, you are passing this object by reference, not the value.&lt;/p>
&lt;p>If you pass (or copy) an object by reference and then change any property, the ‘source’ object’s property also changes.&lt;/p></description></item><item><title>Tu propio v-model en un componente Vue (The right way)</title><link>https://sergiocarracedo.es/2019/12/05/tu-propio-v-model-en-un-componente-vue/</link><pubDate>Thu, 05 Dec 2019 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/2019/12/05/tu-propio-v-model-en-un-componente-vue/</guid><description>&lt;p>Si has usado componentes de Vue (o incluso un input básico) habrás usado &lt;code>v-model&lt;/code> para enlazar un valor en el componente padre y en el componente hijo.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;message&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// o
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">datepicker&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;date&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/datepicker&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Si en el componente padre (aquel donde incluimos &lt;em>datepicker&lt;/em>) modificamos el valor de &lt;code>date&lt;/code> automáticamente se modificará el valor dentro del componente, de igual forma si el componente modifica el valor de &lt;code>date&lt;/code> el valor se modificará en el padre. Esto lo que permite, por ejemplo, es que cuando en un campo input escribimos algo en el componente padre se pueda mostrar lo que escribimos usando &lt;code>{% raw %}{{ date }}{% endraw %}&lt;/code>&lt;/p></description></item><item><title>Node.js: Javascript power!!</title><link>https://sergiocarracedo.es/2010/10/25/nodejs-javascript-power2/</link><pubDate>Mon, 25 Oct 2010 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/2010/10/25/nodejs-javascript-power2/</guid><description>&lt;p>&lt;strong>&lt;a href="http://www.nodejs.org">Node.js&lt;/a>&lt;/strong> es un entorno de programación de entrada/salida orientada a eventos, sobre el motor de Javascript &lt;strong>V8&lt;/strong> (el mismo que usa Google Chrome)&lt;/p>
&lt;p>&lt;em>Pero ¿Que quiere decir todo esto? ¿Y para que me puede servir?&lt;/em>&lt;/p>
&lt;p>Lo más básico que podemos realizar con &lt;strong>node.js&lt;/strong> es un servidor web (HTTP).&lt;/p>
&lt;pre tabindex="0">&lt;code>var http = require(&amp;#39;http&amp;#39;);

http.createServer(function (req, res) {

 res.writeHead(200, {&amp;#39;Content-Type&amp;#39;: &amp;#39;text/plain&amp;#39;});

 res.end(&amp;#39;Hello World\n&amp;#39;);

}).listen(8124, &amp;#34;127.0.0.1&amp;#34;);
&lt;/code>&lt;/pre>&lt;p>Con estas pocas lineas tenemos un servidor web escuchando el puerto 8124 funcionando en nuestro equipo y respondiendonos siempre &amp;ldquo;&lt;em>Hello World&lt;/em>&amp;rdquo;&lt;/p></description></item><item><title>Usabilidad: Notificaciones en el título de la página</title><link>https://sergiocarracedo.es/2010/08/25/usabilidad-notificaciones-en-el-titulo-de-la-pagina/</link><pubDate>Wed, 25 Aug 2010 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/2010/08/25/usabilidad-notificaciones-en-el-titulo-de-la-pagina/</guid><description>&lt;p>Hoy en dia la mayoria de los usuarios cuando estamos navegando tenemos abiertas simultaneamente varias pestañas en el navegador. A veces nuestra aplicación web necesita llamar la atención del usuario para requerir de el una acción o simplemente hacerle sabes que ha recibido una notificación.&lt;/p>
&lt;p>Una buena manera de hacerlo es cambiar alternativamente el título de la página por un aviso, de la misma forma que hace facebook cuando recibimos una notificación de chat; el título de la página cambia 3 o 4 veces entre &amp;ldquo;Facebook&amp;hellip;.&amp;rdquo; y &amp;ldquo;Fulanito te ha enviado un mensaje&amp;rdquo;.&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Js on Sergio Carracedo</title><link>https://sergiocarracedo.es/tags/js/</link><description>Recent content in Js on Sergio Carracedo</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 04 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://sergiocarracedo.es/tags/js/index.xml" rel="self" type="application/rss+xml"/><item><title>Find a item in lists in js: Performance of Set vs Array</title><link>https://sergiocarracedo.es/js-lists-performance/</link><pubDate>Mon, 04 Sep 2023 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/js-lists-performance/</guid><description>In our apps, it&amp;rsquo;s very common to store data in lists, for example, a list of users, a list of posts, a list of selected ids, etc, and also it&amp;rsquo;s very common too need to check if a value is in the list or not.
In most cases, we use simple arrays to store the data, and we use the includes method to check if a value is in the array or not.</description></item><item><title>Typescript typing challenges and type utilities</title><link>https://sergiocarracedo.es/typescript-typing-challenges-and-type-utilities/</link><pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/typescript-typing-challenges-and-type-utilities/</guid><description>Recently I was looking for more knowledge about Typescript typing, how to create more advanced and better types, and I can say that it&amp;rsquo;s a big deal, there are a lot of things you can do and, you never imagined before.
During that &amp;ldquo;investigation&amp;rdquo; I found very interesting resources I want to share with you.
Type Challenge https://tsch.js.org/
It&amp;rsquo;s a repository that includes a lot of, very well-documented, and designed typing challenges.</description></item><item><title>Typescript type narrowing, type guards and type predicates ([var] is [type])</title><link>https://sergiocarracedo.es/typescript-type-narrowing/</link><pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/typescript-type-narrowing/</guid><description>One useful feature in Typescript is union types, for example string | number | null, it&amp;rsquo;s a way to specify an argument, return, or variable that can get values with different types.
Type Narrowing is a technique that allows Typescript compiler to reduce the types of a value evaluating guard clauses in compilation time.
Let&amp;rsquo;s see a simple example, imagine we have a function to uppercase a value that can be number, string, or just null, into the function we need to handle the different cases, but at the same time Typescript can understand the types and reduce value type to the correct type in each code&amp;rsquo;s branch.</description></item><item><title>Creating custom events in JS</title><link>https://sergiocarracedo.es/creating-custom-events-in-js/</link><pubDate>Mon, 18 Oct 2021 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/creating-custom-events-in-js/</guid><description>When you try to encapsulate features but need to interact with async events or events generated by user interaction, one of the easiest ways to achieve that is using event and event handlers (often called callbacks).
Imagine you have a UI component to render a TO-DO list with a button to create a TO-DO item through a form. This component is self-encapsulated, you only need to put the component in your app, and the component itself renders the list, the button, the form, do the request to API, etc.</description></item><item><title>Understanding d3.js - A simple line chart</title><link>https://sergiocarracedo.es/understanding-d3-js-introduction/</link><pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/understanding-d3-js-introduction/</guid><description>Before starting is important to say that d3.js is not a chart library is a library for making charts, if you are expecting to pass the data to the library and set 4, 5,&amp;hellip; 10 params and get the chart to render, d3.js is not your library.
d3.js is more than that, is a very flexible library to manage data (data-driven documents) and create the representation of that data (not only charts).</description></item><item><title>Export and import Vuex state</title><link>https://sergiocarracedo.es/2020/07/22/export-and-import-vuex-state/</link><pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/2020/07/22/export-and-import-vuex-state/</guid><description>If you are familiarized with Vuex, you must know that Vuex is a state management pattern library for Vue applications. Vuex centralizes the application&amp;rsquo;s state and how components, and other code parts, change it.
You can find a lot of articles talking about Vuex, I even wrote 2 articles 3 year ago talking about it: Vuex el redux de VueJS I and Vuex el redux de VueJS II (Spanish)
But today I will write about an edge case related to vuex, as you could read in the title, about how to export and import Vuex state.</description></item><item><title>Creating a simple donut progress chart</title><link>https://sergiocarracedo.es/2020/05/18/Creating-a-simple-donut-chart/</link><pubDate>Mon, 18 May 2020 09:28:03 +0000</pubDate><guid>https://sergiocarracedo.es/2020/05/18/Creating-a-simple-donut-chart/</guid><description>One of more simpler charts you can create is a circular chart to represent the percent of completion of something.
First approximation We could create a SVG document to draw our donut. SVG allow us to represent graphical elements, for example, cicles, rectangles, polygons, etc&amp;hellip; using XML (and therefore accesing to the elements via DOM). SVG is vertorial and is perfect for responsive.
Figure 1 represent that kind of chart, if the value is 100% the donut is perfect, if is 50% donut is a half donut, and 0% means no donut.</description></item><item><title>Javascript unary operators: Taking advantage using them</title><link>https://sergiocarracedo.es/2020/05/09/js-unary-operators-and-taking-advantage/</link><pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/2020/05/09/js-unary-operators-and-taking-advantage/</guid><description>What&amp;rsquo;s an operator? An operator is a symbol that define the operation to do between 1 o more operands.
We use a lot of operators: sum (+), subtraction (-), multiply (*), division (/), logic and (&amp;amp;&amp;amp;), negation (!),&amp;hellip;
What&amp;rsquo;s a unary operator? A unary operator is an operator that only needs one operand to work. For example
i++ In this example we have an operand (i) and an operator (++), we don&amp;rsquo;t need more to increment the i variable value.</description></item><item><title>Understanding Javascript's event loop: Macrotasks and microtasks</title><link>https://sergiocarracedo.es/2020/04/27/js-loop/</link><pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/2020/04/27/js-loop/</guid><description>Despite what it may seem, Javascript execution in a browser is synchronous. It is a similar thing as a multitask OS running in a mono-core processor, in that case multitasking is &amp;ldquo;fake&amp;rdquo;, because the processor can only execute one instruction at a time, but the OS controls the execution and distribute the processor time between each app, making it looks like multitasking.
In Javascript we have a similar approximation in a way to distribute the execution time.</description></item><item><title>Start using Typescript in Vue. The easy way.</title><link>https://sergiocarracedo.es/2020/02/27/start-using-typescript-in-vue-easy-way/</link><pubDate>Thu, 27 Feb 2020 10:58:02 +0000</pubDate><guid>https://sergiocarracedo.es/2020/02/27/start-using-typescript-in-vue-easy-way/</guid><description>If you program in JavaScript probably somebody told you about the advantages of using Typescript or you thought about start using it.
As you can see in this chart, more than 50% Javascript developers are using Typescript
Source: https://2019.stateofjs.com/javascript-flavors/
Start to use a new technology, new paradigm, new framework or anything could be hard and challenging, this is why is important start integrating new technologies avoiding friction with previous one. Today I&amp;rsquo;ll try to show you the easiest way to start using Typescript in your Vue projects.</description></item><item><title>(Deep) Cloning objects in Javascript</title><link>https://sergiocarracedo.es/deep-cloning-objects-in-javascript/</link><pubDate>Sat, 22 Feb 2020 18:28:28 +0000</pubDate><guid>https://sergiocarracedo.es/deep-cloning-objects-in-javascript/</guid><description>Cloning objects in Javascript (and in other languages) is a tricky task. JS doesn’t store the object value in your variable or in your constant, instead, stores a pointer to the object value (the object reference).
Even when you pass an object to a function or method, you are passing this object by reference, not the value.
If you pass (or copy) an object by reference and then change any property, the ‘source’ object’s property also changes.</description></item><item><title>Tu propio v-model en un componente Vue (The right way)</title><link>https://sergiocarracedo.es/2019/12/05/tu-propio-v-model-en-un-componente-vue/</link><pubDate>Thu, 05 Dec 2019 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/2019/12/05/tu-propio-v-model-en-un-componente-vue/</guid><description>Si has usado componentes de Vue (o incluso un input básico) habrás usado v-model para enlazar un valor en el componente padre y en el componente hijo.
&amp;lt;input v-model=&amp;#34;message&amp;#34;&amp;gt; // o &amp;lt;datepicker v-model=&amp;#34;date&amp;#34;&amp;gt;&amp;lt;/datepicker&amp;gt; Si en el componente padre (aquel donde incluimos datepicker) modificamos el valor de date automáticamente se modificará el valor dentro del componente, de igual forma si el componente modifica el valor de date el valor se modificará en el padre.</description></item><item><title>Node.js: Javascript power!!</title><link>https://sergiocarracedo.es/2010/10/25/nodejs-javascript-power2/</link><pubDate>Mon, 25 Oct 2010 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/2010/10/25/nodejs-javascript-power2/</guid><description>Node.js es un entorno de programación de entrada/salida orientada a eventos, sobre el motor de Javascript V8 (el mismo que usa Google Chrome)
Pero ¿Que quiere decir todo esto? ¿Y para que me puede servir?
Lo más básico que podemos realizar con node.js es un servidor web (HTTP).
var http = require(&amp;#39;http&amp;#39;); http.createServer(function (req, res) { res.writeHead(200, {&amp;#39;Content-Type&amp;#39;: &amp;#39;text/plain&amp;#39;}); res.end(&amp;#39;Hello World\n&amp;#39;); }).listen(8124, &amp;#34;127.0.0.1&amp;#34;); Con estas pocas lineas tenemos un servidor web escuchando el puerto 8124 funcionando en nuestro equipo y respondiendonos siempre &amp;ldquo;Hello World&amp;rdquo;</description></item><item><title>Usabilidad: Notificaciones en el título de la página</title><link>https://sergiocarracedo.es/2010/08/25/usabilidad-notificaciones-en-el-titulo-de-la-pagina/</link><pubDate>Wed, 25 Aug 2010 00:00:00 +0000</pubDate><guid>https://sergiocarracedo.es/2010/08/25/usabilidad-notificaciones-en-el-titulo-de-la-pagina/</guid><description>Hoy en dia la mayoria de los usuarios cuando estamos navegando tenemos abiertas simultaneamente varias pestañas en el navegador. A veces nuestra aplicación web necesita llamar la atención del usuario para requerir de el una acción o simplemente hacerle sabes que ha recibido una notificación.
Una buena manera de hacerlo es cambiar alternativamente el título de la página por un aviso, de la misma forma que hace facebook cuando recibimos una notificación de chat; el título de la página cambia 3 o 4 veces entre &amp;ldquo;Facebook&amp;hellip;.</description></item></channel></rss>
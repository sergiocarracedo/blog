<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sergio Carracedo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sergiocarracedo.es/"/>
  <updated>2021-08-09T12:47:58.854Z</updated>
  <id>https://sergiocarracedo.es/</id>
  
  <author>
    <name>Sergio Carracedo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Soy casi un boomer y consumo Twitch: Mis streams favoritos</title>
    <link href="https://sergiocarracedo.es/mis-streams-favoritos-de-twitch/"/>
    <id>https://sergiocarracedo.es/mis-streams-favoritos-de-twitch/</id>
    <published>2021-08-09T00:00:00.000Z</published>
    <updated>2021-08-09T12:47:58.854Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Disclaimer: Este es mi primer post en castellano en bastante tiempo, el motivo es el contenido del que voy a hablar está mayoritariamente en castellano y sería un poco raro hacerlo en inglés</p></blockquote><p>Como dice el título, ya soy casi un boomer, lo que para muchos estereotipos me haría ser el típico consumidor de televisión en mis horas de entretenimiento, pero desde unos hace 4-5 años he ido reduciendo mi consumo televisivo poco a poco a prácticamente 0.</p><p>No voy a entrar mucho en los motivos de este cambio, pero puedo resumirlo en: <strong>Baja calidad del contenido</strong> y <strong>exceso de publicidad</strong></p><p>Al principio mis hábitos de consumo de entretenimiento se movieron a YouTube, porque YT me ofrecía entretenimiento y recursos de aprendizaje. Escribí un par de posts hablando sobre mis canales favoritos: <a href="/2020/06/02/my-favourite-youtube-channels-2020/" title="versión 2020">versión 2020</a> y <a href="/2018/11/29/Mis-canales-favoritos-de-YouTube/" title="versión 2018">versión 2018</a>, y parte siguen estando ahi.</p><p>Cuando a principios de 2019 estuve recibiendo un <a href="/2018/12/20/Como-es-uno-de-mis-ciclos-de-quimioterapia/" title="tratamiento de quimioterapia">tratamiento de quimioterapia</a>, y como durante las recuperaciones tenía tiempo para, entre otras muchas cosas ver entretenimiento, empecé a descubrir Twitch a partir de que uno de los YouTubers que ya conocía también <em>stremeaba</em>, y de ahi comencé a tirar el hilo de otros streamers.</p><p>Y ya llegado el 2020, el año de pandemia y confinamientos, esto ya despuntó, de hecho ya no soy solo consumidor de Twitch, sino también creador ya que lo hemos usado como plataforma de difusión de las charlas de las comunidades de técnicas como en (PHPVigo)[<a href="https://www.twitch.tv/phpvigo?lang=es-ES]">https://www.twitch.tv/phpvigo?lang=es-ES]</a> y especialmente (LaretasGeek)[<a href="https://www.twitch.tv/laretasgeek]">https://www.twitch.tv/laretasgeek]</a> </p><h1 id="Que-es-Twitch"><a href="#Que-es-Twitch" class="headerlink" title="Què es Twitch?"></a>Què es Twitch?</h1><p>Para los que no conozcais Twitch (si es que queda alguien que no lo conozca a estas alturas) es una plataforma de emisión de videos en directo (streams), cada canal tiene un chat que puede interactuar con el streamer (si la mayoría de los streams los gestiona una sola persona). La diferencia con otras plataformas es que los videos solo permanecen disponibles después de la emisión durante unos dias, es decir están pensados para consumirse en directo.</p><p>Cualquiera de nosotros puede seguir un canal de forma gratuita (para que nos avisen cuando empiezan los streams). </p><h2 id="Como-ganan-dinero-en-Twitch-los-streamer"><a href="#Como-ganan-dinero-en-Twitch-los-streamer" class="headerlink" title="Cómo ganan dinero en Twitch los streamer?"></a>Cómo ganan dinero en Twitch los streamer?</h2><p>Además te puedes <em>subscribir</em> al canal, lo que implica el pago, a día de hoy con los cambios que ha introducido Twitch, de 4€/mes en España (de los cuales el streamer se lleva entre el 50% y 70%) y también puedes regalar subscripciones a otros. </p><p>Normalmente los streamers usan herramientas que muestran en el stream sobreimpreso cuando alguien se suscribe o regala suscripciones a otros. Lo que refuerza el hecho de hacerse suscriptor.</p><p>Aunque la mayoría de las suscripciones no tiene coste directo para los seguidores ya que si dispones de Amazon Prime, puedes hacer una suscripción gratis al mes.</p><p>También se pueden hacer donaciones directas (los bits)</p><h2 id="Que-contenido-hay-en-Twitch"><a href="#Que-contenido-hay-en-Twitch" class="headerlink" title="Qué contenido hay en Twitch?"></a>Qué contenido hay en Twitch?</h2><p>Twitch nació como una plataforma para retransmitir partidas de videojuegos, que siguen siendo mayoría, pero también hay otros muchos tipos de contenido no relacionados con videojuegos, como “Just Chatting”, Donde el streamer habla con su audiencia y “Difusión de ciencia y tecnología”, en realidad cualquier tipo de video en directo es susceptible the ser transmitible en Twitch, de hecho este año se han transmitido partidos de futbol de la liga española (de forma legal) y más recientemiente, Ibai, ha <a href="https://www.youtube.com/watch?v=AFFq0gLd2Uo">retransmitido la copa américa</a>  </p><h1 id="Mis-canales-favoritos-the-twitch"><a href="#Mis-canales-favoritos-the-twitch" class="headerlink" title="Mis canales favoritos the twitch"></a>Mis canales favoritos the twitch</h1><h3 id="Carola-https-www-twitch-tv-carola"><a href="#Carola-https-www-twitch-tv-carola" class="headerlink" title="Carola: https://www.twitch.tv/carola"></a>Carola: <a href="https://www.twitch.tv/carola">https://www.twitch.tv/carola</a></h3><div class="left-33">    <img src="/images/2021/twitch/carola.jpg" class="photoswipe">  </div><div class="left-33">    <img src="/images/2021/twitch/carola02.jpg" class="photoswipe"></div><div class="left-33">    <img src="/images/2021/twitch/carola03.jpg" class="photoswipe"></div><div class="clearfix"></div><p>Este streamer es el que estamos viendo más ahora mismo en mi casa. Comenzó principalmente jugando a GTA5 Roleplay, creando personales muy interesantes y sabiendo gestionar para mi gusto muy bien la improvisación y la planificación de los personales. Además es Gallego y su humor es también muy gallego a veces y sobre todo por que nos saca una carcajada casi cada vez que lo vemos y eso vale mucho.<br>En los últimos 2 años ha hecho grupo con MenosTrece, Ricoy, y Agustabell (otros streamers) principalmente para jugar juegos de supervivencia, como Scape From Tarkov</p><h3 id="BuckFernandez-https-www-twitch-tv-buckfernandez"><a href="#BuckFernandez-https-www-twitch-tv-buckfernandez" class="headerlink" title="BuckFernandez: https://www.twitch.tv/buckfernandez"></a>BuckFernandez: <a href="https://www.twitch.tv/buckfernandez">https://www.twitch.tv/buckfernandez</a></h3><div class="left-33">    <img src="/images/2021/twitch/buck-fernandez01.jpg" class="photoswipe">  </div><div class="left-33">    <img src="/images/2021/twitch/buck-fernandez02.jpg" class="photoswipe"></div><div class="left-33">    <img src="/images/2021/twitch/buck-fernandez03.jpg" class="photoswipe"></div><div class="clearfix"></div><p>Este streamer y youtuber, que debe estar cercano a mi edad, es productor musical, rapero, etc.<br>Sus streams no son tan masivos como los de otros, pero los basa en hacer un contenido de calidad que le guste a él y a sus habituales. Puedes encontrarlo componiendo música, jugando a juegos retro con consolas reales (no solo emuladores), haciendo resúmenes humorísticos de películas de serie B de los 80s</p><h3 id="MenosTrece-https-www-twitch-tv-menostrece"><a href="#MenosTrece-https-www-twitch-tv-menostrece" class="headerlink" title="MenosTrece https://www.twitch.tv/menostrece"></a>MenosTrece <a href="https://www.twitch.tv/menostrece">https://www.twitch.tv/menostrece</a></h3><p>Creo que fue de los primeros YouTubers de entretenimiento que comencé a seguir. En Twitch juega a solo o con otros juegadores como Carola, Agus o Ricoy, y mayoritariamente juegos como Escape from Tarkov, Rust, 7 Days to die, Day by daylight, etc</p><blockquote><p>En los siguientes nos voy a entrar en tanto detalle porque los veo de forma más causal</p></blockquote><h3 id="Agustabell212-https-www-twitch-tv-agustabell212"><a href="#Agustabell212-https-www-twitch-tv-agustabell212" class="headerlink" title="Agustabell212 https://www.twitch.tv/agustabell212"></a>Agustabell212 <a href="https://www.twitch.tv/agustabell212">https://www.twitch.tv/agustabell212</a></h3><h3 id="Ricoy23-https-www-twitch-tv-ricoy23"><a href="#Ricoy23-https-www-twitch-tv-ricoy23" class="headerlink" title="Ricoy23 https://www.twitch.tv/ricoy23"></a>Ricoy23 <a href="https://www.twitch.tv/ricoy23">https://www.twitch.tv/ricoy23</a></h3><p>Agus y Ricoy son primos y juegas habitualmente juntos, son muy buenos en Rust</p><h3 id="Silithurh-https-www-twitch-tv-silithur"><a href="#Silithurh-https-www-twitch-tv-silithur" class="headerlink" title="Silithurh https://www.twitch.tv/silithur"></a>Silithurh <a href="https://www.twitch.tv/silithur">https://www.twitch.tv/silithur</a></h3><p>Es un streamer que juega a un poco de todo, y muchas veces interactua con otros de los mencionados y tiene la capacidad de transmitir tranquilidad y relajación.</p><h3 id="Angel-Martin-https-www-twitch-tv-angelmartin"><a href="#Angel-Martin-https-www-twitch-tv-angelmartin" class="headerlink" title="Angel Martin https://www.twitch.tv/angelmartin"></a>Angel Martin <a href="https://www.twitch.tv/angelmartin">https://www.twitch.tv/angelmartin</a></h3><p>Admiro su capacidad de crítica, su ironía, y el hecho de que se ha sabido reinventar: viniendo del mundo de la TV y ahora ha creado un stream con bastantes seguidores y para mi gusto de muy buena calidad  </p><h3 id="Ibai-https-www-twitch-tv-ibai"><a href="#Ibai-https-www-twitch-tv-ibai" class="headerlink" title="Ibai https://www.twitch.tv/ibai"></a>Ibai <a href="https://www.twitch.tv/ibai">https://www.twitch.tv/ibai</a></h3><p>Ibai es la revelación de 2020, previamente <em>casteaba</em> (retransmitia esports, o cosas tan locas como (carreras de canicas)[<a href="https://www.youtube.com/watch?v=bJgfisVKe6w]">https://www.youtube.com/watch?v=bJgfisVKe6w]</a>) y a rotos records de audiencia en Twitch, por ejemplo cuando retransmitió las campanadas. Lo que me gusta principalmente son las “entrevistas” distendidas que hace a gente que no va a otras plataformas.</p><h3 id="Auronplay-https-www-twitch-tv-auronplay"><a href="#Auronplay-https-www-twitch-tv-auronplay" class="headerlink" title="Auronplay https://www.twitch.tv/auronplay"></a>Auronplay <a href="https://www.twitch.tv/auronplay">https://www.twitch.tv/auronplay</a></h3><p>Qué decir de Auronplay, debe ser ahora mismo el streamer con mejores numerous en habla hispana. No soy un gran conmsumidor de todo su contenido, pero a veces lo pongo de fondo y es divertido</p><h3 id="Outconsumer-https-www-twitch-tv-outconsumer"><a href="#Outconsumer-https-www-twitch-tv-outconsumer" class="headerlink" title="Outconsumer https://www.twitch.tv/outconsumer"></a>Outconsumer <a href="https://www.twitch.tv/outconsumer">https://www.twitch.tv/outconsumer</a></h3><p>Otro streamer que parece de mi quinta, y que habla de baloncesto, otros deporte, y juega, pero siempre con un mensaje tranquilo y con transforndo educativo</p><h3 id="IamCristinini-https-www-twitch-tv-iamcristinini"><a href="#IamCristinini-https-www-twitch-tv-iamcristinini" class="headerlink" title="IamCristinini https://www.twitch.tv/iamcristinini"></a>IamCristinini <a href="https://www.twitch.tv/iamcristinini">https://www.twitch.tv/iamcristinini</a></h3><p>Es otra de las grandes del roleplay</p><h1 id="Canales-de-stream-tecnicos-y-de-divulgacion"><a href="#Canales-de-stream-tecnicos-y-de-divulgacion" class="headerlink" title="Canales de stream técnicos y de divulgación"></a>Canales de stream técnicos y de divulgación</h1><h3 id="CodelyTv-https-www-twitch-tv-codelytv"><a href="#CodelyTv-https-www-twitch-tv-codelytv" class="headerlink" title="CodelyTv https://www.twitch.tv/codelytv"></a>CodelyTv <a href="https://www.twitch.tv/codelytv">https://www.twitch.tv/codelytv</a></h3><div class="left-33">    <img src="/images/2021/twitch/codelytv01.jpg" class="photoswipe">  </div><div class="left-33">    <img src="/images/2021/twitch/codelytv02.jpg" class="photoswipe"></div><div class="left-33">    <img src="/images/2021/twitch/codelytv03.png" class="photoswipe"></div><div class="clearfix"></div><p>Poco que decir de CodelyTV, aparte de la plataforma de cursos online de la que disponen, divulgan sobre tecnología todas las semanas en Twitch para disfrute de todos nosotros. Con un contenido interesante, entretenido y a deves se generan debates o situaciones divertidas.</p><h3 id="DovCSV-https-www-twitch-tv-dotcsv"><a href="#DovCSV-https-www-twitch-tv-dotcsv" class="headerlink" title="DovCSV https://www.twitch.tv/dotcsv"></a>DovCSV <a href="https://www.twitch.tv/dotcsv">https://www.twitch.tv/dotcsv</a></h3><p>Canal dedicado principalmente a noticias sobre AI y ML</p><h3 id="LaHiperActina-https-www-twitch-tv-lahiperactina"><a href="#LaHiperActina-https-www-twitch-tv-lahiperactina" class="headerlink" title="LaHiperActina https://www.twitch.tv/lahiperactina"></a>LaHiperActina <a href="https://www.twitch.tv/lahiperactina">https://www.twitch.tv/lahiperactina</a></h3><p>Canal dedicado a la divulgación de biomedicina</p><h3 id="Alva-Majo-https-www-twitch-tv-5ro4"><a href="#Alva-Majo-https-www-twitch-tv-5ro4" class="headerlink" title="Alva Majo https://www.twitch.tv/5ro4"></a>Alva Majo <a href="https://www.twitch.tv/5ro4">https://www.twitch.tv/5ro4</a></h3><p>Dedicado a hablar de la creación de video juegos con un estilo muy particular y mucha sorna</p><h3 id="Salva-Spin-https-www-twitch-tv-salvaespin"><a href="#Salva-Spin-https-www-twitch-tv-salvaespin" class="headerlink" title="Salva Spin https://www.twitch.tv/salvaespin"></a>Salva Spin <a href="https://www.twitch.tv/salvaespin">https://www.twitch.tv/salvaespin</a></h3><p>Salva es un dibujante profesional, trabaja para DC dibujando a Deathpool, en algunos de sus steams muestras como trabaja realizando los dibujos</p><p>Hay otros muchos <a href="https://www.twitch.tv/directory/following/channels">streamers que sigo</a> y otros que conozco y que he visto muy puntualmente como puede ser <a href="https://www.twitch.tv/elxokas">elxokas</a>, <a href="https://www.twitch.tv/elisawavess">elisawavess</a>, <a href="https://www.twitch.tv/gtv_genesis">gtv_genesis</a>, <a href="https://www.twitch.tv/sarinha_3">sarinha_3</a>, <a href="https://www.twitch.tv/little_mary">Little Mary</a>, <a href="https://www.twitch.tv/juansguarnizo">JuanGuarnizo</a>, etc… </p><p>Podemos dejar para otro post la opinión sobre si el contenido es siempre es el adecuado para audiencias de ciertas edades. Spoiler: No siempre, como en todas las plataformas, por desgracia hay contenido tóxico o ejemplo que en mi opinion no son buenos.</p><p>Espero que os gustase mi primer post en castellano, que como veis fué publicado en agosto un mes en el que mayoritariamente todos estamos pensando en las vacaciones, de ahi que no escribiese nada técnico.</p><p>Si queries compartir algún canal que conozcas o que te guste no dudes en dejarlo en los comentarios.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Disclaimer: Este es mi primer post en castellano en bastante tiempo, el motivo es el contenido del que voy a hablar está may
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>How to run GitHub Actions in local with Act</title>
    <link href="https://sergiocarracedo.es/act-how-to-run-github-actions-in-local/"/>
    <id>https://sergiocarracedo.es/act-how-to-run-github-actions-in-local/</id>
    <published>2021-06-14T00:00:00.000Z</published>
    <updated>2021-08-09T12:47:58.854Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub Actions is a powerful tool, you can run tests, build your app, deploy it, even <a href="https://github.blog/2021-04-22-github-actions-update-helping-maintainers-combat-bad-actors/">mining bitcoins</a> <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f614.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f614.png?v8">😔</span></p><p>When you are creating an action or workflow in GitHub Actions, it is very common the needing of test it, check if all works as you need and if something is not correct, fix it, in other works as other software GitHub Actions need to be iterated.</p><p>Doing it in GitHub have disadvantages:</p><ul><li>Waste running time: even if you are using a free plan you have a 2000 minutes per month limit</li><li>Fill your repository history with “trash” commit: As the action definition is in the repo, every change is a new commit, if you are testing something that is very common to fill your repo history with the commits of every change. You can <a href="https://www.internalpointers.com/post/squash-commits-into-one-git">squash these commits</a> into one, but is an extra step</li><li>Is slow</li></ul><h1 id="ACT"><a href="#ACT" class="headerlink" title="ACT"></a>ACT</h1><p><a href="https://github.com/nektos/act">ACT</a> comes to help us, this tool allows us to run GitHub Actions on our local computer.</p><p>It creates an environment equal to GitHub provides, uses Docker images to run the actions, the environment variables and filesystem are all configured to match what GitHub provides.</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>Act is available for Linux, Windows and MacOS, the installation instructions (and dependencies) depend on your OS, I’m going to focus on Ubuntu, but you can check the <a href="https://github.com/nektos/act#installation">official docs</a> to know how to install in your OS.</p><p>In Ubuntu, you need Go 1.16+ as a dependency and run</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install github.com/nektos/act@latest</span><br></pre></td></tr></tbody></table></figure><p>Is very useful to add the Go bin path to your PATH<br>For example, if you are using <strong>zsh</strong> as shell</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"export PATH=<span class="variable">$PATH</span>;~/go/bin/"</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></tbody></table></figure><h2 id="Running-your-action"><a href="#Running-your-action" class="headerlink" title="Running your action"></a>Running your action</h2><p>Running an action on your computer is simple as go to your repo root folder and run:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">act</span><br></pre></td></tr></tbody></table></figure><p>In the first run, Act will ask you to choose the default image to run the action. The image to choose depends on your action, but I recommend you to choose, the <em>medium image</em>, because the <em>micro</em> image for example can’t install Python</p><p>If your action needs “secrets” will fail. We must set the secrets and that is easy as pass an argument to <em>act</em></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">act -s GITHUB_TOKEN=&lt;your_token&gt; -s OTHER_SECRET=&lt;value&gt;</span><br></pre></td></tr></tbody></table></figure><p>It’s important to bear in mind that GitHub always injects the <code>GITHUB_TOKEN</code> secret, but in our local environment, we must provide the value.<br>If your action needs this value (for example, after build, deploy to GHPages) you must provide it.<br>To create a token in GitHub you only need to navigate to <em>Settings &gt; Developer settings &gt; Personal access tokens</em> or just <a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a></p><h2 id="Dispatching-custom-events"><a href="#Dispatching-custom-events" class="headerlink" title="Dispatching custom events"></a>Dispatching custom events</h2><p>By default, act runs the “on: push” configured action in your workflow file, but maybe you want to run another workflow depending on other triggers, and you can, only need to pass the event name as an argument</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">act pull_request</span><br><span class="line">act workflow_dispatch</span><br><span class="line">act release</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><h2 id="Use-a-specific-workflow"><a href="#Use-a-specific-workflow" class="headerlink" title="Use a specific workflow"></a>Use a specific workflow</h2><p>Sometimes you have more than workflow files, usually, they don’t run on the same dispatcher, but anyway, you can set the workflow file to use.</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">act -W &lt;path to workflow file&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="Listing-the-actions"><a href="#Listing-the-actions" class="headerlink" title="Listing the actions"></a>Listing the actions</h2><p>Running <code>act -l</code> or <code>act release -l</code> you can list the action that will run </p><h2 id="Draw-workflow"><a href="#Draw-workflow" class="headerlink" title="Draw workflow"></a>Draw workflow</h2><p>Sometimes can be interesting to see the action’s dependency tree, using the <code>-g</code> flag you will get an exit like that</p><p><img src="/images/2021/act_01.png" alt="Graph"></p><h2 id="Run-a-specific-job"><a href="#Run-a-specific-job" class="headerlink" title="Run a specific job"></a>Run a specific job</h2><p>If you want to test a specific job into the workflow you can pass the job name using <code>-j</code> argument, for example</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">act -j deploy </span><br></pre></td></tr></tbody></table></figure><p>There are more flags. You can check the full list <a href="https://github.com/nektos/act#flags">here</a></p><h2 id="GitHub-Enterprise"><a href="#GitHub-Enterprise" class="headerlink" title="GitHub Enterprise"></a>GitHub Enterprise</h2><p>Act can login to private GitHub Enterprise servers as simple as add <code>--github-instance &lt;your-company-ghe-server&gt;</code> in the command</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p><em>Act</em> it’s a wonderful tool to run GH Action in local when you are creating or iterating it, avoiding using the real repo to test it.<br>But <em>Act is</em> something more, you can also use it as a local task runner using all the power, and the actions in the GitHub Actions marketplace to create your local task, and this task can easily move to the cloud if you need it.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;GitHub Actions is a powerful tool, you can run tests, build your app, deploy it, even &lt;a href=&quot;https://github.blog/2021-04-22-github-acti
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Simplifying the use of custom a Vue v-model</title>
    <link href="https://sergiocarracedo.es/vue-use-model-helpers/"/>
    <id>https://sergiocarracedo.es/vue-use-model-helpers/</id>
    <published>2021-05-10T00:00:00.000Z</published>
    <updated>2021-08-09T12:47:58.854Z</updated>
    
    <content type="html"><![CDATA[<p>One year ago I wrote a post about how to manage your <a href="/2019/12/05/tu-propio-v-model-en-un-componente-vue/" title="custom v-model in your component">custom v-model in your component</a> (<em>Spanish</em>).</p><p>The problem still being the same, if you try to mutate the value of the property into the component you will get this error message:</p><blockquote><p>Error message: Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop’s value.</p></blockquote><p>That is normal, because the correct way of update a property value in the parent component is <strong>emit</strong> an event, for example: <code>emit('input', newValue)</code>.</p><p>I think the most convenient way to manage this situation is to create a local copy of the property in the component and observe its changes, and then emit the event, we also must observe property changes to keep the local copy updated if the parent component changes the property value.</p><p>This requires writting repetitive code for every single property (remember that in Vue 2.x we can use the <code>.sync</code> modifier to make other properties distinct of <code>value</code> 2-way bound)</p><p>To simplify my life (and yours) I created and published in <em>npmjs</em> a package that takes advantage of <strong>Vue composition API</strong> to make the code more reusable.</p><blockquote><p>The package is <a href="https://www.npmjs.com/package/vue-use-model-helpers">vue-use-model-helpers</a></p></blockquote><h3 id="IMPORTANT"><a href="#IMPORTANT" class="headerlink" title="IMPORTANT"></a>IMPORTANT</h3><p>The package works on both <strong>Vue 2.x</strong> and <strong>Vue 3</strong>, the way of using it is the same, but you must use the correct package version.</p><p>For Vue 2.x:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-use-model-helper@2.x --save </span><br><span class="line"><span class="comment"># or </span></span><br><span class="line">yarn add vue-use-model-helper@2.x</span><br></pre></td></tr></tbody></table></figure><p>For Vue 3:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-use-model-helper@3.x --save </span><br><span class="line"><span class="comment"># or </span></span><br><span class="line">yarn add vue-use-model-helper@3.x</span><br></pre></td></tr></tbody></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>This package encapsulates the logic of creating the local property’s copy, the watchers to observe the property and the local value, and the event dispatch.</p><p>In your components must import the <code>useLocalModel</code> helper function:</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { useLocalModel } <span class="keyword">from</span> <span class="string">'vue-use-model-helpers'</span></span><br></pre></td></tr></tbody></table></figure><p>Then you must pass an array with the names of the properties you want to manage because, yes, in Vue 2.x the helper can manage <code>.sync</code>. You don’t need to take care of the event name, the helper can recognize the property type and emits the correct event. </p><p>The helper returns a copy of every property with the name <code>local + [property name capitalized]</code> as a <code>ref</code>.</p><p>You can use destructuring to get the copies: <code>const { localValue, localUsername } = useLocalModel(['value', 'username'])</code></p><p>Putting all together:</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { useLocalModel } <span class="keyword">from</span> <span class="string">'vue-use-model-helpers'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent({</span><br><span class="line">  ...</span><br><span class="line">  props: {</span><br><span class="line">    value: <span class="built_in">String</span>,</span><br><span class="line">    username: <span class="built_in">String</span></span><br><span class="line">  },</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span> {</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> { localValue, localUsername } = useLocalModel([<span class="string">'value'</span>, <span class="string">'username'</span>])</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      localValue, localUsername</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  ...</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>If, for example, you are using the <code>localValue</code> in an input in your component, every single time the user updates the input, the helper emits the event on behalf of you.</p><p>I think this helpers package simplifies the component readability and allow you to write less repetitive code.</p><p><a href="https://github.com/sergiocarracedo/vue-use-model-helpers/issues">Any comments</a> to improve the package are highly welcome!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;One year ago I wrote a post about how to manage your &lt;a href=&quot;/2019/12/05/tu-propio-v-model-en-un-componente-vue/&quot; title=&quot;custom v-model 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Tips using Typescript and Vue</title>
    <link href="https://sergiocarracedo.es/tips-using-typescript-and-vue/"/>
    <id>https://sergiocarracedo.es/tips-using-typescript-and-vue/</id>
    <published>2021-04-25T00:00:00.000Z</published>
    <updated>2021-08-09T12:47:58.854Z</updated>
    
    <content type="html"><![CDATA[<p>Typescript is a great “language”, makes it possible to create more maintainable and understandable software, but requires extra effort to type the variables, the functions’ arguments, etc…</p><p>Vue 2.x, and even more Vue 3 provide a great typescript integration, providing the necessary types to use your app, but not always are trivial, and you need to know the types you must use in every case.</p><p>I want to share with all of you the lessons I learned in my experience using Vue and TS, the typical questions, and the “problems” I found in the way.</p><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p>Typing the Vuex’s store can’t be straightforward, my first time typing the store was frustrating because I didn’t know types use.</p><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>The state is a JS object, in type you can type it as a generic <code>Record&lt;string, any&gt;</code> but this is not nice. It’s better creating and interface that define all the store items types, for example, imagine this store:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = {</span><br><span class="line">  name: <span class="string">'Sergio'</span>,</span><br><span class="line">  lastLogin: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2021</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">34</span>),</span><br><span class="line">  config: {</span><br><span class="line">    darkTheme: <span class="literal">true</span>,</span><br><span class="line">    fontSize: <span class="number">23</span></span><br><span class="line">  },</span><br><span class="line">  friends: [{ <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Juan'</span> }, { <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'Felipe'</span> }]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>We must create an interface for this object:</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Friend {</span><br><span class="line">  id: <span class="built_in">number</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">interface</span> StoreState {</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  lastLogin?: <span class="built_in">Date</span>,</span><br><span class="line">  config: {</span><br><span class="line">    darkTheme: <span class="built_in">boolean</span>;</span><br><span class="line">    fontSize: <span class="built_in">number</span>;</span><br><span class="line">  },</span><br><span class="line">  friends: Friend[]</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> store: StoreState = {</span><br><span class="line">  name: <span class="string">'Sergio'</span>,</span><br><span class="line">  lastLogin: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2021</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">34</span>),</span><br><span class="line">  config: {</span><br><span class="line">    darkTheme: <span class="literal">true</span>,</span><br><span class="line">    fontSize: <span class="number">23</span></span><br><span class="line">  },</span><br><span class="line">  friends: [{ <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Juan'</span> }, { <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'Felipe'</span> }]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Mutations"><a href="#Mutations" class="headerlink" title="Mutations"></a>Mutations</h2><p>For the mutations, Vuex provides the type <code>MutationTree&lt;S&gt;</code>, defined as:</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> MutationTree&lt;S&gt; {</span><br><span class="line">    [key: <span class="built_in">string</span>]: Mutation&lt;S&gt;;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">type</span> Mutation&lt;S&gt; = <span class="function">(<span class="params">state: S, payload?: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">any</span>;</span><br></pre></td></tr></tbody></table></figure><p>Basically is a map of mutation functions, as you can see, a mutation function get the state type, but the payload can be anything and return anything</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mutations: MutationTree&lt;StoreState&gt; = {</span><br><span class="line">    setName (store, <span class="attr">payload</span>: <span class="built_in">string</span>) {</span><br><span class="line">        store.name = payload</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>As the payload is defined by the type as <code>any</code> it’s a good practice type your payload in every mutation function</p></blockquote><h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h2><p>It’s similar to the mutations, but with a peculiarity:</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ActionTree&lt;S, R&gt; {</span><br><span class="line">    [key: <span class="built_in">string</span>]: Mutation&lt;S, R&gt;;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">type</span> Action&lt;S, R&gt; = ActionHandler&lt;S, R&gt; | ActionObject&lt;S, R&gt;;</span><br></pre></td></tr></tbody></table></figure><p>Without going deeper, the <code>S</code> is the state of the vuex module, and <code>R</code> is the <strong>Root State</strong>. In a simple case (without using vuex modules) <code>S</code> and <code>R</code> are the same.</p><h2 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h2><p>Same as actions, </p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> GetterTree&lt;S, R&gt; {</span><br><span class="line">    [key: <span class="built_in">string</span>]: Getter&lt;S, R&gt;;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>For example:</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getters: GetterTree&lt;StoreState, StoreState&gt; = {</span><br><span class="line">    friendCount(store): <span class="built_in">number</span> {</span><br><span class="line">      <span class="keyword">return</span> store.friends.length</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>As in the store payload params, it’s a good practice to type getter return</p></blockquote><h1 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h1><p>If you are using composition API in the setup function we can type our properties as we did in the store. Make sure you are using <code>defineComponent</code> instead <code>Vue.extend</code> to make it work</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Props {</span><br><span class="line">    value: <span class="built_in">boolean</span>,</span><br><span class="line">    title: <span class="built_in">string</span>    </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent({</span><br><span class="line">    name: <span class="string">'my-component'</span>,</span><br><span class="line">    props: {</span><br><span class="line">        value: <span class="built_in">Boolean</span>,</span><br><span class="line">        title: <span class="built_in">String</span>        </span><br><span class="line">    },</span><br><span class="line">    setup (props: Props) {</span><br><span class="line">     ...</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>You can also type the properties directly in the <code>props</code> entry, but as <strong>typescript interfaces don’t exist at runtime</strong> we can’t use the interface directly as the property type</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Doesn't work because Friend doesn't exists in the runtime</span></span><br><span class="line">{</span><br><span class="line">  props: {</span><br><span class="line">    friend: {</span><br><span class="line">      <span class="keyword">type</span>: Friend</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// Doesn't work because Object doesn't implement Friend properties</span></span><br><span class="line">{</span><br><span class="line">  props: {</span><br><span class="line">    friend: {</span><br><span class="line">      <span class="keyword">type</span>: <span class="built_in">Object</span> <span class="keyword">as</span> Friend</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>But, we can pass the type as return of a function, then Vue instance the interface instances the interface and can check the value type</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Works</span></span><br><span class="line">{</span><br><span class="line">  props: {</span><br><span class="line">    friend: <span class="built_in">Object</span> <span class="keyword">as</span> () =&gt; Friend,</span><br><span class="line">    friends: <span class="built_in">Array</span> <span class="keyword">as</span> () =&gt; Friend[],</span><br><span class="line">    name: <span class="built_in">String</span> <span class="keyword">as</span> () =&gt; <span class="built_in">string</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://frontendsociety.com/using-a-typescript-interfaces-and-types-as-a-prop-type-in-vuejs-508ab3f83480">Read more about that</a></p><p>Remember to type “native” types because <code>String</code> is not the same as <code>string</code> (<code>String</code> is an object and string is a type) <a href="https://stackoverflow.com/a/14727461">More info about this in Stackoverflow</a></p><h1 id="Add-extra-properties-to-Vue-Component-Object"><a href="#Add-extra-properties-to-Vue-Component-Object" class="headerlink" title="Add extra properties to Vue Component Object"></a>Add extra properties to Vue Component Object</h1><p>By default, Vue provides us a defined structure for the Vue Component Object, for example, the property <code>data</code>, <code>props</code>, etc… Using vanilla JS we can add a new property to the Vue Component Object without doing extra works, for example, we want to add a property called <code>layout</code> that makes our root component can use different layouts in our view. </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    name: <span class="string">'my-component'</span>,</span><br><span class="line">    layout: <span class="string">'2-cols'</span> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>If we try to do this using typescript we will get an error because the property <code>layout</code> wasn’t defined in the Vue Component Object. To fix it we must extend the definition creating a definition file in our <code>src/</code>, for example, <code>src/typings.d.ts</code></p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># src/typings.d.ts</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">'vue/types/options'</span> {</span><br><span class="line">  <span class="keyword">interface</span> ComponentOptions&lt;V <span class="keyword">extends</span> Vue&gt; {</span><br><span class="line">    layout?: <span class="built_in">string</span>;    </span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Add-extra-properties-to-the-Vue-Instance"><a href="#Add-extra-properties-to-the-Vue-Instance" class="headerlink" title="Add extra properties to the Vue Instance"></a>Add extra properties to the Vue Instance</h1><p>As in the previous chapter, we could want to add a new property to the Vue Instance, for example, to add a global functionality like a toast, etc: <code>vm.$toast.open()</code></p><p>Remember you can do it doing something like this, for example, during the plugin installation:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$toast = {</span><br><span class="line">    open: <span class="function">() =&gt;</span> {</span><br><span class="line">        ....</span><br><span class="line">    }</span><br><span class="line">} <span class="keyword">as</span> ToastHandler</span><br></pre></td></tr></tbody></table></figure><p>Then we must add to our <em>definition</em> file these lines to declare the new Vue instance properties and their types</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># src/typings.d.ts</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">'vue/types/vue'</span> {</span><br><span class="line">  <span class="keyword">interface</span> Vue {</span><br><span class="line">    $toast: ToastHandler;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Typescript can be tough at the beginning, but gives you more confidence in your code and make it more readable, for example</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    props: {</span><br><span class="line">        friend: <span class="built_in">Object</span> <span class="keyword">as</span> () =&gt; Friend,</span><br><span class="line">        person: <span class="built_in">Object</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>For example in the case of <code>friend</code> you only need to go to the type declarations to know the ‘friend<code>structure and properties, even your IDE can provide you autocomplete, but for</code>person` is very hard to know the object structure. I hope this post can help you using Typescript and Vue.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Typescript is a great “language”, makes it possible to create more maintainable and understandable software, but requires extra effort to
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Understanding d3.js - A simple line chart</title>
    <link href="https://sergiocarracedo.es/understanding-d3-js-introduction/"/>
    <id>https://sergiocarracedo.es/understanding-d3-js-introduction/</id>
    <published>2021-04-19T00:00:00.000Z</published>
    <updated>2021-08-09T12:47:58.854Z</updated>
    
    <content type="html"><![CDATA[<p>Before starting is important to say that <strong>d3.js is not a chart library is a library for making charts</strong>, if you are expecting to pass the data to the library and set 4, 5,… 10 params and get the chart to render, d3.js is not your library.</p><p><a href="https://d3js.org/">d3.js</a> is more than that, is a very flexible library to manage data (data-driven documents) and create the representation of that data (not only charts). <strong>d3.js</strong> provides you the different pieces to create your customized data visualizations (for example charts)</p><p>Let’s start creating a simple line chart:</p><p><img src="/images/2021/d3.js/line-chart.png" alt=""></p><h1 id="Scales-domain-and-range"><a href="#Scales-domain-and-range" class="headerlink" title="Scales, domain, and range"></a>Scales, domain, and range</h1><p>Simplifying, there are two pieces in the chart: Axis and line. Let’s talk about the axis.<br>In the example the chart we have two axes: X and Y, but we can have more or less, depending on the chart type.</p><p>Axis is one of the reference lines of a coordinate system, every single point represents a value in the coordinate system and also a position in the canvas which is displaying the chart.</p><p>In our example, in the y-axis the ‘1’ value of the chart is drawn in the position 31px from the axis start, but in SVG or canvas the origin of the coordinate system start on the top left corner, and ‘y’ grows in the direction to monitor bottom. Then to print the 1 value in our chart we must use 319 - 31 (288) as y position.<br><img src="/images/2021/d3.js/line-chart-axis.png" alt=""></p><p>That’s complicated, and can be even more, if the relation between screen coordinates and chart coordinates aren’t lineal, for example, a logarithmic chart.</p><p><strong>d3.js</strong> brings us a component to help us to abstract the conversion between screen coordinates and chart coordinates:</p><h2 id="d3-scale"><a href="#d3-scale" class="headerlink" title="d3-scale"></a>d3-scale</h2><p><a href="https://github.com/d3/d3-scale"><strong>d3-scale</strong></a> is our component.<br>There are a lot of different types of scales: Continuous (Linear, Power, log, identity, time, radial), Sequential, Ordinal, etc…  For our example chart, we will use Linear.</p><p>Before continuing with <em>scale</em> I’m going to introduce 2 important concepts: <strong>domain</strong> and <strong>range</strong></p><p><strong>Domain</strong> is the complete set of values chart can use, in our case is all the values between 0 and 10</p><p><strong>Range</strong> is the coordinates (in the screen) where the chart can draw, in this case from 0 to 319</p><p>Putting all together: </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xScale = d3.scaleLinear().domain([<span class="number">0</span>, <span class="number">10</span>]).range([<span class="number">319</span>, <span class="number">0</span>]) </span><br></pre></td></tr></tbody></table></figure><blockquote><p>Note the range is between <code>319</code> and <code>0</code> not between <code>0</code> and <code>319</code></p></blockquote><p>This returns a function that links the values in the chart (domain), and the values in the ‘canvas’ (range)</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xScale(<span class="number">0</span>) <span class="comment">// 319</span></span><br><span class="line">xScale(<span class="number">5</span>) <span class="comment">// 159.5</span></span><br><span class="line">xScale(<span class="number">10</span>) <span class="comment">// 0</span></span><br></pre></td></tr></tbody></table></figure><p>Scale also provides some methods for do extra actions, for example, if you want to get the value in the chart from the ‘canvas’ coordinates (the typical use case is getting the chart value in the mouse position) we can use</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xScale.invert(<span class="number">159.5</span>) <span class="comment">// 5</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>Probably you are thinking the same as me the first time I see that: It’s a function that has methods? WTF!. If you want you can go farther but in swallow, if the function has arguments returns the ‘main’ value, if not returns an object of functions.</p></blockquote><p>We can do the same for the y-axis:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> yScale = d3.scaleLinear().domain([<span class="number">0</span>, <span class="number">20</span>]).range([<span class="number">0</span>, <span class="number">700</span>]) </span><br></pre></td></tr></tbody></table></figure><p>Ok, we have all the tools to manage the data and the canvas, now we must render the data and the axis</p><h1 id="Rendering-the-chart"><a href="#Rendering-the-chart" class="headerlink" title="Rendering the chart"></a>Rendering the chart</h1><p><strong>d3.js</strong> can render charts in <strong>SVG</strong> and <strong>Canvas</strong> but we will focus on the SVG rendering because is fast enough for most charts and makes easy interaction and styling.<br>To render our line chart, first, we must prepare our placeholder.</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'chart'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>For our comfort I’m going to define the chart margins and the width and height. The margins are necessary to render the axis, because the size of the chart refers to the draw area. </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> margin = { <span class="attr">top</span>: <span class="number">10</span>, <span class="attr">right</span>: <span class="number">10</span>, <span class="attr">bottom</span>: <span class="number">50</span>, <span class="attr">left</span>: <span class="number">50</span> }</span><br><span class="line"><span class="keyword">const</span> width = <span class="number">1280</span> - margin.left - margin.right</span><br><span class="line"><span class="keyword">const</span> height = <span class="number">420</span> - margin.top - margin.bottom</span><br><span class="line"><span class="keyword">const</span> n = <span class="number">20</span> <span class="comment">// Number of points in x axis</span></span><br><span class="line"><span class="keyword">const</span> maxY = <span class="number">10</span> <span class="comment">// Max y value</span></span><br></pre></td></tr></tbody></table></figure><p>Now we will use <em>d3</em> to add our SVG chart</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> svg = d3</span><br><span class="line">    .select(<span class="string">'.chart'</span>)</span><br><span class="line">    .append(<span class="string">'svg'</span>)</span><br><span class="line">    .attr(<span class="string">'width'</span>, width + margin.left + margin.right)</span><br><span class="line">    .attr(<span class="string">'height'</span>, height + margin.top + margin.bottom)</span><br></pre></td></tr></tbody></table></figure><p>Line by line:</p><ul><li><code>.select('.chart')</code> selects the DOM element previously we defined</li><li><code>.append('svg')</code> appends a <code>&lt;svg&gt;</code> element to the <code>&lt;div class='chart'&gt;</code></li><li><code>.attr('width', width + margin.left + margin.right)</code> adds an <code>width</code> attribute to the <code>&lt;svg&gt;</code> element</li><li><code>.attr('height', height + margin.top + margin.bottom)</code> adds an <code>hight</code> attribute to the <code>&lt;svg&gt;</code> element</li></ul><p>We defined the scales above, but we will do it again, now using our variables to make the chart more reusable</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xScale = d3.scaleLinear().domain([<span class="number">0</span>, n - <span class="number">1</span>]).range([<span class="number">0</span>, width])</span><br><span class="line"><span class="keyword">const</span> yScale = d3.scaleLinear().domain([<span class="number">0</span>, maxY]).range([height, <span class="number">0</span>])</span><br></pre></td></tr></tbody></table></figure><h3 id="Rendering-the-x-axis"><a href="#Rendering-the-x-axis" class="headerlink" title="Rendering the x-axis"></a>Rendering the x-axis</h3><p>To render the X axis we will create a new SVG group that holds the axis</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">svg</span><br><span class="line">.append(<span class="string">'g'</span>)</span><br><span class="line">.attr(<span class="string">'class'</span>, <span class="string">'x axis'</span>)</span><br><span class="line">.attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + margin.left + <span class="string">','</span> + (height + margin.top) + <span class="string">')'</span>)</span><br><span class="line">.call(d3.axisBottom(xScale))</span><br></pre></td></tr></tbody></table></figure><p>Line by line:</p><ul><li><code>.append('g')</code> appends the new group for the axis</li><li><code>.attr('class', 'axis x-axis')</code> adds 2 classes to the group (this allows us to style it using CSS)</li><li><code>.attr('transform', 'translate(' + margin.left + ',' + height + ')')</code> moves the axis group bellow the chart draw area and gives space</li><li><code>.call(d3.axisBottom(xScale))</code> call the <code>d3.axisBottom</code> function. This function is in charge of rendering the axis, the <em>axisBottom</em> means that the ticks of the axis will be rendered bellow the axis line. There are 3 more functions: <code>d3.axisTop</code>, <code>d3.axisLeft</code>, <code>d3.axisRight</code> to render the axis in different orientations.</li></ul><blockquote><p>About the <a href="https://github.com/d3/d3-selection/blob/v2.0.0/README.md#selection_call"><code>call</code></a> method: This method call the function passed as argument and uses as first argument for the function of the selected element. In this case is the same as execute: <code>d3.axisBottom(xScale)(svg.select('.xaxis'))</code> (Remember that d3.axisBottom returns a function). The advantage of using <code>call</code> is you can concatenate methods because call returns the selection, not the result of the function</p></blockquote><p>After that we can see our x-axis <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8">🎉</span></p><h3 id="Rendering-the-y-axis"><a href="#Rendering-the-y-axis" class="headerlink" title="Rendering the y-axis"></a>Rendering the y-axis</h3><p>Rendering the Y axis is almost the same as X axis:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">svg</span><br><span class="line">  .append(<span class="string">'g'</span>)</span><br><span class="line">  .attr(<span class="string">'class'</span>, <span class="string">'y axis'</span>)</span><br><span class="line">  .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + margin.left + <span class="string">','</span> + margin.top + <span class="string">')'</span>)</span><br><span class="line">  .call(d3.axisLeft(yScale))</span><br></pre></td></tr></tbody></table></figure><h2 id="Rendering-the-line"><a href="#Rendering-the-line" class="headerlink" title="Rendering the line"></a>Rendering the line</h2><p>Before do the chart rendering we need the data, in this case, we will use random values</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dataset = d3.range(n).map(<span class="function">(<span class="params">d</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> { <span class="attr">x</span>: d, <span class="attr">y</span>: d3.randomUniform(yMax)() }</span><br><span class="line">})</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">  { x: 0, y: 2.679771859053788 },</span></span><br><span class="line"><span class="comment">  { x: 1, y: 5.447777017888336 },</span></span><br><span class="line"><span class="comment">  ...</span></span><br><span class="line"><span class="comment">  { x: 19, y: 0.083980807899251 }</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>Now we will create the line generator that is a function that returns a </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> line = d3</span><br><span class="line">  .line()</span><br><span class="line">  .x(<span class="function">(<span class="params">d</span>) =&gt;</span> xScale(d.x))</span><br><span class="line">  .y(<span class="function">(<span class="params">d</span>) =&gt;</span> yScale(d.y))</span><br></pre></td></tr></tbody></table></figure><p>Line by line:</p><ul><li><code>.line()</code> is the basic line generator</li><li><code>.x((d) =&gt; xScale(d.x))</code> function that for every point in data set returns the x position in the draw area, this is the reason why we are using the scale function. <em>d</em> represent every dataset point</li><li><code>.y((d) =&gt; xScale(d.y)</code> same as previous line but referred to y-axis</li></ul><p>We can also add an extra call to the line generator to configure the interpolation behavior, for example: <code>.curve(d3.curveMonotoneX)</code> that makes the curve softer. But for now, a simple interpolation (linear) is enough.</p><p>Ok, now we have the line generator, and it’s time to draw the line in our chart.</p><p>First, we add a SVG group for the line we will draw </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lineWrapper = svg</span><br><span class="line">  .append(<span class="string">'g'</span>)</span><br><span class="line">  .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + margin.left + <span class="string">','</span> + margin.top + <span class="string">')'</span>);</span><br></pre></td></tr></tbody></table></figure><p>Line by line:</p><ul><li><code>.append('g')</code> appends a SVG group element (<code>g</code>) to the <code>svg</code> element. This group will contain the chart draw area</li><li><code>.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')</code> set the transform attribute to move the group, this makes easy managing the draw, because we don’t need to take care of the real position, for the draw area the coordinate system starts on (0, 0)</li></ul><p>And the render the line</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lineWrapper</span><br><span class="line">  .append(<span class="string">'path'</span>)</span><br><span class="line">  .datum(dataset)</span><br><span class="line">  .attr(<span class="string">'class'</span>, <span class="string">'line'</span>)</span><br><span class="line">  .attr(<span class="string">'d'</span>, line)</span><br></pre></td></tr></tbody></table></figure><p>Line by line:</p><ul><li><code>.append('path')</code> appends a path element (to draw the line)</li><li><code>.datum(dataset)</code> assigns the dataset to the path element (we will use it in the next lines)</li><li><code>.attr('class', 'line')</code> add the class <code>line</code> to the path element to make asy the css styling</li><li><code>.attr('d', line)</code> add the <code>d</code> attribute, to generate it class to the line generator passing the element, and the <code>datum</code></li></ul><blockquote><p>We used <code>datum</code> because data is static, but d3 provides other methods to link dynamic data to the dom elements, but I will talk about that in the future</p></blockquote><p>And this is all for the moment. <em>d3</em> is a powerful tool but needs you to know some concepts before starting to create charts. The example we did in this post is very, very simple but I think is a good starting point.</p><p>My idea is to write more post about <em>d3</em> going deeper into the current concept and how to configure and customize the current components (for example configure the axis, the labels, etc) </p><iframe src="https://codesandbox.io/embed/sharp-water-bmk3t?fontsize=14&amp;hidenavigation=1&amp;theme=dark&amp;view=preview" width="100%" height="400px" frameborder="0" loading="lazy" allowfullscreen=""></iframe><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Before starting is important to say that &lt;strong&gt;d3.js is not a chart library is a library for making charts&lt;/strong&gt;, if you are expecti
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Custom SVG icon set management with Vue</title>
    <link href="https://sergiocarracedo.es/custom-svg-icon-set-management-with-vue/"/>
    <id>https://sergiocarracedo.es/custom-svg-icon-set-management-with-vue/</id>
    <published>2021-04-01T00:00:00.000Z</published>
    <updated>2021-08-09T12:47:58.854Z</updated>
    
    <content type="html"><![CDATA[<p>Manage an icon set can seem a simple task but can be tricky.</p><p>First, there a lot of ways to use an icon on a web page, all with pros and contras:</p><p>Let’s use this SVG image created by <a href="https://freeicons.io/profile/730">Anu Rocks</a> for all examples.</p><p><strong>We will assume our icon set is monochrome.</strong></p><div style="background: #fff; display: block; padding: 10px; width: 25px; height: 25px; margin: auto;"><p><a href="https://freeicons.io/common-ui-icons/battery-medium-icon-54110"><img src="/images/2021/svg-iconset/example.svg" alt=""></a></p></div><h2 id="lt-img-gt-tag"><a href="#lt-img-gt-tag" class="headerlink" title="<img> tag"></a>&lt;img&gt; tag</h2><p>The simplest way of adding an icon is using the <code>&lt;img&gt;</code> tag as the other images.</p><p>Example: <code>&lt;img src="/i/example.svg" alt="Battery"&gt;</code></p><blockquote><p>You can also use the tag <code>&lt;object&gt;</code> with same result: <code>&lt;object type="image/svg+xml" data="/i/example.svg"&gt;&lt;/object&gt;</code></p></blockquote><h4 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages:"></a>Advantages:</h4><ul><li>Simple method</li><li>Image can be cached by the browser: if you use in multiple places, only need to download once</li><li>Good usability using the <code>alt</code> attribute</li></ul><h4 id="Disadvantages"><a href="#Disadvantages" class="headerlink" title="Disadvantages:"></a>Disadvantages:</h4><ul><li>Lost all SVG styling by CSS (Still using style over the image tag, but for example, you can’t change the color of the stroke or )</li><li>Lost all the possibilities of the SVG’s DOM manipulation</li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>Another way to insert an icon on your page is creating an HTML placeholder and use the image as a background</p><p>HTML:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lorem ipsum dolor <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon icon-battery"</span> <span class="attr">aria-label</span>=<span class="string">"Battery"</span> <span class="attr">title</span>=<span class="string">"Battery"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> 50%</span><br></pre></td></tr></tbody></table></figure><p>CSS:</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.icon</span> {</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: .<span class="number">5em</span>; </span><br><span class="line">    <span class="attribute">height</span>: .<span class="number">5em</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.icon-battery</span> {</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">/i/example.svg</span>) no-repeat center center;</span><br><span class="line">    <span class="attribute">background-size</span>: contain;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>Note the use of <code>.5em</code> as width and height to create a container width a size relative to container font size, <code>.5em</code> is better than 1em, because 1em uses the full size, but you can play with the value.</p></blockquote><p>This method is very similar to the previous one in terms of advantages and disadvantages.<br>You can also insert text into the <code>span</code> tag and  </p><h2 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h2><p>This method requires some extra work to convert SVG to font. It could be done <a href="https://glyphter.com/">online</a>: </p><p>Once we have the icons as font, we must import the font</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> {</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'My icon set font'</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">font-display</span>: auto;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"../webfonts/my-icon-set.eot"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>To use the icons we can use the glyph associated with an icon, for example, our battery icon can be the <code>A</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lorem ipsum dolor <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"font-family: 'My icon set font'"</span> <span class="attr">aria-label</span>=<span class="string">"Battery"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 50%</span><br></pre></td></tr></tbody></table></figure><p>There is another way: use the <code>:before</code> pseudo selector and the <code>content</code> property in your CSS to insert the font glyph</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.icon</span> {</span><br><span class="line"> <span class="attribute">font-family</span>: <span class="string">'My icon set font'</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.icon-batery</span>:before {</span><br><span class="line"> content: <span class="string">'A'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lorem ipsum dolor <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon icon-battery"</span>  <span class="attr">aria-label</span>=<span class="string">"Battery"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 50%</span><br></pre></td></tr></tbody></table></figure><h4 id="Advantages-1"><a href="#Advantages-1" class="headerlink" title="Advantages"></a>Advantages</h4><ul><li>It’s very easy changing the icon color, the icon inherits the context color</li><li>Font can be cached</li></ul><h4 id="Disadvantages-1"><a href="#Disadvantages-1" class="headerlink" title="Disadvantages"></a>Disadvantages</h4><ul><li>Requires extra work to convert the icons to fonts</li><li>Add a new icon requires to update the font</li><li>No tree-shaking, unused icons still there</li><li>Is confusing for screen readers, because we are inserting text</li><li>Sometimes align with the regular text fonts isn’t good</li></ul><blockquote><p>Note that is possible define a font using just SVG, but this method is not fully supported by commonly used browsers: <a href="https://caniuse.com/svg-fonts">https://caniuse.com/svg-fonts</a> </p></blockquote><h2 id="Inline-SVG"><a href="#Inline-SVG" class="headerlink" title="Inline SVG"></a>Inline SVG</h2><p>This is my favorite method in most cases. The method consists in inserting the SVG markup in your HTML.</p><p>In our example</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Lorem ipsum dolor  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">width</span>=<span class="string">"24"</span> <span class="attr">height</span>=<span class="string">"24"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 24 24"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">"evenodd"</span> <span class="attr">d</span>=<span class="string">"M17,5 C18.5976809,5 19.9036609,6.24891996 19.9949073,7.82372721 L20,8 L20,8.17 L20.1933113,8.24671351 C21.1458614,8.66012858 21.8418803,9.55339202 21.9763495,10.6214854 L21.9949073,10.8237272 L22,11 L22,13 C22,14.2181391 21.2716631,15.274045 20.201161,15.7433631 L20,15.822 L20,16 C20,17.5385075 18.8418794,18.8065215 17.3498634,18.9798168 L17.1762728,18.9949073 L17,19 L5,19 C3.40231912,19 2.09633912,17.75108 2.00509269,16.1762728 L2,16 L2,8 C2,6.40231912 3.24891996,5.09633912 4.82372721,5.00509269 L5,5 L17,5 Z M17,7 L5,7 C4.48716416,7 4.06449284,7.38604019 4.00672773,7.88337887 L4,8 L4,16 C4,16.5128358 4.38604019,16.9355072 4.88337887,16.9932723 L5,17 L17,17 C17.5128358,17 17.9355072,16.6139598 17.9932723,16.1166211 L18,16 L18,15 C18,14.5004355 18.3670085,14.0840077 18.8498945,14.0112465 L18.9632725,14.0006747 L19.075685,13.9972247 C19.5546159,13.9618905 19.9369487,13.5888432 19.9929352,13.1192658 L20,13 L20,11 C20,10.4871642 19.6139598,10.0644928 19.1166211,10.0067277 L18.8833789,9.99327227 C18.424297,9.93995063 18.0600494,9.57570299 18.0067277,9.11662113 L18,9 L18,8 C18,7.48716416 17.6139598,7.06449284 17.1166211,7.00672773 L17,7 Z M11,9 C11.5522847,9 12,9.44771525 12,10 L12,14 C12,14.5522847 11.5522847,15 11,15 L7,15 C6.44771525,15 6,14.5522847 6,14 L6,10 C6,9.44771525 6.44771525,9 7,9 L11,9 Z"</span> <span class="attr">fill</span>=<span class="string">"currentColor"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span> 50%</span><br></pre></td></tr></tbody></table></figure><blockquote><p>Note the use of <code>currentColor</code> for the fill attribute to inherit the fill color from the CSS context (color)</p></blockquote><h4 id="Advantages-2"><a href="#Advantages-2" class="headerlink" title="Advantages"></a>Advantages</h4><ul><li>It’s very easy changing the icon color, the icon inherits the context color</li><li>Even, if your icon is not monochrome you can change the color of every single path.</li><li>Can manipulate SVG elements independently</li><li>Icons can be animated (not only a doing a transform of the full icon, but you can also manipulate every path independently)</li><li></li></ul><h4 id="Disadvantages-2"><a href="#Disadvantages-2" class="headerlink" title="Disadvantages"></a>Disadvantages</h4><ul><li>Non-cachable. If the icons appear in several places you must insert the full code.</li><li>In static sites adds a lot of “bytes” to the HTML.</li><li>A change in your icon, require to find and replace on all icon occurrences.</li></ul><h2 id="Encapsulated-inline-SVG"><a href="#Encapsulated-inline-SVG" class="headerlink" title="Encapsulated inline SVG"></a>Encapsulated inline SVG</h2><p>We can improve the previous method using Vue (or another framework: React, Angular, etc, or just using web components). The idea is encapsulated every single icon in a Vue component:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">:width</span>=<span class="string">"size"</span> <span class="attr">:height</span>=<span class="string">"size"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 24 24"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">"evenodd"</span> <span class="attr">d</span>=<span class="string">"M17,5 C18.5976809,5 19.9036609,6.24891996 19.9949073,7.82372721 L20,8 L20,8.17 L20.1933113,8.24671351 C21.1458614,8.66012858 21.8418803,9.55339202 21.9763495,10.6214854 L21.9949073,10.8237272 L22,11 L22,13 C22,14.2181391 21.2716631,15.274045 20.201161,15.7433631 L20,15.822 L20,16 C20,17.5385075 18.8418794,18.8065215 17.3498634,18.9798168 L17.1762728,18.9949073 L17,19 L5,19 C3.40231912,19 2.09633912,17.75108 2.00509269,16.1762728 L2,16 L2,8 C2,6.40231912 3.24891996,5.09633912 4.82372721,5.00509269 L5,5 L17,5 Z M17,7 L5,7 C4.48716416,7 4.06449284,7.38604019 4.00672773,7.88337887 L4,8 L4,16 C4,16.5128358 4.38604019,16.9355072 4.88337887,16.9932723 L5,17 L17,17 C17.5128358,17 17.9355072,16.6139598 17.9932723,16.1166211 L18,16 L18,15 C18,14.5004355 18.3670085,14.0840077 18.8498945,14.0112465 L18.9632725,14.0006747 L19.075685,13.9972247 C19.5546159,13.9618905 19.9369487,13.5888432 19.9929352,13.1192658 L20,13 L20,11 C20,10.4871642 19.6139598,10.0644928 19.1166211,10.0067277 L18.8833789,9.99327227 C18.424297,9.93995063 18.0600494,9.57570299 18.0067277,9.11662113 L18,9 L18,8 C18,7.48716416 17.6139598,7.06449284 17.1166211,7.00672773 L17,7 Z M11,9 C11.5522847,9 12,9.44771525 12,10 L12,14 C12,14.5522847 11.5522847,15 11,15 L7,15 C6.44771525,15 6,14.5522847 6,14 L6,10 C6,9.44771525 6.44771525,9 7,9 L11,9 Z"</span> <span class="attr">fill</span>=<span class="string">"currentColor"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'battery-icon'</span>,</span></span><br><span class="line">  props: {</span><br><span class="line"><span class="javascript">    size: [<span class="built_in">String</span>, <span class="built_in">Number</span>]</span></span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>I added the <code>size</code> property to make the icon resizable without need CSS, and as you know icon aspect ratio you only need one dimension.<br>If the icon aspect ratio weren’t 1:1, you only need to do the math in the component:</p><p>For example a icon with a 16:10 aspect ratio (Using height as the base dimension):</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns="http://www.w3.org/2000/svg" :width="size * 15 / 24" :height="size" viewBox="0 0 24 15"&gt;</span><br></pre></td></tr></tbody></table></figure><p>You must create a component for every icon, and insert in your page is simple, just insert the component</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lorem ipsum dolor <span class="tag">&lt;<span class="name">battery-icon</span> <span class="attr">size</span>=<span class="string">"11"</span>&gt;</span> 50%</span><br></pre></td></tr></tbody></table></figure><p>With this method, you can encapsulate the icon markup, and his logic (for example you can add a property to set the color of the bar in the battery icon, or even the bar size, creating a dynamic icon)</p><p>If your page is not an SSR page you skip the cache disadvantage because your icon markup is not repeated in your code (but it’s in the browser memory)</p><p>Also, the disadvantage of replacing all the occurrences is fixed with this method.</p><p>Using this method, unused icons don’t are bundled in the build because your bundler (for example <em>webpack</em>) do the threeshaking before build.</p><p>One nice example of project using this method is <a href="https://www.npmjs.com/package/vue-material-design-icons">https://www.npmjs.com/package/vue-material-design-icons</a>, a Vue wrapper for the great project <a href="https://materialdesignicons.com/">https://materialdesignicons.com/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Manage an icon set can seem a simple task but can be tricky.&lt;/p&gt;
&lt;p&gt;First, there a lot of ways to use an icon on a web page, all with pro
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Deploying a static website in Azure Static Web Apps</title>
    <link href="https://sergiocarracedo.es/azure-static-web-apps/"/>
    <id>https://sergiocarracedo.es/azure-static-web-apps/</id>
    <published>2021-01-20T00:00:00.000Z</published>
    <updated>2021-08-09T12:47:58.854Z</updated>
    
    <content type="html"><![CDATA[<p>Nowadays <a href="https://jamstack.org/">JAMStack</a> is trendy because a lot of reasons: performance, security, decoupling, etc.</p><p>JAMStack consists of pre-rendering your website or application’s frontend and get the dynamic data from an API.</p><p>Your pre-rendered markup can be host in a server, but as it is static, your host only needs to serve static files, just HTML, CSS, and JS. You don’t need to run any code on the server.</p><p>There are a lot of different options to deploy a static website, for example:</p><ul><li><a href="https://pages.github.com/">Github Pages</a></li><li><a href="https://www.netlify.com/">Netlify</a></li><li><a href="https://vercel.com/">Vercel</a></li><li>etc.</li></ul><p>In this post I will talk about <a href="https://azure.microsoft.com/en-us/services/app-service/static/">Azure Static Web Apps</a>, this is a service to host your static (and lambda functions)</p><p>At the moment of writing this post, it’s in a preview, and it’s free.</p><p>How to deploy your app, for example, a Vue app.</p><ol><li><p>Go to <a href="https://portal.azure.com/">https://portal.azure.com/</a> and create a new account if you haven’t one yet.</p></li><li><p>Into the resource group click in <em>+ Create resource</em></p></li><li><p>Choose <strong>Static Web App (preview)</strong></p></li><li><p>You must select the subscription, the Resource group to assign this resource, the name of your app (to find it later in the Azure panel), the region where you want to serve the static files (choose one near your clients or users)</p></li><li><p>You need to link with your Github account and choose the repo (and the branch) to deploy.</p></li><li><p>Azure will create behalf you a Github Action to build your website and deploy it to SWA.</p></li></ol><p>Something like this</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Azure</span> <span class="string">Static</span> <span class="string">Web</span> <span class="string">Apps</span> <span class="string">CI/CD</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span>  <span class="comment"># This action will run on push to main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build_and_deploy_job:</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.event_name</span> <span class="string">==</span> <span class="string">'push'</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Deploy</span> <span class="string">Job</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">submodules:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">And</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">builddeploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">Azure/static-web-apps-deploy@v0.0.1-preview</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">azure_static_web_apps_api_token:</span> <span class="string">${{</span> <span class="string">secrets.AZURE_STATIC_WEB_APPS_API_TOKEN</span> <span class="string">}}</span></span><br><span class="line">          <span class="attr">repo_token:</span> <span class="string">${{</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">}}</span> <span class="comment"># Used for Github integrations (i.e. PR comments)</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">"upload"</span></span><br><span class="line">          <span class="attr">app_location:</span> <span class="string">"/"</span> <span class="comment"># Path to your app in the web server</span></span><br><span class="line">          <span class="attr">api_location:</span> <span class="string">"api"</span> <span class="comment"># Api source code path - optional</span></span><br><span class="line">          <span class="attr">output_location:</span> <span class="string">"dist"</span>           </span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">VUE_APP_MY_VARIABLE:</span> <span class="string">value</span></span><br><span class="line">          <span class="comment"># Environment variables needed to build your app</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>For more information about the actions you can read the official documentation: <a href="https://docs.microsoft.com/en-us/azure/static-web-apps/github-actions-workflow">https://docs.microsoft.com/en-us/azure/static-web-apps/github-actions-workflow</a></p><p>After doing this the Github action will run after every push to <code>master</code>, build the app, and deploy to azure.</p><blockquote><p>Azure provides you an url to access your website, like *.azurewebsites.net, you can also add your custom domain.</p></blockquote><h1 id="Configuring-routes"><a href="#Configuring-routes" class="headerlink" title="Configuring routes"></a>Configuring routes</h1><p>If you need to configure the routes, for example securing a route to allow only access to your company users, add a fallback route, or create a redirect you need to create a file named <code>routes.json</code> which is in the root directory after the build, in Vue you must store this in the <code>static</code> folder. </p><p>For example, this file forces users to must authenticated to access to any route and if the page requested is not found redirects to <code>200.html</code></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"routes"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"route"</span>: <span class="string">"/*"</span>,</span><br><span class="line">      <span class="attr">"allowedRoles"</span>: [<span class="string">"authenticated"</span>]</span><br><span class="line">    }</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"platformErrorOverrides"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"errorType"</span>: <span class="string">"NotFound"</span>,</span><br><span class="line">      <span class="attr">"serve"</span>: <span class="string">"/200.html"</span>,</span><br><span class="line">      <span class="attr">"statusCode"</span>: <span class="number">200</span></span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure><p>Mor info about routes.json <a href="https://docs.microsoft.com/en-us/azure/static-web-apps/routes">https://docs.microsoft.com/en-us/azure/static-web-apps/routes</a></p><p>I didn’t mention you can use <em>lambdas</em> to run server-side code (it is not free), but maybe I will write more about that in the future. </p><p>To summarizing, <strong>Azure Static Web Apps</strong> is another option to deploy static web apps, if you are using Azure in your company can be a good option to keep all the infrastructure services on the same platform, and it’s a simple alternative to deploy an App Service </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Nowadays &lt;a href=&quot;https://jamstack.org/&quot;&gt;JAMStack&lt;/a&gt; is trendy because a lot of reasons: performance, security, decoupling, etc.&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020 in a nutshell</title>
    <link href="https://sergiocarracedo.es/2020/2020-in-a-nutshell/"/>
    <id>https://sergiocarracedo.es/2020/2020-in-a-nutshell/</id>
    <published>2020-12-30T00:00:00.000Z</published>
    <updated>2021-08-09T12:47:58.854Z</updated>
    
    <content type="html"><![CDATA[<p>2020 is almost complete, and it was a year that we will remember for a long time. I don’t want to be dramatic, but 2020 left a deep mark on all of us. </p><h1 id="Profesional"><a href="#Profesional" class="headerlink" title="Profesional"></a>Profesional</h1><p>In the professional terrain, in January I started a new job as a pure frontend guy in a big company. This job gives to me a big opportunity of work with amazing people. This job forces me to speak in English most of the time, this is the reason why I started to write this blog in English. It was a challenge and still being, but I’m always very happy to be challenged. In November, I moved to a new job an awesome professional opportunity, but a great opportunity to be part of a project whose goal is to help others and to make a better and more equitable world.</p><h1 id="Community"><a href="#Community" class="headerlink" title="Community"></a>Community</h1><p>This year was a bad year for the developer groups. On February 27th, we did our last face-to-face event in PHPVigo, and we had to make the tough (but right) decision to cancel the PulpoCon 2020, but after crazy months we started to work hard to make it possible to do online events, inaugurating the PHPVigo’s Twitch channel. I also began to help a little bit in other groups.</p><h1 id="Talks"><a href="#Talks" class="headerlink" title="Talks"></a>Talks</h1><p>Despite the bad year for the face-to-face meetings I was able to do a few talks:</p><ul><li>New features in ES2020 in <a href="https://www.youtube.com/watch?v=ziZO5KQM_KU&amp;t=5248s">https://www.youtube.com/watch?v=ziZO5KQM_KU&amp;t=5248s</a></li><li>Creating your own Vue UI components library: From scratch to NPM: <a href="https://www.youtube.com/watch?v=z_K5iuSjCDo">https://www.youtube.com/watch?v=z_K5iuSjCDo</a></li></ul><p>Both in Spanish. I also did two internal talks in my old company (in Spanish too).<br>One of my goals for the near future was to do a talk in English, and I achieved this on December, in an company internal talk. I’m very proud of that because one year ago I almost didn’t speak English.</p><h1 id="Open-source"><a href="#Open-source" class="headerlink" title="Open source"></a>Open source</h1><p>This year I created 2 new open-source projects.</p><ul><li><a href="https://github.com/sergiocarracedo/obs-stream-widgets">OBS stream widgets</a>, When we started to do online talks, we and other groups needed to show information on the screen (labels, titles, countdown, etc), and run the final contest to give participants some free licenses and other goodies. This project wrote in JS, is a set of tools to do that.</li><li><a href="https://github.com/sergiocarracedo/gandi-ddns-node">Gandi-ddns-node</a> I needed to update a subdomain with my local (dynamic IP), this is the reason why I wrote this script which uses Gandi.net API to update a domain or subdomain if your local IP changes.</li></ul><p>I also did a few PR to opensource projects, fixing bugs, or adding new features, my little contribution to the open-source world.</p><p><img src="/images/2020/nutshell/github_stats.png" alt=""></p><h1 id="Personal"><a href="#Personal" class="headerlink" title="Personal"></a>Personal</h1><p>I learned a lot of things this year: new frameworks, tools, etc. I also started programming in a new language with a different paradigm to the other languages I knew: GoLang.</p><p>I also made new teammates, friends, and colleges, I fly for the second time in my life <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8">😅</span>    </p><p>I’m sure I forget a lot of things in this 2020’s summary but in general terms, regardless of the pandemic, this was a good year.</p><p>I wish 2021 will be the year we will forget the pandemic thanks to the vaccines, science, and great health professionals.</p><p>Happy 2021!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2020 is almost complete, and it was a year that we will remember for a long time. I don’t want to be dramatic, but 2020 left a deep mark 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Webkit (Safari) memory leak using SVG filters</title>
    <link href="https://sergiocarracedo.es/2020/safari-svg-filters-memory-leak/"/>
    <id>https://sergiocarracedo.es/2020/safari-svg-filters-memory-leak/</id>
    <published>2020-11-02T00:00:00.000Z</published>
    <updated>2021-08-09T12:47:58.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-context"><a href="#The-context" class="headerlink" title="The context"></a>The context</h2><p>A few weeks ago I was developing a website using <a href="https://nuxtjs.org/">NuxtJs</a> (which is not important for the problem but the is the context <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8">😉</span> ). That was a website that needs to use a few images as building blocks, the typical section separator with a shape different to a simple line, in this case, the section’s separator had 2 colors and a shadow.</p><p>I decided to use SVG images for several reasons, for example the images had to adapt to different screen widths, and the images were simple (more complex than a line but simple, They were similar to 2 waves with 2 colors). The SVG files are very useful in these use case, because the file size is small, and you can scale them infinitely without lost definition.<br>One important thing in this issue as we’ll see later is that this image had a shadow.</p><h2 id="The-problem"><a href="#The-problem" class="headerlink" title="The problem"></a>The problem</h2><p>Well, I was almost done templating the website, and we started to test the website in different browsers and platforms, and everything was fine, except because Safari users complain about the browser displays a notice:</p><blockquote><p>This webpage is using significant memory. Closing it may improve the responsiveness of your Mac.</p></blockquote><p>As side effect, the website animations were not fluid.</p><h2 id="Reproducing-the-problem-and-fixing-it"><a href="#Reproducing-the-problem-and-fixing-it" class="headerlink" title="Reproducing the problem and fixing it"></a>Reproducing the problem and fixing it</h2><p>I needed to test the website by myself to find the reason of this issue. I don’t own a Mac computer, but I have a <a href="https://www.browserstack.com/">BrowserStack</a> account.</p><p><a href="https://www.browserstack.com/">BrowserStack</a> is a SaaS that allows you to connect, using your browser, to remote devices with other browsers / OS. You can even select old browser versions, a mobile device (like iPhones, etc)</p><p><img src="/images/2020/safari-svg/browserstack.jpg" alt=""> </p><blockquote><p><strong>Off-Topic</strong>: BrowserStack supports my open source project <a href="https://sirenogrid.com/">SirenoGrid</a></p></blockquote><p>So, with my BrowserStack account, I could try to reproduce the problem. I open a Safari 13.1 (lastest version) instance in MacOS Catalina, and opened the website, and using the devtools got info about memory usage, and <strong>it was over 1.4 GB!!!!</strong><br>And if you reloaded the website memory usage grows until the system got unresponsive.</p><p>The first thing I thought is that the problem was the animations. I remove them: <em>Nothing changes</em>.</p><p>I remove javascript: <em>Nothing</em> <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f615.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f615.png?v8">😕</span></p><p>I continue removing things and trying other things to understand the problem. <em>No results</em> <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f62e.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62e.png?v8">😮</span></p><p>After a long time, I was already a little desperate I disabled all website content blocks, and I realized that when it was a block with an SVG image in the screen, the memory usage was high.</p><p>I tried the same for a block with a png image and memory still normal.</p><p>WTF?? It should be SVG images.</p><p>Then, I replaced all SVG images with PNG versions and website works with reasonable memory usage <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8">🎉</span></p><h2 id="Isolating-the-issue"><a href="#Isolating-the-issue" class="headerlink" title="Isolating the issue"></a>Isolating the issue</h2><p>After fixing the problem and with more time I wanted to know because SVG files were causing this high memory usage.</p><p>I searched on Google information for issues in Safari and SVG and I didn’t find anything that fit my issue, some diffuse references.</p><p>I created a sandbox to isolate the issue, I will not go into detail, but after some test and fail iterations I realized that the issue was related to SVG Filters.</p><p>With this information, I repeated the Google search, and I found information relative to Safari, SVG and filters issues <a href="https://bugs.webkit.org/show_bug.cgi?id=78814">1</a>, <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=583471">2</a> (Some of them are very old), and the most similar: <a href="https://github.com/mapbox/mapbox-gl-js/issues/7476">https://github.com/mapbox/mapbox-gl-js/issues/7476</a></p><h2 id="The-bug"><a href="#The-bug" class="headerlink" title="The bug"></a>The bug</h2><p>If you open in Safari a normal webpage, for example: <a href="https://apple.com">https://apple.com</a> which is a webpage with images, javascript, animations, video, etc. The Safari Timeline inspector says the memory usage is around 205MB</p><img src="/images/2020/safari-svg/apple_com.jpg" class="center mb-3"><p>I prepared a bug demo codesandbox, just with 2 simple svg images: </p><blockquote><p><a href="https://5emtw.csb.app">https://5emtw.csb.app</a> <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span> Open with responsibility in Safari <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span></p></blockquote><p>And in the first load that is the memory usage is around 600 MB!!!! :exploding_head: That’s crazy</p><img src="/images/2020/safari-svg/memory_leak.jpg" class="center mb-3"><p>And if you reload the page a few times the situations will be worse</p><img src="/images/2020/safari-svg/memory_leak_after_3_reloads.jpg" class="center mb-3"><p>After 3 reloads the memory usage is 1.26 GB, absolutely crazy.</p><p>The same page, and the same images, but without filters</p><blockquote><p><a href="https://5emtw.csb.app/nofilters.html">https://5emtw.csb.app/nofilters.html</a></p></blockquote><p>The memory usage is only 21 MB, that it’s a very normal memory usage</p><img src="/images/2020/safari-svg/without-filters.jpg" class="center mb-3"><p>Even with a simple filter, like:</p><p><code>&lt;feFlood flood-opacity="1" result="BackgroundImageFix"/&gt;</code></p><p>The memory starts to go high, I’m not sure what cause the problem, but in my opinion is something related to composition, I guess the browser keeps in memory the raw result of applying a filter and after making all the compositions layers      .</p><p>I reported that bug in the Webkit Bugzilla page: <a href="https://bugs.webkit.org/show_bug.cgi?id=218422">https://bugs.webkit.org/show_bug.cgi?id=218422</a><br>I hope they fix it soon.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;The-context&quot;&gt;&lt;a href=&quot;#The-context&quot; class=&quot;headerlink&quot; title=&quot;The context&quot;&gt;&lt;/a&gt;The context&lt;/h2&gt;&lt;p&gt;A few weeks ago I was developing a
      
    
    </summary>
    
    
    
      <category term="safari" scheme="https://sergiocarracedo.es/tags/safari/"/>
    
      <category term="bug" scheme="https://sergiocarracedo.es/tags/bug/"/>
    
      <category term="browserstack" scheme="https://sergiocarracedo.es/tags/browserstack/"/>
    
  </entry>
  
  <entry>
    <title>Talk: Creating your own Vue UI components library: From scratch to NPM</title>
    <link href="https://sergiocarracedo.es/2020/creating-your-own-vue-ui-components-library-from-scratch-to-npm/"/>
    <id>https://sergiocarracedo.es/2020/creating-your-own-vue-ui-components-library-from-scratch-to-npm/</id>
    <published>2020-10-19T00:00:00.000Z</published>
    <updated>2021-08-09T12:47:58.854Z</updated>
    
    <content type="html"><![CDATA[<p>Past September 29th I did a talk about how to create your own Vue UI components.</p><p>I explained some tips about how to organize the components’ code, talked in deep about how to set the values in <code>package.json</code> and their meaning. And how to publish on NPM and then how to use them in another project.</p><p>The talk was in Spanish, but slides are in English.</p><div class="video-container"><iframe src="https://www.youtube.com/embed/z_K5iuSjCDo" frameborder="0" loading="lazy" allowfullscreen=""></iframe></div><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vS9j4GjB2eZrnGI9b47FbecBunSSa_zYPJJsNu2mcJ_uux4CbisJOdG6vaFXB9rPTiPnv4N_KeXlLPl/embed?start=false&amp;loop=false&amp;delayms=5000" width="100%" height="600" frameborder="0" loading="lazy" allowfullscreen=""></iframe><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Past September 29th I did a talk about how to create your own Vue UI components.&lt;/p&gt;
&lt;p&gt;I explained some tips about how to organize the c
      
    
    </summary>
    
    
    
      <category term="vue" scheme="https://sergiocarracedo.es/tags/vue/"/>
    
      <category term="npm" scheme="https://sergiocarracedo.es/tags/npm/"/>
    
      <category term="components" scheme="https://sergiocarracedo.es/tags/components/"/>
    
  </entry>
  
  <entry>
    <title>Automate the startup of your projects with yarn create and SAOjs</title>
    <link href="https://sergiocarracedo.es/2020/automatize-node-project-creation/"/>
    <id>https://sergiocarracedo.es/2020/automatize-node-project-creation/</id>
    <published>2020-09-22T00:00:00.000Z</published>
    <updated>2021-08-09T12:47:58.854Z</updated>
    
    <content type="html"><![CDATA[<p>Start a project in any language, framework, etc it’s not as simple as it seems. I mean, usually, the project requires a lot of configuration files, installing dependencies, set the environment, create skeleton files, etc.</p><p>Talking about JavaScript frameworks: everyone has his own CLI tool to start a project with the required files to start to code.</p><p>For example <strong>Angular</strong> has <a href="https://cli.angular.io/">@angular/cli</a> and you could execute <code>ng new [app-name]</code>or<br><strong>Vue</strong> has <a href="https://cli.vuejs.org/">@vue/cli</a> and you can start a Vue project executing <code>vue create [project name]</code>.</p><p>This is nice, but usually, the default config is not complaining your development’s requisites you still must editing the config files to set up the project according to your needs, for example, change <code>tsconfig.json</code> configuration, more <em>advanced</em>, you would like to add some code in router file or you would like to create a folder structure for the store, or anything.</p><p>Do all those tasks every time you start a project is boring and spend time.</p><p>In the background, these CLI tools are using a skeleton repo or similar to prepare your project, but thinking in a generic use case.</p><p>So we can do the same but adapting this use case to our use case.</p><h2 id="yarn-create-or-npx-create"><a href="#yarn-create-or-npx-create" class="headerlink" title="yarn create (or npx create)"></a><code>yarn create</code> (or <code>npx create</code>)</h2><p><a href="https://yarnpkg.com/">Yarn</a> is a node package manager with vitamins, and provides the command <code>create</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn create [my-starter-kit]</span><br></pre></td></tr></tbody></table></figure><p>You only need to have installed <code>yarn</code>, nothing else. This command gets from your <em>npm registry</em> a package named <code>create-</code> + the name you use in the command, in our example tries to get the package <code>create-my-starter-kit</code></p><p>Then, yarn reads the <code>package.json</code> file of the package, installs the dependencies, and run the command in the <code>bin</code> entry</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">{</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"create-my-starter-kit"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,  </span><br><span class="line">  <span class="attr">"bin"</span>: <span class="string">"lib/cli.js"</span>,</span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong><code>yarn create</code> won’t do anything else</strong></p><p>You must create the next steps, but, think about it, the user (you, a teammate, a user of an open-source project) only need yarn as a dependency.</p><p>In your <code>cli.js</code> you can do things to prepare the development environment by yourself. But, let’s see how to simplify all these tasks.</p><h2 id="SAOjs"><a href="#SAOjs" class="headerlink" title="SAOjs"></a>SAOjs</h2><p><a href="https://saojs.org/">SAO</a> describes itself as a <em>Futuristic scaffolding tool</em>. and it’s inspired in <a href="https://yeoman.io/">Yeoman</a></p><p>These tools allow you to ask the user who runs your <em>create-app</em> questions that you could use to make decisions to install or configure different elements.</p><p>You must create the file <code>saofile.js</code>, and this file must export this elements:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  templateData: ...,</span><br><span class="line">  prompts: ...,</span><br><span class="line">  actions: ...,</span><br><span class="line">  prepare: ...,</span><br><span class="line">  subGenerators: ...,</span><br><span class="line">  completed: ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Prompts"><a href="#Prompts" class="headerlink" title="Prompts"></a>Prompts</h2><p>Let’s talk about <code>prompts</code>. That must return an array of questions to want to do to the user, for example</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">prompts: [</span><br><span class="line">  {</span><br><span class="line">    type: <span class="string">'input'</span>,</span><br><span class="line">    name: <span class="string">'projectName'</span>,</span><br><span class="line">    message: <span class="string">'What is your project name?'</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    type: <span class="string">'list'</span>,</span><br><span class="line">    name: <span class="string">'packageManager'</span>,</span><br><span class="line">    message: <span class="string">'Your favourite package manager'</span>,</span><br><span class="line">    choices: [<span class="string">'yarn'</span>, <span class="string">'npm'</span>]</span><br><span class="line">  }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>When you run SAO (we’ll see how to do soon), it’ll ask the user the questions.</p><p>The “prompts” system is very useful, you can ask questions only if a previous question is has some value, etc.</p><p>You can also save some answers as preset for the next projects (Like Vue CLI does)</p><p><a href="https://v1.saojs.org/saofile.html#prompts">More information about prompts</a></p><h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h2><p>The other important key in the saofile’s object is the actions. They define the actions to do. The important thing is that the actions can be conditioned by the user answers.</p><h3 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h3><p>You can copy files from a <code>templateDir</code> (in your create package) to the target (the project to create). That’s that we needed ;) </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  type: <span class="string">'add'</span>,</span><br><span class="line">  files: <span class="string">'**'</span>, </span><br><span class="line">  templateDir: <span class="string">'/template'</span>,</span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>You could even filter the files to add depending on the user’s answers<br><a href="https://v1.saojs.org/saofile.html#type-add">More info</a></p><h3 id="Move"><a href="#Move" class="headerlink" title="Move"></a>Move</h3><p>Moves files in the target (the project to create)</p><h3 id="Modify"><a href="#Modify" class="headerlink" title="Modify"></a>Modify</h3><p>Modify files in the target (the project to create), that is very interesting too, for example, for updating config files according to what the user answered</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> packageName = <span class="built_in">this</span>.packageName</span><br><span class="line">{</span><br><span class="line">  type: <span class="string">'modify'</span>,</span><br><span class="line">  files: <span class="string">'package.json'</span>,</span><br><span class="line">  handler: (data) {</span><br><span class="line">    data.name = packageName</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>In the example, we changed the project name in the <code>package.json</code> according to the user’s previous answers.</p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>Delete files in the target.</p><h2 id="Running-SAO"><a href="#Running-SAO" class="headerlink" title="Running SAO"></a>Running SAO</h2><p>You can run SAO from command line or from your <code>cli.js</code> file:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sao({...customVariables})</span><br><span class="line">  .run()</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.trace(err)</span><br><span class="line">    process.exit(<span class="number">1</span>)</span><br><span class="line">  })</span><br></pre></td></tr></tbody></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Probably you worked before with something similar, every time you have been created a project with Vue CLI, Nuxt, React, etc. </p><p>That is a shallow introduction to all the SAO functionalities, but as you can see the possibilities to customize your project creation are high. </p><p>You could create a template with the config files you use habitually and store the creation script in NPM.js, in a private registry, and every time you create a project, invoke <code>yarn create my-project-scaffolding</code> and start to code without the need of prepare manually the config files or miss some dependency.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Start a project in any language, framework, etc it’s not as simple as it seems. I mean, usually, the project requires a lot of configurat
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>How Vue&#39;s reactivity works (I): Object.defineProperty</title>
    <link href="https://sergiocarracedo.es/how-vue-reactivity-works-i/"/>
    <id>https://sergiocarracedo.es/how-vue-reactivity-works-i/</id>
    <published>2020-09-08T00:00:00.000Z</published>
    <updated>2021-08-09T12:47:58.854Z</updated>
    
    <content type="html"><![CDATA[<p>Maybe you don’t need to know how Vue reactivity works under the hood to make Vue apps, but anyway it will be interesting and useful.</p><p>In this context <strong>reactivity</strong>, means, simplifying, the capacity to detect a data change and do something after that. </p><p>In a Vue component, <strong>reactivity</strong>, means that the component will be re-rendered (totally or partially) after a change in the value of a variable to show the component updated with the new value. For example in this basic component:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h6</span>&gt;</span>Value: {{ clickCount }}<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"onClick"</span>&gt;</span>Add 1 more<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line">  data () {</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {</span></span><br><span class="line">      clickCount: 1</span><br><span class="line">     }</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    onClick () {</span><br><span class="line"><span class="javascript">     <span class="built_in">this</span>.clickCount = <span class="built_in">this</span>.clickCount + <span class="number">1</span></span></span><br><span class="line">    } </span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>Every time you click on the “Add 1 more” button, the value of <em>clickCount</em> variable is increased in one unit and Vue starts the <em>mechanism</em> to re-render the component showing the new value in the template. How is Vue able to know when a variable changes its value?</p><h2 id="Object-defineProperty-API"><a href="#Object-defineProperty-API" class="headerlink" title="Object.defineProperty API"></a><em>Object.defineProperty</em> API</h2><p>The answer is <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"><em>Object.defineProperty</em></a></p><p>This is a static method that defines or modify a property on an object</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObject = {}</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(myObject, <span class="string">'myProperty'</span>, {</span><br><span class="line">  value: <span class="string">'myValue'</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>Probably you realized that is the same as <code>myObject.myProperty = 'myValue'</code>, but there an important difference: we can configure the property behaviour, for example:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObject = {}</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(myObject, <span class="string">'myProperty'</span>, {</span><br><span class="line">  value: <span class="string">'myValue'</span>,</span><br><span class="line">  writable: <span class="literal">false</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">myObject.myProperty = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myObject.myProperty) <span class="comment">// 'myValue'</span></span><br></pre></td></tr></tbody></table></figure><p>In this situation, if you try to change the value of the property, it will not change, and if you are using <em>strict mode</em> you will get an exception.</p><p>With <code>Object.defineProperty</code> you could define a getter and setter for the object property as shown in the following example. Every time you try to assign a value to your property getter is called.</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObject = {}</span><br><span class="line"><span class="keyword">let</span> myProperyValue = <span class="string">'my value'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(myObject, <span class="string">'myProperty'</span>, {</span><br><span class="line">  get: <span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'getter'</span>)</span><br><span class="line">    <span class="keyword">return</span> myProperyValue</span><br><span class="line">  },</span><br><span class="line">  set: <span class="function">(<span class="params">newValue</span>) =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setter'</span>)</span><br><span class="line">    myProperyValue = newValue</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">myObject.myProperty = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myObject.myProperty)</span><br><span class="line"><span class="comment">// setter</span></span><br><span class="line"><span class="comment">// getter</span></span><br><span class="line"><span class="comment">// 123</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://playcode.io/666482">Run in PlayCode</a> </p><p>Note that if you use a getter or a setter you can’t access to the property’s value directly, I mean, you have to store property’s value somewhere else <em>place</em>.</p><p>Back in Vue, when you create a component you should define reactive values in <code>data</code> key</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  data () {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      clickCount: <span class="number">1</span></span><br><span class="line">     }</span><br><span class="line">  },</span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Under the hood, Vue creates an object with the properties you defined using <em>Object.defineProperty</em> and generates a getter and a setter. Every time a variable’s value changes, the setter intercepts the change and launches Vue’s re-render process with the new value.</p><p>This is the reason why you cannot add new variables to your component directly</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  data () {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      clickCount: <span class="number">1</span>      </span><br><span class="line">     }</span><br><span class="line">  },</span><br><span class="line">  ...</span><br><span class="line">  methods: {</span><br><span class="line">    someMethod () {</span><br><span class="line">      <span class="built_in">this</span>.newClickCount = <span class="number">1</span></span><br><span class="line">      ...</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>In the example above, <code>newClickCount</code> will not be reactive because Vue can’t know when you add a new property directly.</p><p>If you need to add a new property after the component’s definition Vue provides <code>Vue.set</code> or <code>vm.$set</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$set(<span class="built_in">this</span>.someObject, <span class="string">'b'</span>, <span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><p>But this not work with the root element, I mean we cannot add a new variable to <code>data</code></p><p><em>Object.defineProperty</em> works since IE9, and in all modern browsers <a href="https://caniuse.com/?search=DefineProperty">https://caniuse.com/?search=DefineProperty</a></p><h2 id="How-does-it-for-arrays"><a href="#How-does-it-for-arrays" class="headerlink" title="How does it for arrays?"></a>How does it for arrays?</h2><p>It doesn’t!. If you try to repeat the previous example with an array property:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObject = {}</span><br><span class="line"><span class="keyword">let</span> myProperyValue = []</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(myObject, <span class="string">'myProperty'</span>, {</span><br><span class="line">  get: <span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'getter'</span>)</span><br><span class="line">    <span class="keyword">return</span> myProperyValue</span><br><span class="line">  },</span><br><span class="line">  set: <span class="function">(<span class="params">newValue</span>) =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setter'</span>)</span><br><span class="line">    myProperyValue = newValue</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">myObject.myProperty = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myObject.myProperty)</span><br><span class="line"><span class="comment">// setter</span></span><br><span class="line"><span class="comment">// getter</span></span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></tbody></table></figure><p>setter works because, is a direct assignation, but we usually don’t work with arrays in that way, we use <code>.push</code>, <code>slice</code>, etc..</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">myObject.myProperty.push(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myObject.myProperty)</span><br><span class="line"><span class="comment">// getter</span></span><br><span class="line"><span class="comment">// getter</span></span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://playcode.io/666496">Run in PlayCode</a></p><p>We can see getter has been called twice, but the setter has not been called</p><h3 id="How-does-Vue-resolve-it"><a href="#How-does-Vue-resolve-it" class="headerlink" title="How does Vue resolve it?"></a>How does Vue resolve it?</h3><p>Simple, patching vanilla JS array methods </p><p>Vue stores the original method, and create a new that notifies the change and execute the original method</p><p>You can see how it does in detail on:<br><a href="https://github.com/vuejs/vue/blob/bb253db0b3e17124b6d1fe93fbf2db35470a1347/packages/vue-template-compiler/build.js#L1087">https://github.com/vuejs/vue/blob/bb253db0b3e17124b6d1fe93fbf2db35470a1347/packages/vue-template-compiler/build.js#L1087</a></p><h2 id="ES6-Proxies"><a href="#ES6-Proxies" class="headerlink" title="ES6 Proxies"></a>ES6 Proxies</h2><p>There is another way to know when a value change (and other things) in JS since ES6: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxies</a></p><p>Vue 3 uses <em>Proxies</em> instead of <em>Object.defineProperty</em> to make the reactivity under the hood. I will write a post about Proxies soon.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Maybe you don’t need to know how Vue reactivity works under the hood to make Vue apps, but anyway it will be interesting and useful.&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="vue" scheme="https://sergiocarracedo.es/tags/vue/"/>
    
      <category term="reactivity" scheme="https://sergiocarracedo.es/tags/reactivity/"/>
    
      <category term="javascript" scheme="https://sergiocarracedo.es/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Is know how to search on Google a skill?</title>
    <link href="https://sergiocarracedo.es/is-search-in-google-a-skill/"/>
    <id>https://sergiocarracedo.es/is-search-in-google-a-skill/</id>
    <published>2020-08-31T09:00:00.000Z</published>
    <updated>2021-08-09T12:47:58.854Z</updated>
    
    <content type="html"><![CDATA[<p>Most of us do search on Google every day, maybe looking for a website, for news, for an address, for a cooking recipe, for information about a topic we are interested in, for technical information or anything.</p><p>All developers I know use Google, another search engine, or search on webpages like <a href="https://stackoverflow.com/">stack overflow</a> every day to find the best way to do a task.</p><p>So is it a skill?, Should you know how to resolve a task without using Google or another knowledge source?</p><p>I don’t think so, part of our skill should be know how to find information about the task. This has been done for centuries, we have just updated (added) the knowledge sources, in the past, sources were physical books, oral knowledge, etc. But now we have these sources and more, like online sources, and Google and other search engines are the way to reach the knowledge we need at some point.</p><p>Imagine you have the task of creating something like this:</p><p align="center"><img src="/images/wordcloud.svg" class="photoswipe"></p><p>Do you know how to do that? If you do, nice, lucky you, but I don’t know how to do it.</p><p>I guess the next step is to search for how to do it, but, what’s this thing name? If you don’t know it, you need to find the name of the “thing” you should develop.</p><p>How do you do it? In that case (we will suppose that you have this image as a task’s reference) I guess a good idea could be use <a href="https://www.google.es/imghp">Google Image Search</a>. </p><p>If we upload that image, Google interprets the image as a circle. WTF? Perhaps is because it reads the words in the image and believes they are circle’s attributes. Who knows ¯\<em>(ツ)</em>/¯</p><p align="center"><img src="/images/google-skill/googleImageSearch.png" class="photoswipe" width="600"></p><p>So in a rapid view, Google doesn’t return relevant information about the name of this thing.</p><p>But if you look closely the “Visually similar images” section, most of them are beautiful images with similar colors, but the third one is similar to our image: It has words too, and if you look even closer, the title of the image is <strong>WordMap</strong> </p><p align="center"><img src="/images/google-skill/googleImageSearchDetail.png" class="photoswipe" width="800"></p><p>I will not go into detail, but, it’s easy to find the relation with the term <strong>Word Cloud</strong> that is the “thing” we must create, and we could search for the theory and maths behind that, find a library which does the task or create from the scratch and finally do our task.</p><p>You will probably agree that use others’ experience it part of the developer’s job (is part of any job), we are doing it all the time, and find the way to reach that experience and knowledge I guess is a skill. </p><p>I think employers should appreciate it as another skill, perhaps it’s just a soft skill, but if your employee hasn’t it, she/he could spend a lot of time just trying to know how to find the way to do some task or find information and knowledge. </p><p>Some people even consider that know how to search on Google <a href="https://medium.com/how-i-learned-ruby-rails/why-googling-is-the-most-important-skill-a-developer-must-have-d69b89b22218">is the most important skill a developer must have</a>. I would not dare to say that, but I think is an important skill.</p><p>What do you think? Should be a soft or a hard skill?</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Most of us do search on Google every day, maybe looking for a website, for news, for an address, for a cooking recipe, for information ab
      
    
    </summary>
    
    
    
      <category term="google" scheme="https://sergiocarracedo.es/tags/google/"/>
    
      <category term="search" scheme="https://sergiocarracedo.es/tags/search/"/>
    
  </entry>
  
  <entry>
    <title>What is VuePress and why you should use it to document your project?</title>
    <link href="https://sergiocarracedo.es/vuepress/"/>
    <id>https://sergiocarracedo.es/vuepress/</id>
    <published>2020-08-22T00:00:00.000Z</published>
    <updated>2021-08-09T12:47:58.854Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://vuepress.vuejs.org/">VuePress</a> defines itself as a <em>Vue-powered Static Site Generator</em>. In other words, is a tool to create static sites. A static site is a website where nothing runs on the server. The server only takes care of return the file (HTML file) as is stored in the server.</p><p>Is the opposite of a <strong>dynamic site</strong>, like for example a PHP webpage, in that case, your browser makes a request to the server, and the server executes PHP code that, for example, get a post from a database, process it, put that post in an HTML template, etc and returns the result to the browser.</p><h4 id="What’s-better-dynamic-or-static"><a href="#What’s-better-dynamic-or-static" class="headerlink" title="What’s better dynamic or static?"></a>What’s better dynamic or static?</h4><p>This is not the goal of this blog post, but I will say: ‘It depends’. There is no “magic” answer: the best type depends on the use case.</p><h2 id="What-does-VuePress"><a href="#What-does-VuePress" class="headerlink" title="What does VuePress?"></a>What does VuePress?</h2><p>With VuePress you can create content in <em>markdown</em> files and when you generate the website every markdown file will be converted to an HTML page.</p><p>VuePress also provides you other content-relates features:</p><ul><li>Menus</li><li>Search box (yes, works even as static website)</li><li>Markdown extensions (that will make your life easier)</li><li>etc.</li></ul><p>We will come back to these elements in a moment, but first, we will learn how to start a VuePress website</p><h2 id="Creating-a-VuePress-website"><a href="#Creating-a-VuePress-website" class="headerlink" title="Creating a VuePress website"></a>Creating a VuePress website</h2><p>It’s very easy, just:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn create vuepress [project-name]</span><br><span class="line"><span class="built_in">cd</span> [project-name]</span><br></pre></td></tr></tbody></table></figure><p>And then, to start the dev server <code>yarn docs:dev</code>.</p><p>(This command starts a local dev server, by default, on <code>http://localhost:8080</code></p><p>At this point, you can create content just creating markdown files in <code>docs</code> folder</p><p>If you create a file named <code>my-content.md</code> you could access it in <code>http://localhost:8080/my-content.html</code></p><p>(If you want to serve a default page a.k.a <code>http://localhost:8080/</code> the filename should be `README.md)</p><p>You also could create folders in <code>docs/</code> and folder name will be in the URL of that content. For example: <code>docs/blog/README.md</code> will be served at <code>http://localhost:8080/blog/</code></p><h2 id="Markdown-extensions"><a href="#Markdown-extensions" class="headerlink" title="Markdown extensions"></a>Markdown extensions</h2><p>VuePress provides markdown extensions add more features than “standard” markdown provides.</p><p>For example: </p><ul><li>Write Github-styled tables: You can create tables in markdown just writing something like:<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| Col 1        | Col 2           | Col 3  |</span><br><span class="line">| ------------- |:-------------:| -----:|</span><br><span class="line">| Content col 1 | Content col 2 | 1234 |</span><br></pre></td></tr></tbody></table></figure></li><li>Frontmatter support: <a href="https://vuepress.vuejs.org/guide/frontmatter.html">Frontmatter</a> is a way to add YAML content in a markdown file, to set content metadata, for example, the title, the language, etc )</li><li>Emoji support: <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span> Nothing more to say</li><li>ToC (Table of contents): A very useful extension, you only need to add <code>[[toc]]</code> in your markdown, and it will be rendered as a table of contents (a tree of document headings)</li><li>Vue components: You can add Vue components directly in the markdown. That is very useful for main the VuePress’s use. </li></ul><p>Go to <a href="https://vuepress.vuejs.org/guide/markdown.html">https://vuepress.vuejs.org/guide/markdown.html</a> for further information</p><h2 id="VuePress-as-documentation-generator"><a href="#VuePress-as-documentation-generator" class="headerlink" title="VuePress as documentation generator"></a>VuePress as documentation generator</h2><p>Applications and uses are infinite, but VuePress is a very simple but powerful tool to create technical documentation.</p><p>Most of Vue ecosystem uses VuePress to create their documentation websites: <a href="https://vuejs.org/">Vue.js</a>, <a href="https://vuex.vuejs.org/">Vuex</a>, <a href="https://vue-apollo.netlify.app/">Vue Apollo</a>, <a href="https://portal-vue.linusb.org/">Portal Vue</a>, <a href="https://vue-chartjs.org/">Vue ChartJs</a>, etc….</p><p>I think this simplicity makes easy the task of creating your project documentation.</p><h2 id="Using-in-an-existing-project"><a href="#Using-in-an-existing-project" class="headerlink" title="Using in an existing project"></a>Using in an existing project</h2><p>I think is a good idea to keep your project and its documentation together, and with VuePress is possible to do it.</p><p>In your project, you only need to add Vuepress as <em>development dependency</em>, that’s all</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vuepress -D </span><br></pre></td></tr></tbody></table></figure><p>And edit your <code>package.json</code> to add the following items in the scripts section to start dev server and build documentation.</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  "scripts": {</span><br><span class="line">    ...</span><br><span class="line">    "docs:dev": "vuepress dev docs",</span><br><span class="line">    "docs:build": "export NODE_ENV=production &amp;&amp; vuepress build docs"</span><br><span class="line">  },</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><h2 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages"></a>Advantages</h2><ul><li>Keep the documentation together with the code makes it easier for developers to read the project documentation and update it, because it is near to the code.</li><li>As documentation is markdown, you can still be reading it even without use VuePress, for example in your IDE or in GitHub.</li><li>You could insert your project’s Vue components in the documentation to create a “playground”, for example, to demonstrate how your component change if you change some property. Like Buefy does in its <a href="https://buefy.org/documentation/pagination">documentation</a></li><li>VuePress is themable and highly configurable, you can do advanced things, but you can start to write and serve docs in a few minutes.</li></ul><h2 id="Other-VuePress-uses"><a href="#Other-VuePress-uses" class="headerlink" title="Other VuePress uses"></a>Other VuePress uses</h2><p>Create technical documentation website isn’t the only VuePress use case, you could use VuePress to create a blog <a href="https://ulivz.com/">Example</a>, or a simple webpage but, unless it is something very simple, i think VuePress is not the best tool.</p><h2 id="VitePress"><a href="#VitePress" class="headerlink" title="VitePress"></a>VitePress</h2><p>At this moment, Evan You, VuePress and Vue.js creator is working on <a href="https://github.com/vitejs/vite">Vite</a>, a build tool that uses native ES Module imports and promises be very fast, and over Vite is creating too <a href="https://github.com/vuejs/vitepress">VitePress</a>, a VuePress brother built on top of Vite, that will have some improvements over VuePress, to highlight Vue 3 usage and faster dev server and build and with lighter page weight.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>If you need to serve your project documentation <strong>VuePress</strong> is a good option to do that.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://vuepress.vuejs.org/&quot;&gt;VuePress&lt;/a&gt; defines itself as a &lt;em&gt;Vue-powered Static Site Generator&lt;/em&gt;. In other words, is a t
      
    
    </summary>
    
    
    
      <category term="vue" scheme="https://sergiocarracedo.es/tags/vue/"/>
    
      <category term="vuepress" scheme="https://sergiocarracedo.es/tags/vuepress/"/>
    
      <category term="markdown" scheme="https://sergiocarracedo.es/tags/markdown/"/>
    
      <category term="documentation" scheme="https://sergiocarracedo.es/tags/documentation/"/>
    
  </entry>
  
  <entry>
    <title>Export and import Vuex state</title>
    <link href="https://sergiocarracedo.es/2020/07/22/export-and-import-vuex-state/"/>
    <id>https://sergiocarracedo.es/2020/07/22/export-and-import-vuex-state/</id>
    <published>2020-07-22T00:00:00.000Z</published>
    <updated>2021-08-09T12:47:58.854Z</updated>
    
    <content type="html"><![CDATA[<p>If you are familiarized with Vuex, you must know that Vuex is a <a href="https://vuex.vuejs.org/#what-is-vuex">state management pattern library</a> for Vue applications. Vuex centralizes the application’s state and how components, and other code parts, change it.</p><p>You can find a lot of articles talking about Vuex, I even wrote 2 articles 3 year ago talking about it: <a href="/2017/04/03/vuex-el-redux-de-vuejs-i/" title="Vuex el redux de VueJS I">Vuex el redux de VueJS I</a> <a href="/2017/04/03/vuex-el-redux-de-vuejs-i/" title="Vuex el redux de VueJS II">Vuex el redux de VueJS II</a> (<em>Spanish</em>)</p><p>But today I will write about an edge case related to <strong>vuex</strong>, as you could read in the title, about how to export and import Vuex state.</p><p>Is a very easy process, and is not necessary for most of the applications, but I think is useful to know how to do it.</p><h3 id="Export"><a href="#Export" class="headerlink" title="Export"></a>Export</h3><p>Export is very simple, you only need to get the state, for example from a component</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> savedState = <span class="built_in">this</span>.$store.state</span><br></pre></td></tr></tbody></table></figure><p>And <em>voilà</em> you have the store state, you could save in Local Storage to keep the state even if the user closes or reloads browser’s tab. Really you don’t need to write code for that, exists an awesome library that does that: <a href="https://github.com/robinvdvleuten/vuex-persistedstate">vuex-persistedstate</a></p><h2 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h2><p>You can think that import the state is similar to export:<br><del>this.$store.state = savedState</del><br>If you try, you will get an Exception</p><blockquote><p>Uncaught Error: [vuex] use store.replaceState() to explicit replace store state.</p></blockquote><p>And if you read carefully, the exception message gives to you the solution: Use <a href="https://vuex.vuejs.org/api/#replacestate"><code>store.replaceState()</code></a></p><p>This store method replaces all the store state (the root state). For example, Vue Dev Tools uses it to do the <em>time travels</em>.</p><h2 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h2><p>I can think of a few applications for this, as I mentioned before, save the state to Local Storage, or export and save state to a JSON file to save your application settings, etc…</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you are familiarized with Vuex, you must know that Vuex is a &lt;a href=&quot;https://vuex.vuejs.org/#what-is-vuex&quot;&gt;state management pattern l
      
    
    </summary>
    
    
    
      <category term="vue" scheme="https://sergiocarracedo.es/tags/vue/"/>
    
      <category term="js" scheme="https://sergiocarracedo.es/tags/js/"/>
    
      <category term="store" scheme="https://sergiocarracedo.es/tags/store/"/>
    
  </entry>
  
  <entry>
    <title>Sharing variables between SCSS and Typescript</title>
    <link href="https://sergiocarracedo.es/2020/07/17/sharing-variables-between-scss-and-typescript/"/>
    <id>https://sergiocarracedo.es/2020/07/17/sharing-variables-between-scss-and-typescript/</id>
    <published>2020-07-17T00:00:00.000Z</published>
    <updated>2021-08-09T12:47:58.854Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes you need to share variables between CSS (or SCSS) and Typescript, for example, if you have a list of colors in your SCSS file and need to check the variable names in typescript to be sure is an available color.</p><p>Imagine a Vue component have a property to set the background color: </p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"['component', colorClass]"</span>&gt;</span></span><br><span class="line">    My component</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> availableColors = [<span class="string">'primary'</span>, <span class="string">'alert'</span>, <span class="string">'my-custom-color'</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'my-component'</span>,</span></span><br><span class="line">  props: {</span><br><span class="line"><span class="javascript">    color: <span class="built_in">String</span></span></span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    colorClass () { </span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (availableColors.indexOf(<span class="built_in">this</span>.color) !== -<span class="number">1</span>) {</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="string">`color-<span class="subst">${<span class="built_in">this</span>.color}</span>`</span></span></span><br><span class="line">      } </span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">null</span></span></span><br><span class="line">    }   </span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>In this component, if you set the property color, and the value is an available color, adds a class for that color, for example, if the color prop is <code>primary</code> adds the class <code>.color-primary</code>, but if the prop’s value is <code>red</code> doesn’t add any class related to color because <code>red</code> is not an available color.</p><p>Bearing in mind that, we probably have a <em>scss</em> file where we define that classes, something like:</p><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$primary</span>: <span class="number">#333</span>;</span><br><span class="line"><span class="variable">$alert</span>: <span class="number">#900</span>;</span><br><span class="line"><span class="variable">$custom</span>: <span class="number">#090</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.color-primary</span> {</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$primary</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.color-alert</span> {</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$alert</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.color-custom</span> {</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$custom</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>We could improve this file to generate the classes programmaticaly using the power of SCSS:</p><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// colors.scss</span></span><br><span class="line"><span class="variable">$colors</span>: (</span><br><span class="line">  <span class="string">'primary'</span>: <span class="string">'#333'</span>,</span><br><span class="line">  <span class="string">'alert'</span>: <span class="string">'#900'</span>,</span><br><span class="line">  <span class="string">'custom'</span>: <span class="string">'#090'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$name</span>, <span class="variable">$color</span> in <span class="variable">$colors</span> {</span><br><span class="line">  <span class="selector-class">.color-</span>#{<span class="variable">$name</span>} {</span><br><span class="line">     <span class="attribute">background</span>: <span class="variable">$color</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>This way of generating the color classes allow us to simplify how we add a new color. We just should add the new color to <code>$colors</code> and we will have the color class</p><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// colors.scss</span></span><br><span class="line"><span class="variable">$colors</span>: (</span><br><span class="line">  <span class="string">'primary'</span>: <span class="string">'#333'</span>,</span><br><span class="line">  <span class="string">'alert'</span>: <span class="string">'#900'</span>,</span><br><span class="line">  <span class="string">'custom'</span>: <span class="string">'#090'</span>,</span><br><span class="line">  <span class="string">'new-color'</span>: <span class="string">'#00a'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$name</span>, <span class="variable">$color</span> in <span class="variable">$colors</span> {</span><br><span class="line">  <span class="selector-class">.color-</span>#{<span class="variable">$name</span>} {</span><br><span class="line">     <span class="attribute">background</span>: <span class="variable">$color</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>But if you remember in our component we had an array width the list of available colors, if we don’t add the new colors to component too, we can not use it <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f614.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f614.png?v8">😔</span></p><p>But there is a way to only need to add colors in SCSS and also use the list in typescript: <code>:export</code>.</p><p><code>:export</code> is brought to us by <em>Webpack’s scss loader</em> and allows us to make scss variable exposed to Javascript / Typescript.<br>We will add an <code>:export</code> stament to our <code>colors.scss</code> file</p><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// colors.scss</span></span><br><span class="line"><span class="variable">$colors</span>: (</span><br><span class="line">  <span class="string">'primary'</span>: <span class="string">'#333'</span>,</span><br><span class="line">  <span class="string">'alert'</span>: <span class="string">'#900'</span>,</span><br><span class="line">  <span class="string">'custom'</span>: <span class="string">'#090'</span>,</span><br><span class="line">  <span class="string">'new-color'</span>: <span class="string">'#00a'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$name</span>, <span class="variable">$color</span> in <span class="variable">$colors</span> {</span><br><span class="line">  <span class="selector-class">.color-</span>#{<span class="variable">$name</span>} {</span><br><span class="line">     <span class="attribute">background</span>: <span class="variable">$color</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">:export {</span><br><span class="line">  @each <span class="variable">$name</span>, <span class="variable">$color</span> in <span class="variable">$colors</span> {</span><br><span class="line">    #{<span class="variable">$name</span>}: <span class="variable">$color</span>                </span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>Notice we don’t need semicolon (;) or comma (,) at the end of each line. </p></blockquote><p>Then, we will refactor our compoment like this:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"['component', colorClass]"</span>&gt;</span></span><br><span class="line">    My component</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> availableColors <span class="keyword">from</span> <span class="string">'./colors.scss'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'my-component'</span>,</span></span><br><span class="line">  props: {</span><br><span class="line"><span class="javascript">    color: <span class="built_in">String</span></span></span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    colorClass () { </span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (availableColors.indexOf(<span class="built_in">this</span>.color) !== -<span class="number">1</span>) {</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="string">`color-<span class="subst">${<span class="built_in">this</span>.color}</span>`</span></span></span><br><span class="line">      } </span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">null</span></span></span><br><span class="line">    }   </span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>But in Typescript we must declare the module to available its contents, we just add a <em>declaration</em> file (with the same name as scss file plus <code>.d.ts</code>)</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// colors.scss.d.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> colors : <span class="built_in">any</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> colors</span><br></pre></td></tr></tbody></table></figure><p>And now we only need to add a new color in one place (the scss file) and it will be available everywhere.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes you need to share variables between CSS (or SCSS) and Typescript, for example, if you have a list of colors in your SCSS file a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Why I write a blog</title>
    <link href="https://sergiocarracedo.es/2020/07/15/why-i-write-a-blog/"/>
    <id>https://sergiocarracedo.es/2020/07/15/why-i-write-a-blog/</id>
    <published>2020-07-15T00:00:00.000Z</published>
    <updated>2021-08-09T12:47:58.854Z</updated>
    
    <content type="html"><![CDATA[<p>If you are here (Welcome!) you are reading my blog, this is obvious <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>, and I want to share with you why I write it.</p><p>Writing a blog is in some ways a hard task:</p><ul><li>You should find an interesting topic to write about.</li><li>Look for information related to the chosen topic.</li><li>Read a lot of references about it.</li><li>Write your blog post.</li><li>Review it.</li><li>Correct it.</li><li>Find a beautiful and related picture for the header and home page.</li><li>And finally publish it.</li><li>You could also want to share on Twitter or LinkedIn.</li></ul><p>Ok, but why do you do this “effort”? In somehow I do this thinking of myself:</p><h2 id="To-Learn"><a href="#To-Learn" class="headerlink" title="To Learn"></a>To Learn</h2><p>All this effort you do reading about the topic and looking references makes you learn a lot about the topic and about other things you didn’t know previously. Well, is not the same write opinions or feelings (like this post) or write a technical article. </p><h2 id="Going-in-deep-on-the-topic"><a href="#Going-in-deep-on-the-topic" class="headerlink" title="Going in deep on the topic"></a>Going in deep on the topic</h2><p>Very related to the previous one is to go in deep in the topic. For example when you write about some technical topic you know a lot about, probably you could think that you don’t need read anything, but is interesting to check your arguments and that forces you to go deep in the topic, more than you expect.</p><h2 id="To-Practice-English"><a href="#To-Practice-English" class="headerlink" title="To Practice English"></a>To Practice English</h2><p>When I created this webpage I started to write in Spanish because is my native language (the order one is Galician), but six months ago I joined an English speaking team, and I need to improve my English.</p><p>One way to do that is to write my blog articles in English to practice it. (I know I make a lot of mistakes, but this is part of the way to improve <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f613.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f613.png?v8">😓</span>)</p><h2 id="To-share-knowledge"><a href="#To-share-knowledge" class="headerlink" title="To share knowledge"></a>To share knowledge</h2><p>I like to learn, and one source of (technical) knowledge is to read other people’s blogs, and I want to return a little of what I have received.</p><h2 id="As-own-reference"><a href="#As-own-reference" class="headerlink" title="As own reference"></a>As own reference</h2><p>This might sound stupid, but I came back to my old blog post to find information about some things. Things I don’t do for a long time and I forget how I resolved it, but I know that I wrote a post about that. So I just need to visit my blog and find the article.</p><p>These are my motivations. What are yours?  </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you are here (Welcome!) you are reading my blog, this is obvious &lt;span class=&quot;github-emoji&quot; style=&quot;color: transparent;background:no-re
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Improving your Vue (and JS) coding quality and workflow</title>
    <link href="https://sergiocarracedo.es/2020/06/21/Improving-your-JS-workflow/"/>
    <id>https://sergiocarracedo.es/2020/06/21/Improving-your-JS-workflow/</id>
    <published>2020-06-21T12:47:40.000Z</published>
    <updated>2021-08-09T12:47:58.854Z</updated>
    
    <content type="html"><![CDATA[<p>To start coding Javascript (and other languages), you almost need nothing, just a simple, text editor. That is good to start coding when you are learning the language, just code without distractions.</p><p>But when you develop bigger projects or/and with others, some problems appears: code organization, coding style, and other. That is because all languages have at a least clean code style guide.</p><p>Things like use semi-colon or not at the end of the line, the number of spaces indenting code, etc. </p><p>In Javascript, we have several code styles</p><ul><li><a href="https://google.github.io/styleguide/jsguide.html">Google Javascript Style Guide</a></li><li><a href="https://github.com/airbnb/javascript">AirBnb Javascript Style Guide</a></li><li><a href="https://standardjs.com/">Javascript Standard Style</a></li><li>…</li></ul><p>Personally I prefer StandardJS (Javascript Standard Style), despite this style bans semicolons, and I come from PHP where semicolons are mandatory.</p><p>And to complicate it a little more if you use a JS framework like Vue, Angular, or React have their coding styles.</p><p>And also if your project uses Typescript, it has is own <a href="https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines">coding style guide</a></p><p>Then, how could we ensure all our code complains chosen style guides?</p><h2 id="Lint"><a href="#Lint" class="headerlink" title="Lint"></a>Lint</h2><p>A <a href="https://en.wikipedia.org/wiki/Lint_(software)">linter</a> is a tool that analyzes statically our code to ensure that complaints the rules of our coding style(s).</p><p>One of the most used tools in the Javascript world is <a href="https://eslint.org/">ESLint</a>. This tool allows you to find coding style errors, and fix them automatically if is possible.</p><p>For example when you create a Vue project using <code>vue-cli</code> the setup wizard ask you if you want to use a Linter / Formatter (you should) and allows you to choose the coding style, and when you want the linter runs: on file save and/or when you commit your files.</p><script type="text/javascript" src="https://asciinema.org/a/34AKksPvMuJ7qpUk6K5gBruyS.js" id="asciicast-34AKksPvMuJ7qpUk6K5gBruyS" async=""></script><p>Please notice I choose lint on commit. When your project is small, there is no problem in use “lint on save”, but when the project makes bigger check the files on save would be very slow and unproductive. Even with lint on saving, when you are testing things in your code and for example, you comment lines and have an unused import, or remove last value of a list keeping the trailing comma, lint returns an error when you save, and make the tests slower. When you are experimenting you should be concentrated on the experiment, not in the code, when all works ok, then is time to refactor and take care of the coding style.</p><p>Let’s make an example adding some end line semicolons <code>;</code>, spaces between lines, etc</p><script type="text/javascript" src="https://asciinema.org/a/ghtOPskHMcmtMmj8q7RUQZb47.js" id="asciicast-ghtOPskHMcmtMmj8q7RUQZb47" async=""></script><p>As you can see, before commiting the code, a git hook runs the linter and fix the code (not always is able to fix the code)</p><p>This is the <code>package.json</code> section related to githooks and linter</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"gitHooks"</span>: {</span><br><span class="line">    <span class="attr">"pre-commit"</span>: <span class="string">"lint-staged"</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"lint-staged"</span>: {</span><br><span class="line">    <span class="attr">"*.{js,jsx,vue}"</span>: [</span><br><span class="line">      <span class="string">"vue-cli-service lint"</span>,</span><br><span class="line">      <span class="string">"git add"</span></span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Vue uses a tool called <a href="https://github.com/okonet/lint-staged">Lint-staged</a> that allows the linter to only check staged files. I can assume all files in the repo (not modified) are ok because they were linted before commiting to the repo.</p><p>If you want, you could manage git hooks using <a href="https://github.com/typicode/husky">Husky</a></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"husky"</span>: {</span><br><span class="line">    <span class="attr">"hooks"</span>: {</span><br><span class="line">      <span class="attr">"pre-commit"</span>: <span class="string">"lint-staged"</span>,</span><br><span class="line">      <span class="attr">"pre-push"</span>: <span class="string">"vue-cli-service test:unit"</span>,</span><br><span class="line">      <span class="attr">"..."</span>: <span class="string">"..."</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>For example, you can force run tests before push.</p><h1 id="Optimizing"><a href="#Optimizing" class="headerlink" title="Optimizing"></a>Optimizing</h1><p>If you are using Webpack, another interesting tool to know the optimization of your project is <a href="https://github.com/stephencookdev/speed-measure-webpack-plugin">Speed Measure Pluing</a></p><p>This tool shows the time elapsed by each webpack plugin when you build (even using HRM) your project using webpack. It’s very useful to detect if some loader is taking too much time to run.</p><p>If you use <code>vue-cli</code> in your project, you can take advantage of using the integrated analyzer. That allows you to see every imported package, css, or library and check the sizes, and put the focus on heavier ones and try to optimize imports (not importing whole package, just the necessary libraries)   </p><img src="/images/vue-cli.jpg" class="photoswipe"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;To start coding Javascript (and other languages), you almost need nothing, just a simple, text editor. That is good to start coding when 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>My favorite YouTube Channels 2020</title>
    <link href="https://sergiocarracedo.es/2020/06/02/my-favourite-youtube-channels-2020/"/>
    <id>https://sergiocarracedo.es/2020/06/02/my-favourite-youtube-channels-2020/</id>
    <published>2020-06-02T00:00:00.000Z</published>
    <updated>2021-08-09T12:47:58.854Z</updated>
    
    <content type="html"><![CDATA[<p>In 2018, I did a list of my <a href="/2018/11/29/Mis-canales-favoritos-de-YouTube/" title="favourite YouTube Channels">favourite YouTube Channels</a> (Spanish), almost 2 years pass after this post and on this time I start to watch new channels and remove or watch less other channels.</p><p>This year I classified the videos by topic (as I did last year), and I added an emoji code:</p><blockquote><p><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> Favorite channel. I usually watch most videos.<br><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span> Very interesting<br><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8">🔥</span> Some videos are very interesting</p></blockquote><p>This is the updated list:</p><h1 id="Travel-Culture-World"><a href="#Travel-Culture-World" class="headerlink" title="Travel / Culture / World:"></a>Travel / Culture / World:</h1><ul><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UC-UcKEWOSpz0AfY33TrYw3g">Nekojitablog</a> [ES] This channel is hosted by a Japanise woman an his Spanish husband. Thay talk about Japan culture, places, etc. An interesting point of view</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span> <a href="https://www.youtube.com/channel/UCUGfBZ3WiiqCc_UfcF_RrRA">Jabiertzo</a> [ES] A couple of Chinese and Spanish talking about china.</li><li><a href="https://www.youtube.com/channel/UCCNgRIfWQKZyPkNvHEzPh7Q">Ter</a> Sometimes talks about architecture.</li></ul><h1 id="Engineering-Science"><a href="#Engineering-Science" class="headerlink" title="Engineering / Science"></a>Engineering / Science</h1><ul><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCbdSYaPD-lr1kW27UJuk8Pw">QuantumFracture</a> [ES] Physics!!</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCV5G678sZwW5IcF3pCfRbHQ">La Hiperactina</a> [ES] Biomedicine</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCGKzjVZGdJ0YmUqg42xfO5w">Antroporama</a> [ES] Neuroscience!</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCy5znSnfMsDwaLlROnZ7Qbg">Dot CSV</a> [ES] AI</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCH-Z8ya93m7_RD02WsCSZYA">Derivando</a> [ES] Maths!</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span> <a href="https://www.youtube.com/channel/UCUK0HBIBWgM2c4vsPhkYY4w">The Slow Mo Guys</a> [EN] Slow motion videos about “science”</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span> <a href="https://www.youtube.com/channel/UCoXtmmnLCbXDiSo8GxsmOzA">La gata de Schrödinget</a> [ES]</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCMbQbVilo-nezMvwf1BZfAA">CienciaDeSofa</a> [ES]</li><li><a href="https://www.youtube.com/channel/UCGKDeE1qq3N9226-MHyO0wA">Raíz de Pi</a> [ES] Maths ;)</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span> <a href="https://www.youtube.com/channel/UCeiyuZljcK9iXzMAgzb9kpA">Hrom</a> [ES] Spanish MacGyver</li><li><a href="https://www.youtube.com/channel/UC6107grRI4m0o2-emgoDnAA">SmarterEveryDay</a> [EN] Very detailed videos about science topics.</li><li><a href="https://www.youtube.com/channel/UCibUX4QoSrRwmBZf0Ig-OCg">Deborahciencia</a> [ES] Chemistry</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span> <a href="https://www.youtube.com/channel/UC7DdEm33SyaTDtWYGO2CwdA">Physics Girl</a> [EN] Experiments, demonstrations, etc.</li><li><a href="https://www.youtube.com/user/Vsauce/videos">Vsauce</a> [EN]</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8">🔥</span> <a href="https://www.youtube.com/user/engineerguyvideo/videos">Engineerguy</a> [EN] This guy make videos talking about engineering processes, my favourite one <a href="https://www.youtube.com/watch?v=RMjtmsr3CqA">https://www.youtube.com/watch?v=RMjtmsr3CqA</a></li><li><a href="https://www.youtube.com/channel/UC6h-HID9dV2BAGSMy4_J84g">SizeMatters</a> [ES] Nanoscience using pixelart.</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8">🔥</span> <a href="https://www.youtube.com/channel/UCq3HgwV38l3WCHx8nyFtc6A">Carolina Jiménez G.</a> [ES] Cinema FX</li><li><a href="https://www.youtube.com/channel/UC52hytXteCKmuOzMViTK8_w">CdeCiencia</a> [ES] Weekly videos about scientific news</li><li><a href="https://www.youtube.com/channel/UCQX_MZRCaluNKxkywkLEgfA">Date un Vlog</a> [ES]</li><li><a href="https://www.youtube.com/channel/UCk195x4zYdMx4LhqEwhcPng">Instituto de física teórica</a> [ES]</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span> <a href="https://www.youtube.com/channel/UCm9K6rby98W8JigLoZOh6FQ">LockPickingLawyer</a> [EN] Lockpicking explained</li><li><a href="https://www.youtube.com/channel/UCoDZO0dHV8WKao3zjnfNzIQ/videos">Hablando en data</a> [ES] Data science</li></ul><h1 id="Music"><a href="#Music" class="headerlink" title="Music"></a>Music</h1><ul><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span> <a href="https://www.youtube.com/channel/UCa3DVlGH2_QhvwuWlPa6MDQ">Jaime Altozano</a> [ES] Talking about music</li></ul><h1 id="Animals"><a href="#Animals" class="headerlink" title="Animals"></a>Animals</h1><ul><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCvph04Sh9CFKAw-gA6y-brQ">I_am_puma</a> [RU]</li><li><a href="https://www.youtube.com/channel/UCRVruzlQF5cqpw9jQgIgNdw">Mugumogu</a> [ES/JP] Mara &amp; Hana cats</li><li><a href="https://www.youtube.com/channel/UCpLQXR116cLVUa1LRY8KS4w">OwlKitty</a> [EN] Cat and special effects</li><li><a href="https://www.youtube.com/channel/UCvmijL-eepDVHYSJHDY3d6w">Cole and Marmalade</a> [EN] Cats</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8">🔥</span> <a href="https://www.youtube.com/channel/UCPIvT-zcQl2H0vabdXJGcpg">The Pet Collective</a> [EN]</li><li><a href="https://www.youtube.com/channel/UCewve_DY_atXyU1wb9jWEBA">Hrzysztof Smejlis</a> [EN] Cats</li><li><a href="https://www.youtube.com/channel/UCsCFq6T-ut6mRvC5MlZmjkw">Sho Ko</a> [EN] Cats</li></ul><h1 id="Gaming"><a href="#Gaming" class="headerlink" title="Gaming"></a>Gaming</h1><ul><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCWktmlIWDDxOYSmV7gRV9gw">Buck Fernandex</a> [ES]</li><li><a href="https://www.youtube.com/channel/UCjuRnAVSiarRGOI8DA2oJtQ">Menos Trece</a> [ES]</li><li><a href="https://www.youtube.com/channel/UCHkh8YFg0l4tkY6_zvzdd5w">Luzugames</a> [ES]</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCFR2oaNj02WnXkOgLH0iqOA">Auron</a> [ES]</li><li><a href="https://www.youtube.com/channel/UCh715KhLM7vbOwozSXLWI_w">aLexBy11</a> [ES]</li><li><a href="https://www.youtube.com/channel/UCRl7gGf5iPTeVrzxx0jEWMA">Vicio ONE MORE TIME</a> [ES]</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8">🔥</span> <a href="https://www.youtube.com/channel/UCaY_-ksFSQtTGk0y1HA_3YQ">Ibai</a> [ES]</li><li><a href="https://www.youtube.com/channel/UCyGteX4xK-ZO7u9GMB8gKfA">Magma</a> [EN] Minecraft</li></ul><h1 id="Racing-Simracing-Cars"><a href="#Racing-Simracing-Cars" class="headerlink" title="Racing / Simracing / Cars"></a>Racing / Simracing / Cars</h1><ul><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8">🔥</span> <a href="https://www.youtube.com/channel/UC3gdaplfyzSr2YjHHwxRhPQ">Heikki360ES</a> [ES] This Youtuber make videos of his races on iRacing and other simracing games)</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCP92h2vCD3hw1xbNqIGY2RQ">Saul Lopez</a> [ES] Talks about Tesla, green energies, sustainable transport, etc.</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UC89aCe0fFyScFU-NegT2CFQ">Efeuno</a> [ES] Talks about F1 un deep and with a litle humor sense. Proudly creator of <a href="https://www.youtube.com/watch?v=V10SLqij2UM">Shittyflaute F1 theme</a> </li><li><a href="https://www.youtube.com/channel/UCT8u_uQZH4ddoQ00vjQfcgA">F1 Visualized</a> Show info about F1 races, times, etc using pixel art</li><li><a href="https://www.youtube.com/channel/UC7u-Dg0jb7g9s7XjmtJrtpg">Chain Bear</a> [EN/ES] Motorsport explained.</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCB_qr75-ydFVKSF9Dmo6izg">Formula 1</a> [EN] Oficial F1 channel. Race highlights, full races, radios, onboards, etc. </li><li><a href="https://www.youtube.com/channel/UCeymXIrIhMYFmCNIlwrl9Lw">Juan Francisco Calero</a> [ES]</li><li><a href="https://www.youtube.com/channel/UCwFIQ7wtJzYGFb2nZcVoNww">Lando Norris</a> [EN] McLaren F1 Driver channel</li></ul><h1 id="Humor-Entertainment"><a href="#Humor-Entertainment" class="headerlink" title="Humor / Entertainment"></a>Humor / Entertainment</h1><ul><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UC6lJZ9Ctx1vcmRY9cFEPyww">La Vida Moderna</a> [ES] Best humor channel ever.  </li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UC5hBvytNbuALxppbRJBluyg">La Lengua moderna</a> [ES]</li><li><a href="https://www.youtube.com/channel/UCvosUrZ7hXpzAyobhfztg4w">La Resistencia</a> [ES]</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UChN3MPAc_4Qa-xkM0ZQiVbg">Fortfast WTF</a> [ES] Interviews</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCPu5nstS7cbx_GUiH-kxwVw">Pantomima Full</a> [ES] Weekly videos about human contradictions.</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span> <a href="https://www.youtube.com/channel/UCyQqzYXQBUWgBTn4pw_fFSQ">AuronPlay</a> [ES]</li><li><a href="https://www.youtube.com/channel/UCcZBuBZ7Cp7skPRn87AY2Ew">Video Buck</a> [ES] Movies (new and old) reviews</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8">🔥</span> <a href="https://www.youtube.com/channel/UCexJCQ6fsxERAqKkuKrRP5w">Fácil Nejo</a> [ES] Movie reviews</li><li><a href="https://www.youtube.com/channel/UCffvdhj3nA0s2uN3NoWDQFA">Agujeros de guión</a> [ES] Movies and scripts reviews</li><li><a href="https://www.youtube.com/channel/UCpYBlwZQgSeFgbL9pI8jS3A">No te metas en política</a> [ES]</li><li><a href="https://www.youtube.com/channel/UCg9FVKnbCqfX-OuIFVgEZgw">FaceToFake</a> [ES] Humor using deepfakes</li><li><a href="https://www.youtube.com/channel/UC9suRmwQRSSBFOG7Mus1S_g">Vicisitud &amp; Sordidez</a> [ES]</li><li><a href="https://www.youtube.com/channel/UCAqznKuq5g6a0a8nRDXaXPA">Loulogio</a> [ES] Movies reviews, humor, etc</li><li><a href="https://www.youtube.com/user/simonscat">Simon’s Cat</a> [EN]</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8">🔥</span> <a href="https://www.youtube.com/channel/UCIpiHwdysY7hPHdV4CA_DQg">Aleix Saló</a> [ES]</li></ul><h1 id="Programming-Communities"><a href="#Programming-Communities" class="headerlink" title="Programming / Communities"></a>Programming / Communities</h1><ul><li><a href="https://www.youtube.com/channel/UC9DPKfcLiNd7SEU-QLlIG7A">A Industriosa</a> [ES/EN]</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span> <a href="https://www.youtube.com/channel/UC9IKtxn9AIGelnYmwYr0Lxw">CodelyTV</a> [ES]</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCmaEoq1zaakpdudbzgll-zw">Alva Majo</a> [ES] Very sarcastic indie game developer</li><li><a href="https://www.youtube.com/channel/UCGsVaz3QTFdspLqt79jIuPA">Guinxu</a> [ES] Indie game developer talking about game develop</li><li><a href="https://www.youtube.com/channel/UCQufRmIMRTLdRxTsXCh4-5w">Makigas</a> [ES]</li></ul><h1 id="Win-Fails-Zapping"><a href="#Win-Fails-Zapping" class="headerlink" title="Win / Fails / Zapping"></a>Win / Fails / Zapping</h1><ul><li><a href="https://www.youtube.com/user/Koreus/videos">Koreous</a> [FR/EN]</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCwbjxO5qQTMkSZVueqKwxuw">Cokaïn.fr</a> [FR/EN]</li><li><a href="https://www.youtube.com/channel/UCk_e9rhSH_Gg4Mp44Ut72ZQ">WinCompilation</a> [EN]</li><li><a href="https://www.youtube.com/user/failarmy/videos">FailArmy</a> [EN]</li><li><a href="https://www.youtube.com/channel/UCsVXjNRWJMyXViNLM2pyMfg">This is Happening</a> [EN]</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In 2018, I did a list of my &lt;a href=&quot;/2018/11/29/Mis-canales-favoritos-de-YouTube/&quot; title=&quot;favourite YouTube Channels&quot;&gt;favourite YouTube 
      
    
    </summary>
    
    
    
      <category term="youtube" scheme="https://sergiocarracedo.es/tags/youtube/"/>
    
  </entry>
  
  <entry>
    <title>Creating a simple donut progress chart</title>
    <link href="https://sergiocarracedo.es/2020/05/18/Creating-a-simple-donut-chart/"/>
    <id>https://sergiocarracedo.es/2020/05/18/Creating-a-simple-donut-chart/</id>
    <published>2020-05-18T09:28:03.000Z</published>
    <updated>2021-08-09T12:47:58.854Z</updated>
    
    <content type="html"><![CDATA[<p>One of more simpler charts you can create is a circular chart to represent the percent of completion of something.</p><h1 id="First-approximation"><a href="#First-approximation" class="headerlink" title="First approximation"></a>First approximation</h1><p>We could create a SVG document to draw our donut. SVG allow us to represent graphical elements, for example, cicles, rectangles, polygons, etc… using XML (and therefore accesing to the elements via DOM). SVG is vertorial and is perfect for responsive.</p><p align="center"><img src="/images/donut-chart/01.svg" class="photoswipe"></p><p>Figure 1 represent that kind of chart, if the value is 100% the donut is perfect, if is 50% donut is a half donut, and 0% means no donut.</p><p>As you can see in the figure 2 this chart is the addition of 3 elements: 1 circle with the colors, a smaller circle to create the illusion of the void center, and a triangle to create the illusion of the missing part of the donut to be completed (If the completion value if less than 50% you will need to add a rect to hide half of circles).</p><p>This approximation has an issue, the small circle and triangle have a color if your background has different color or is a non-solid background color, this approximation fails (figure 3)</p><h1 id="Second-approximation"><a href="#Second-approximation" class="headerlink" title="Second approximation"></a>Second approximation</h1><p>To avoid the non solid background color, problem, you could use <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/clipPath">SVG Clip Path</a> that limits the part of the element (or group of elements) are visible. In this case you should use the smaller circle and the triangle as clip path of the bigger circle.</p><p><em>Problem solved!</em></p><p>Wait, calculations necessary to draw the clip path can be complex, there are a simple way to draw a donut.</p><h1 id="Using-Stroke"><a href="#Using-Stroke" class="headerlink" title="Using Stroke"></a>Using Stroke</h1><p>We were drawing the donuts as the difference between to circles, the donut’s width was the radius difference (R1 - R2) are there another way to draw a donut? <strong>Yes, a fat stroke circumference.</strong></p><iframe src="https://codesandbox.io/s/interesting-field-ix2b6?fontsize=14&amp;hidenavigation=1&amp;initialpath=%23/simple-donut&amp;module=/src/views/SimpleDonut.vue&amp;theme=dark" width="100%" height="600px" frameborder="0" loading="lazy" allowfullscreen=""></iframe><p>Oh, our donut is drawing partially outside SVG element and is cropped. That is because the stroke grows from the center of the line, if the stroke is 10px, 5px will be drawn in a side of the line and other 5px in the other side. So we need to subtract the half of donut width of our circumference radius, and instead of using the radius we will use the svg size (in the case the diameter)</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">radius = size / <span class="number">2</span> - width / <span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><iframe src="https://codesandbox.io/s/interesting-field-ix2b6?fontsize=14&amp;hidenavigation=1&amp;initialpath=%23/simple-donut-2&amp;module=/src/views/SimpleDonut02.vue&amp;theme=dark" width="100%" height="600px" frameborder="0" loading="lazy" allowfullscreen=""></iframe><p>Cool! We have our donut, now we must remove part of it to represent the percent. Instead of use clip path we will use <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray">stroke-dasharray</a> attribute. This attribute allows us to define how is drawn the stroke, for example <code>stroke-dasharray="1 1"</code> means line will draw 1px solid and 1px transparent (in this context px is not a screen pixel, is a pixel in the SVG viewbox context). So we could use this behavior to draw a number of pixels and leave the rest transparent. We should calculate the numbers.</p><p>First we need to know what is the circle length, this is basic math: 2πR</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const circumferenceLength = 2 * Math.PI * radius</span><br></pre></td></tr></tbody></table></figure><p>Then the solid part is <code>circumferenceLength * percent / 100</code> and the transparent is <code>circumferenceLength * (100 - percent) / 100</code>, and this is the result.</p><iframe src="https://codesandbox.io/s/interesting-field-ix2b6?fontsize=14&amp;hidenavigation=1&amp;initialpath=%23/simple-donut-3&amp;module=/src/views/SimpleDonut03.vue&amp;theme=dark" width="100%" height="600px" frameborder="0" loading="lazy" allowfullscreen=""></iframe><p>Using this technique we could create a component with the properties: width, color, size, percent and we can create easy progress circle charts, absolutely responsive.</p><p>Also, you can animate the dash array to make a fluid change when value changes, or add a text label to show the value, or anything you can imagine.</p><p>Thanks for reading I hope you like it!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;One of more simpler charts you can create is a circular chart to represent the percent of completion of something.&lt;/p&gt;
&lt;h1 id=&quot;First-appr
      
    
    </summary>
    
    
    
      <category term="js, vue, donut, charts, data visualization" scheme="https://sergiocarracedo.es/tags/js-vue-donut-charts-data-visualization/"/>
    
  </entry>
  
</feed>

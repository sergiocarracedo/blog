<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sergio Carracedo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sergiocarracedo.es/"/>
  <updated>2020-10-18T12:55:49.874Z</updated>
  <id>https://sergiocarracedo.es/</id>
  
  <author>
    <name>Sergio Carracedo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Creating your own Vue UI components library: From scratch to NPM</title>
    <link href="https://sergiocarracedo.es/2020/creating-your-own-vue-ui-components-library-from-scratch-to-npm/"/>
    <id>https://sergiocarracedo.es/2020/creating-your-own-vue-ui-components-library-from-scratch-to-npm/</id>
    <published>2020-10-19T00:00:00.000Z</published>
    <updated>2020-10-18T12:55:49.874Z</updated>
    
    <content type="html"><![CDATA[<p>Past September 29th I did a talk about how to create your own Vue UI components.</p><p>I explained some tips about how to organize the components’ code, talked in deep about how to set the values in <code>package.json</code> and their meaning. And how to publish on NPM and then how to use them in another project.</p><p>The talk was in Spanish, but slides are in English.</p><div class="video-container"><iframe src="https://www.youtube.com/embed/z_K5iuSjCDo" frameborder="0" loading="lazy" allowfullscreen=""></iframe></div><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vS9j4GjB2eZrnGI9b47FbecBunSSa_zYPJJsNu2mcJ_uux4CbisJOdG6vaFXB9rPTiPnv4N_KeXlLPl/embed?start=false&amp;loop=false&amp;delayms=5000" width="100%" height="600" frameborder="0" loading="lazy" allowfullscreen=""></iframe><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Past September 29th I did a talk about how to create your own Vue UI components.&lt;/p&gt;
&lt;p&gt;I explained some tips about how to organize the c
      
    
    </summary>
    
    
    
      <category term="vue" scheme="https://sergiocarracedo.es/tags/vue/"/>
    
      <category term="npm" scheme="https://sergiocarracedo.es/tags/npm/"/>
    
      <category term="components" scheme="https://sergiocarracedo.es/tags/components/"/>
    
  </entry>
  
  <entry>
    <title>Automate the startup of your projects with yarn create and SAOjs</title>
    <link href="https://sergiocarracedo.es/2020/automatize-node-project-creation/"/>
    <id>https://sergiocarracedo.es/2020/automatize-node-project-creation/</id>
    <published>2020-09-22T00:00:00.000Z</published>
    <updated>2020-10-18T12:55:49.874Z</updated>
    
    <content type="html"><![CDATA[<p>Start a project in any language, framework, etc it’s not as simple as it seems. I mean, usually, the project requires a lot of configuration files, installing dependencies, set the environment, create skeleton files, etc.</p><p>Talking about JavaScript frameworks: everyone has his own CLI tool to start a project with the required files to start to code.</p><p>For example <strong>Angular</strong> has <a href="https://cli.angular.io/">@angular/cli</a> and you could execute <code>ng new [app-name]</code>or<br><strong>Vue</strong> has <a href="https://cli.vuejs.org/">@vue/cli</a> and you can start a Vue project executing <code>vue create [project name]</code>.</p><p>This is nice, but usually, the default config is not complaining your development’s requisites you still must editing the config files to set up the project according to your needs, for example, change <code>tsconfig.json</code> configuration, more <em>advanced</em>, you would like to add some code in router file or you would like to create a folder structure for the store, or anything.</p><p>Do all those tasks every time you start a project is boring and spend time.</p><p>In the background, these CLI tools are using a skeleton repo or similar to prepare your project, but thinking in a generic use case.</p><p>So we can do the same but adapting this use case to our use case.</p><h2 id="yarn-create-or-npx-create"><a href="#yarn-create-or-npx-create" class="headerlink" title="yarn create (or npx create)"></a><code>yarn create</code> (or <code>npx create</code>)</h2><p><a href="https://yarnpkg.com/">Yarn</a> is a node package manager with vitamins, and provides the command <code>create</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn create [my-starter-kit]</span><br></pre></td></tr></tbody></table></figure><p>You only need to have installed <code>yarn</code>, nothing else. This command gets from your <em>npm registry</em> a package named <code>create-</code> + the name you use in the command, in our example tries to get the package <code>create-my-starter-kit</code></p><p>Then, yarn reads the <code>package.json</code> file of the package, installs the dependencies, and run the command in the <code>bin</code> entry</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">{</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"create-my-starter-kit"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,  </span><br><span class="line">  <span class="attr">"bin"</span>: <span class="string">"lib/cli.js"</span>,</span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong><code>yarn create</code> won’t do anything else</strong></p><p>You must create the next steps, but, think about it, the user (you, a teammate, a user of an open-source project) only need yarn as a dependency.</p><p>In your <code>cli.js</code> you can do things to prepare the development environment by yourself. But, let’s see how to simplify all these tasks.</p><h2 id="SAOjs"><a href="#SAOjs" class="headerlink" title="SAOjs"></a>SAOjs</h2><p><a href="https://saojs.org/">SAO</a> describes itself as a <em>Futuristic scaffolding tool</em>. and it’s inspired in <a href="https://yeoman.io/">Yeoman</a></p><p>These tools allow you to ask the user who runs your <em>create-app</em> questions that you could use to make decisions to install or configure different elements.</p><p>You must create the file <code>saofile.js</code>, and this file must export this elements:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  templateData: ...,</span><br><span class="line">  prompts: ...,</span><br><span class="line">  actions: ...,</span><br><span class="line">  prepare: ...,</span><br><span class="line">  subGenerators: ...,</span><br><span class="line">  completed: ...</span><br><span class="line">}</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## Prompts</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Let's talk about `</span>prompts<span class="string">`. That must return an array of questions to want to do to the user, for example</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">  prompts: [</span><br><span class="line">    {</span><br><span class="line">      type: <span class="string">'input'</span>,</span><br><span class="line">      name: <span class="string">'projectName'</span>,</span><br><span class="line">      message: <span class="string">'What is your project name?'</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      type: <span class="string">'list'</span>,</span><br><span class="line">      name: <span class="string">'packageManager'</span>,</span><br><span class="line">      message: <span class="string">'Your favourite package manager'</span>,</span><br><span class="line">      choices: [<span class="string">'yarn'</span>, <span class="string">'npm'</span>]</span><br><span class="line">    }</span><br><span class="line">  ]</span><br></pre></td></tr></tbody></table></figure><p>When you run SAO (we’ll see how to do soon), it’ll ask the user the questions.</p><p>The “prompts” system is very useful, you can ask questions only if a previous question is has some value, etc.</p><p>You can also save some answers as preset for the next projects (Like Vue CLI does)</p><p><a href="https://v1.saojs.org/saofile.html#prompts">More information about prompts</a></p><h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h2><p>The other important key in the saofile’s object is the actions. They define the actions to do. The important thing is that the actions can be conditioned by the user answers.</p><h3 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h3><p>You can copy files from a <code>templateDir</code> (in your create package) to the target (the project to create). That’s that we needed ;) </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  type: <span class="string">'add'</span>,</span><br><span class="line">  files: <span class="string">'**'</span>, </span><br><span class="line">  templateDir: <span class="string">'/template'</span>,</span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>You could even filter the files to add depending on the user’s answers<br><a href="https://v1.saojs.org/saofile.html#type-add">More info</a></p><h3 id="Move"><a href="#Move" class="headerlink" title="Move"></a>Move</h3><p>Moves files in the target (the project to create)</p><h3 id="Modify"><a href="#Modify" class="headerlink" title="Modify"></a>Modify</h3><p>Modify files in the target (the project to create), that is very interesting too, for example, for updating config files according to what the user answered</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> packageName = <span class="built_in">this</span>.packageName</span><br><span class="line">{</span><br><span class="line">  type: <span class="string">'modify'</span>,</span><br><span class="line">  files: <span class="string">'package.json'</span>,</span><br><span class="line">  handler: (data) {</span><br><span class="line">    data.name = packageName</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>In the example, we changed the project name in the <code>package.json</code> according to the user’s previous answers.</p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>Delete files in the target.</p><h2 id="Running-SAO"><a href="#Running-SAO" class="headerlink" title="Running SAO"></a>Running SAO</h2><p>You can run SAO from command line or from your <code>cli.js</code> file:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sao({...customVariables})</span><br><span class="line">  .run()</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.trace(err)</span><br><span class="line">    process.exit(<span class="number">1</span>)</span><br><span class="line">  })</span><br></pre></td></tr></tbody></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Probably you worked before with something similar, every time you have been created a project with Vue CLI, Nuxt, React, etc. </p><p>That is a shallow introduction to all the SAO functionalities, but as you can see the possibilities to customize your project creation are high. </p><p>You could create a template with the config files you use habitually and store the creation script in NPM.js, in a private registry, and every time you create a project, invoke <code>yarn create my-project-scaffolding</code> and start to code without the need of prepare manually the config files or miss some dependency.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Start a project in any language, framework, etc it’s not as simple as it seems. I mean, usually, the project requires a lot of configurat
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>How Vue&#39;s reactivity works (I): Object.defineProperty</title>
    <link href="https://sergiocarracedo.es/how-vue-reactivity-works-i/"/>
    <id>https://sergiocarracedo.es/how-vue-reactivity-works-i/</id>
    <published>2020-09-08T00:00:00.000Z</published>
    <updated>2020-10-18T12:55:49.874Z</updated>
    
    <content type="html"><![CDATA[<p>Maybe you don’t need to know how Vue reactivity works under the hood to make Vue apps, but anyway it will be interesting and useful.</p><p>In this context <strong>reactivity</strong>, means, simplifying, the capacity to detect a data change and do something after that. </p><p>In a Vue component, <strong>reactivity</strong>, means that the component will be re-rendered (totally or partially) after a change in the value of a variable to show the component updated with the new value. For example in this basic component:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h6</span>&gt;</span>Value: {{ clickCount }}<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"onClick"</span>&gt;</span>Add 1 more<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line">  data () {</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {</span></span><br><span class="line">      clickCount: 1</span><br><span class="line">     }</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    onClick () {</span><br><span class="line"><span class="javascript">     <span class="built_in">this</span>.clickCount = <span class="built_in">this</span>.clickCount + <span class="number">1</span></span></span><br><span class="line">    } </span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>Every time you click on the “Add 1 more” button, the value of <em>clickCount</em> variable is increased in one unit and Vue starts the <em>mechanism</em> to re-render the component showing the new value in the template. How is Vue able to know when a variable changes its value?</p><h2 id="Object-defineProperty-API"><a href="#Object-defineProperty-API" class="headerlink" title="Object.defineProperty API"></a><em>Object.defineProperty</em> API</h2><p>The answer is <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"><em>Object.defineProperty</em></a></p><p>This is a static method that defines or modify a property on an object</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObject = {}</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(myObject, <span class="string">'myProperty'</span>, {</span><br><span class="line">  value: <span class="string">'myValue'</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>Probably you realized that is the same as <code>myObject.myProperty = 'myValue'</code>, but there an important difference: we can configure the property behaviour, for example:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObject = {}</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(myObject, <span class="string">'myProperty'</span>, {</span><br><span class="line">  value: <span class="string">'myValue'</span>,</span><br><span class="line">  writable: <span class="literal">false</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">myObject.myProperty = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myObject.myProperty) <span class="comment">// 'myValue'</span></span><br></pre></td></tr></tbody></table></figure><p>In this situation, if you try to change the value of the property, it will not change, and if you are using <em>strict mode</em> you will get an exception.</p><p>With <code>Object.defineProperty</code> you could define a getter and setter for the object property as shown in the following example. Every time you try to assign a value to your property getter is called.</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObject = {}</span><br><span class="line"><span class="keyword">let</span> myProperyValue = <span class="string">'my value'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(myObject, <span class="string">'myProperty'</span>, {</span><br><span class="line">  get: <span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'getter'</span>)</span><br><span class="line">    <span class="keyword">return</span> myProperyValue</span><br><span class="line">  },</span><br><span class="line">  set: <span class="function">(<span class="params">newValue</span>) =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setter'</span>)</span><br><span class="line">    myProperyValue = newValue</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">myObject.myProperty = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myObject.myProperty)</span><br><span class="line"><span class="comment">// setter</span></span><br><span class="line"><span class="comment">// getter</span></span><br><span class="line"><span class="comment">// 123</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://playcode.io/666482">Run in PlayCode</a> </p><p>Note that if you use a getter or a setter you can’t access to the property’s value directly, I mean, you have to store property’s value somewhere else <em>place</em>.</p><p>Back in Vue, when you create a component you should define reactive values in <code>data</code> key</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  data () {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      clickCount: <span class="number">1</span></span><br><span class="line">     }</span><br><span class="line">  },</span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Under the hood, Vue creates an object with the properties you defined using <em>Object.defineProperty</em> and generates a getter and a setter. Every time a variable’s value changes, the setter intercepts the change and launches Vue’s re-render process with the new value.</p><p>This is the reason why you cannot add new variables to your component directly</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  data () {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      clickCount: <span class="number">1</span>      </span><br><span class="line">     }</span><br><span class="line">  },</span><br><span class="line">  ...</span><br><span class="line">  methods: {</span><br><span class="line">    someMethod () {</span><br><span class="line">      <span class="built_in">this</span>.newClickCount = <span class="number">1</span></span><br><span class="line">      ...</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>In the example above, <code>newClickCount</code> will not be reactive because Vue can’t know when you add a new property directly.</p><p>If you need to add a new property after the component’s definition Vue provides <code>Vue.set</code> or <code>vm.$set</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$set(<span class="built_in">this</span>.someObject, <span class="string">'b'</span>, <span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><p>But this not work with the root element, I mean we cannot add a new variable to <code>data</code></p><p><em>Object.defineProperty</em> works since IE9, and in all modern browsers <a href="https://caniuse.com/?search=DefineProperty">https://caniuse.com/?search=DefineProperty</a></p><h2 id="How-does-it-for-arrays"><a href="#How-does-it-for-arrays" class="headerlink" title="How does it for arrays?"></a>How does it for arrays?</h2><p>It doesn’t!. If you try to repeat the previous example with an array property:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObject = {}</span><br><span class="line"><span class="keyword">let</span> myProperyValue = []</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(myObject, <span class="string">'myProperty'</span>, {</span><br><span class="line">  get: <span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'getter'</span>)</span><br><span class="line">    <span class="keyword">return</span> myProperyValue</span><br><span class="line">  },</span><br><span class="line">  set: <span class="function">(<span class="params">newValue</span>) =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setter'</span>)</span><br><span class="line">    myProperyValue = newValue</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">myObject.myProperty = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myObject.myProperty)</span><br><span class="line"><span class="comment">// setter</span></span><br><span class="line"><span class="comment">// getter</span></span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">setter works because, is a direct assignation, but we usually don't work with arrays in that way, we use `</span>.push<span class="string">`, `</span>slice<span class="string">`, etc..</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">myObject.myProperty.push(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myObject.myProperty)</span><br><span class="line"><span class="comment">// getter</span></span><br><span class="line"><span class="comment">// getter</span></span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://playcode.io/666496">Run in PlayCode</a></p><p>We can see getter has been called twice, but the setter has not been called</p><h3 id="How-does-Vue-resolve-it"><a href="#How-does-Vue-resolve-it" class="headerlink" title="How does Vue resolve it?"></a>How does Vue resolve it?</h3><p>Simple, patching vanilla JS array methods </p><p>Vue stores the original method, and create a new that notifies the change and execute the original method</p><p>You can see how it does in detail on:<br><a href="https://github.com/vuejs/vue/blob/bb253db0b3e17124b6d1fe93fbf2db35470a1347/packages/vue-template-compiler/build.js#L1087">https://github.com/vuejs/vue/blob/bb253db0b3e17124b6d1fe93fbf2db35470a1347/packages/vue-template-compiler/build.js#L1087</a></p><h2 id="ES6-Proxies"><a href="#ES6-Proxies" class="headerlink" title="ES6 Proxies"></a>ES6 Proxies</h2><p>There is another way to know when a value change (and other things) in JS since ES6: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxies</a></p><p>Vue 3 uses <em>Proxies</em> instead of <em>Object.defineProperty</em> to make the reactivity under the hood. I will write a post about Proxies soon.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Maybe you don’t need to know how Vue reactivity works under the hood to make Vue apps, but anyway it will be interesting and useful.&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="vue" scheme="https://sergiocarracedo.es/tags/vue/"/>
    
      <category term="reactivity" scheme="https://sergiocarracedo.es/tags/reactivity/"/>
    
      <category term="javascript" scheme="https://sergiocarracedo.es/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Is know how to search on Google a skill?</title>
    <link href="https://sergiocarracedo.es/is-search-in-google-a-skill/"/>
    <id>https://sergiocarracedo.es/is-search-in-google-a-skill/</id>
    <published>2020-08-31T09:00:00.000Z</published>
    <updated>2020-10-18T12:55:49.874Z</updated>
    
    <content type="html"><![CDATA[<p>Most of us do search on Google every day, maybe looking for a website, for news, for an address, for a cooking recipe, for information about a topic we are interested in, for technical information or anything.</p><p>All developers I know use Google, another search engine, or search on webpages like <a href="https://stackoverflow.com/">stack overflow</a> every day to find the best way to do a task.</p><p>So is it a skill?, Should you know how to resolve a task without using Google or another knowledge source?</p><p>I don’t think so, part of our skill should be know how to find information about the task. This has been done for centuries, we have just updated (added) the knowledge sources, in the past, sources were physical books, oral knowledge, etc. But now we have these sources and more, like online sources, and Google and other search engines are the way to reach the knowledge we need at some point.</p><p>Imagine you have the task of creating something like this:</p><p align="center"><img src="/images/wordcloud.svg" class="photoswipe"></p><p>Do you know how to do that? If you do, nice, lucky you, but I don’t know how to do it.</p><p>I guess the next step is to search for how to do it, but, what’s this thing name? If you don’t know it, you need to find the name of the “thing” you should develop.</p><p>How do you do it? In that case (we will suppose that you have this image as a task’s reference) I guess a good idea could be use <a href="https://www.google.es/imghp">Google Image Search</a>. </p><p>If we upload that image, Google interprets the image as a circle. WTF? Perhaps is because it reads the words in the image and believes they are circle’s attributes. Who knows ¯\<em>(ツ)</em>/¯</p><p align="center"><img src="/images/google-skill/googleImageSearch.png" class="photoswipe" width="600"></p><p>So in a rapid view, Google doesn’t return relevant information about the name of this thing.</p><p>But if you look closely the “Visually similar images” section, most of them are beautiful images with similar colors, but the third one is similar to our image: It has words too, and if you look even closer, the title of the image is <strong>WordMap</strong> </p><p align="center"><img src="/images/google-skill/googleImageSearchDetail.png" class="photoswipe" width="800"></p><p>I will not go into detail, but, it’s easy to find the relation with the term <strong>Word Cloud</strong> that is the “thing” we must create, and we could search for the theory and maths behind that, find a library which does the task or create from the scratch and finally do our task.</p><p>You will probably agree that use others’ experience it part of the developer’s job (is part of any job), we are doing it all the time, and find the way to reach that experience and knowledge I guess is a skill. </p><p>I think employers should appreciate it as another skill, perhaps it’s just a soft skill, but if your employee hasn’t it, she/he could spend a lot of time just trying to know how to find the way to do some task or find information and knowledge. </p><p>Some people even consider that know how to search on Google <a href="https://medium.com/how-i-learned-ruby-rails/why-googling-is-the-most-important-skill-a-developer-must-have-d69b89b22218">is the most important skill a developer must have</a>. I would not dare to say that, but I think is an important skill.</p><p>What do you think? Should be a soft or a hard skill?</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Most of us do search on Google every day, maybe looking for a website, for news, for an address, for a cooking recipe, for information ab
      
    
    </summary>
    
    
    
      <category term="google" scheme="https://sergiocarracedo.es/tags/google/"/>
    
      <category term="search" scheme="https://sergiocarracedo.es/tags/search/"/>
    
  </entry>
  
  <entry>
    <title>What is VuePress and why you should use it to document your project?</title>
    <link href="https://sergiocarracedo.es/vuepress/"/>
    <id>https://sergiocarracedo.es/vuepress/</id>
    <published>2020-08-22T00:00:00.000Z</published>
    <updated>2020-10-18T12:55:49.874Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://vuepress.vuejs.org/">VuePress</a> defines itself as a <em>Vue-powered Static Site Generator</em>. In other words, is a tool to create static sites. A static site is a website where nothing runs on the server. The server only takes care of return the file (HTML file) as is stored in the server.</p><p>Is the opposite of a <strong>dynamic site</strong>, like for example a PHP webpage, in that case, your browser makes a request to the server, and the server executes PHP code that, for example, get a post from a database, process it, put that post in an HTML template, etc and returns the result to the browser.</p><h4 id="What’s-better-dynamic-or-static"><a href="#What’s-better-dynamic-or-static" class="headerlink" title="What’s better dynamic or static?"></a>What’s better dynamic or static?</h4><p>This is not the goal of this blog post, but I will say: ‘It depends’. There is no “magic” answer: the best type depends on the use case.</p><h2 id="What-does-VuePress"><a href="#What-does-VuePress" class="headerlink" title="What does VuePress?"></a>What does VuePress?</h2><p>With VuePress you can create content in <em>markdown</em> files and when you generate the website every markdown file will be converted to an HTML page.</p><p>VuePress also provides you other content-relates features:</p><ul><li>Menus</li><li>Search box (yes, works even as static website)</li><li>Markdown extensions (that will make your life easier)</li><li>etc.</li></ul><p>We will come back to these elements in a moment, but first, we will learn how to start a VuePress website</p><h2 id="Creating-a-VuePress-website"><a href="#Creating-a-VuePress-website" class="headerlink" title="Creating a VuePress website"></a>Creating a VuePress website</h2><p>It’s very easy, just:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn create vuepress [project-name]</span><br><span class="line"><span class="built_in">cd</span> [project-name]</span><br></pre></td></tr></tbody></table></figure><p>And then, to start the dev server <code>yarn docs:dev</code>.</p><p>(This command starts a local dev server, by default, on <code>http://localhost:8080</code></p><p>At this point, you can create content just creating markdown files in <code>docs</code> folder</p><p>If you create a file named <code>my-content.md</code> you could access it in <code>http://localhost:8080/my-content.html</code></p><p>(If you want to serve a default page a.k.a <code>http://localhost:8080/</code> the filename should be `README.md)</p><p>You also could create folders in <code>docs/</code> and folder name will be in the URL of that content. For example: <code>docs/blog/README.md</code> will be served at <code>http://localhost:8080/blog/</code></p><h2 id="Markdown-extensions"><a href="#Markdown-extensions" class="headerlink" title="Markdown extensions"></a>Markdown extensions</h2><p>VuePress provides markdown extensions add more features than “standard” markdown provides.</p><p>For example: </p><ul><li>Write Github-styled tables: You can create tables in markdown just writing something like:<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| Col 1        | Col 2           | Col 3  |</span><br><span class="line">| ------------- |:-------------:| -----:|</span><br><span class="line">| Content col 1 | Content col 2 | 1234 |</span><br></pre></td></tr></tbody></table></figure></li><li>Frontmatter support: <a href="https://vuepress.vuejs.org/guide/frontmatter.html">Frontmatter</a> is a way to add YAML content in a markdown file, to set content metadata, for example, the title, the language, etc )</li><li>Emoji support: <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span> Nothing more to say</li><li>ToC (Table of contents): A very useful extension, you only need to add <code>[[toc]]</code> in your markdown, and it will be rendered as a table of contents (a tree of document headings)</li><li>Vue components: You can add Vue components directly in the markdown. That is very useful for main the VuePress’s use. </li></ul><p>Go to <a href="https://vuepress.vuejs.org/guide/markdown.html">https://vuepress.vuejs.org/guide/markdown.html</a> for further information</p><h2 id="VuePress-as-documentation-generator"><a href="#VuePress-as-documentation-generator" class="headerlink" title="VuePress as documentation generator"></a>VuePress as documentation generator</h2><p>Applications and uses are infinite, but VuePress is a very simple but powerful tool to create technical documentation.</p><p>Most of Vue ecosystem uses VuePress to create their documentation websites: <a href="https://vuejs.org/">Vue.js</a>, <a href="https://vuex.vuejs.org/">Vuex</a>, <a href="https://vue-apollo.netlify.app/">Vue Apollo</a>, <a href="https://portal-vue.linusb.org/">Portal Vue</a>, <a href="https://vue-chartjs.org/">Vue ChartJs</a>, etc….</p><p>I think this simplicity makes easy the task of creating your project documentation.</p><h2 id="Using-in-an-existing-project"><a href="#Using-in-an-existing-project" class="headerlink" title="Using in an existing project"></a>Using in an existing project</h2><p>I think is a good idea to keep your project and its documentation together, and with VuePress is possible to do it.</p><p>In your project, you only need to add Vuepress as <em>development dependency</em>, that’s all</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vuepress -D </span><br></pre></td></tr></tbody></table></figure><p>And edit your <code>package.json</code> to add the following items in the scripts section to start dev server and build documentation.</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  "scripts": {</span><br><span class="line">    ...</span><br><span class="line">    "docs:dev": "vuepress dev docs",</span><br><span class="line">    "docs:build": "export NODE_ENV=production &amp;&amp; vuepress build docs"</span><br><span class="line">  },</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><h2 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages"></a>Advantages</h2><ul><li>Keep the documentation together with the code makes it easier for developers to read the project documentation and update it, because it is near to the code.</li><li>As documentation is markdown, you can still be reading it even without use VuePress, for example in your IDE or in GitHub.</li><li>You could insert your project’s Vue components in the documentation to create a “playground”, for example, to demonstrate how your component change if you change some property. Like Buefy does in its <a href="https://buefy.org/documentation/pagination">documentation</a></li><li>VuePress is themable and highly configurable, you can do advanced things, but you can start to write and serve docs in a few minutes.</li></ul><h2 id="Other-VuePress-uses"><a href="#Other-VuePress-uses" class="headerlink" title="Other VuePress uses"></a>Other VuePress uses</h2><p>Create technical documentation website isn’t the only VuePress use case, you could use VuePress to create a blog <a href="https://ulivz.com/">Example</a>, or a simple webpage but, unless it is something very simple, i think VuePress is not the best tool.</p><h2 id="VitePress"><a href="#VitePress" class="headerlink" title="VitePress"></a>VitePress</h2><p>At this moment, Evan You, VuePress and Vue.js creator is working on <a href="https://github.com/vitejs/vite">Vite</a>, a build tool that uses native ES Module imports and promises be very fast, and over Vite is creating too <a href="https://github.com/vuejs/vitepress">VitePress</a>, a VuePress brother built on top of Vite, that will have some improvements over VuePress, to highlight Vue 3 usage and faster dev server and build and with lighter page weight.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>If you need to serve your project documentation <strong>VuePress</strong> is a good option to do that.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://vuepress.vuejs.org/&quot;&gt;VuePress&lt;/a&gt; defines itself as a &lt;em&gt;Vue-powered Static Site Generator&lt;/em&gt;. In other words, is a t
      
    
    </summary>
    
    
    
      <category term="vue" scheme="https://sergiocarracedo.es/tags/vue/"/>
    
      <category term="vuepress" scheme="https://sergiocarracedo.es/tags/vuepress/"/>
    
      <category term="markdown" scheme="https://sergiocarracedo.es/tags/markdown/"/>
    
      <category term="documentation" scheme="https://sergiocarracedo.es/tags/documentation/"/>
    
  </entry>
  
  <entry>
    <title>Export and import Vuex state</title>
    <link href="https://sergiocarracedo.es/2020/07/22/export-and-import-vuex-state/"/>
    <id>https://sergiocarracedo.es/2020/07/22/export-and-import-vuex-state/</id>
    <published>2020-07-22T00:00:00.000Z</published>
    <updated>2020-10-18T12:55:49.874Z</updated>
    
    <content type="html"><![CDATA[<p>If you are familiarized with Vuex, you must know that Vuex is a <a href="https://vuex.vuejs.org/#what-is-vuex">state management pattern library</a> for Vue applications. Vuex centralizes the application’s state and how components, and other code parts, change it.</p><p>You can find a lot of articles talking about Vuex, I even wrote 2 articles 3 year ago talking about it: <a href="/2017/04/03/vuex-el-redux-de-vuejs-i/" title="Vuex el redux de VueJS I">Vuex el redux de VueJS I</a> <a href="/2017/04/03/vuex-el-redux-de-vuejs-i/" title="Vuex el redux de VueJS II">Vuex el redux de VueJS II</a> (<em>Spanish</em>)</p><p>But today I will write about an edge case related to <strong>vuex</strong>, as you could read in the title, about how to export and import Vuex state.</p><p>Is a very easy process, and is not necessary for most of the applications, but I think is useful to know how to do it.</p><h3 id="Export"><a href="#Export" class="headerlink" title="Export"></a>Export</h3><p>Export is very simple, you only need to get the state, for example from a component</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> savedState = <span class="built_in">this</span>.$store.state</span><br></pre></td></tr></tbody></table></figure><p>And <em>voilà</em> you have the store state, you could save in Local Storage to keep the state even if the user closes or reloads browser’s tab. Really you don’t need to write code for that, exists an awesome library that does that: <a href="https://github.com/robinvdvleuten/vuex-persistedstate">vuex-persistedstate</a></p><h2 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h2><p>You can think that import the state is similar to export:<br><del>this.$store.state = savedState</del><br>If you try, you will get an Exception</p><blockquote><p>Uncaught Error: [vuex] use store.replaceState() to explicit replace store state.</p></blockquote><p>And if you read carefully, the exception message gives to you the solution: Use <a href="https://vuex.vuejs.org/api/#replacestate"><code>store.replaceState()</code></a></p><p>This store method replaces all the store state (the root state). For example, Vue Dev Tools uses it to do the <em>time travels</em>.</p><h2 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h2><p>I can think of a few applications for this, as I mentioned before, save the state to Local Storage, or export and save state to a JSON file to save your application settings, etc…</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you are familiarized with Vuex, you must know that Vuex is a &lt;a href=&quot;https://vuex.vuejs.org/#what-is-vuex&quot;&gt;state management pattern l
      
    
    </summary>
    
    
    
      <category term="vue" scheme="https://sergiocarracedo.es/tags/vue/"/>
    
      <category term="js" scheme="https://sergiocarracedo.es/tags/js/"/>
    
      <category term="store" scheme="https://sergiocarracedo.es/tags/store/"/>
    
  </entry>
  
  <entry>
    <title>Sharing variables between SCSS and Typescript</title>
    <link href="https://sergiocarracedo.es/2020/07/17/sharing-variables-between-scss-and-typescript/"/>
    <id>https://sergiocarracedo.es/2020/07/17/sharing-variables-between-scss-and-typescript/</id>
    <published>2020-07-17T00:00:00.000Z</published>
    <updated>2020-10-18T12:55:49.874Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes you need to share variables between CSS (or SCSS) and Typescript, for example, if you have a list of colors in your SCSS file and need to check the variable names in typescript to be sure is an available color.</p><p>Imagine a Vue component have a property to set the background color: </p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"['component', colorClass]"</span>&gt;</span></span><br><span class="line">    My component</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> availableColors = [<span class="string">'primary'</span>, <span class="string">'alert'</span>, <span class="string">'my-custom-color'</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'my-component'</span>,</span></span><br><span class="line">  props: {</span><br><span class="line"><span class="javascript">    color: <span class="built_in">String</span></span></span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    colorClass () { </span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (availableColors.indexOf(<span class="built_in">this</span>.color) !== <span class="number">-1</span>) {</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="string">`color-<span class="subst">${<span class="built_in">this</span>.color}</span>`</span></span></span><br><span class="line">      } </span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">null</span></span></span><br><span class="line">    }   </span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>In this component, if you set the property color, and the value is an available color, adds a class for that color, for example, if the color prop is <code>primary</code> adds the class <code>.color-primary</code>, but if the prop’s value is <code>red</code> doesn’t add any class related to color because <code>red</code> is not an available color.</p><p>Bearing in mind that, we probably have a <em>scss</em> file where we define that classes, something like:</p><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$primary</span>: <span class="number">#333</span>;</span><br><span class="line"><span class="variable">$alert</span>: <span class="number">#900</span>;</span><br><span class="line"><span class="variable">$custom</span>: <span class="number">#090</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.color-primary</span> {</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$primary</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.color-alert</span> {</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$alert</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.color-custom</span> {</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$custom</span>;</span><br><span class="line">}</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">We could improve this file to generate the classes programmaticaly using the power of SCSS:</span><br><span class="line"></span><br><span class="line">```scss</span><br><span class="line">// colors.scss</span><br><span class="line"><span class="variable">$colors</span>: (</span><br><span class="line">  <span class="string">'primary'</span>: <span class="string">'#333'</span>,</span><br><span class="line">  <span class="string">'alert'</span>: <span class="string">'#900'</span>,</span><br><span class="line">  <span class="string">'custom'</span>: <span class="string">'#090'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$name</span>, <span class="variable">$color</span> in <span class="variable">$colors</span> {</span><br><span class="line">  <span class="selector-class">.color-</span>#{<span class="variable">$name</span>} {</span><br><span class="line">     <span class="attribute">background</span>: <span class="variable">$color</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>This way of generating the color classes allow us to simplify how we add a new color. We just should add the new color to <code>$colors</code> and we will have the color class</p><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// colors.scss</span></span><br><span class="line"><span class="variable">$colors</span>: (</span><br><span class="line">  <span class="string">'primary'</span>: <span class="string">'#333'</span>,</span><br><span class="line">  <span class="string">'alert'</span>: <span class="string">'#900'</span>,</span><br><span class="line">  <span class="string">'custom'</span>: <span class="string">'#090'</span>,</span><br><span class="line">  <span class="string">'new-color'</span>: <span class="string">'#00a'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$name</span>, <span class="variable">$color</span> in <span class="variable">$colors</span> {</span><br><span class="line">  <span class="selector-class">.color-</span>#{<span class="variable">$name</span>} {</span><br><span class="line">     <span class="attribute">background</span>: <span class="variable">$color</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>But if you remember in our component we had an array width the list of available colors, if we don’t add the new colors to component too, we can not use it <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f614.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f614.png?v8">😔</span></p><p>But there is a way to only need to add colors in SCSS and also use the list in typescript: <code>:export</code>.</p><p><code>:export</code> is brought to us by <em>Webpack’s scss loader</em> and allows us to make scss variable exposed to Javascript / Typescript.<br>We will add an <code>:export</code> stament to our <code>colors.scss</code> file</p><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// colors.scss</span></span><br><span class="line"><span class="variable">$colors</span>: (</span><br><span class="line">  <span class="string">'primary'</span>: <span class="string">'#333'</span>,</span><br><span class="line">  <span class="string">'alert'</span>: <span class="string">'#900'</span>,</span><br><span class="line">  <span class="string">'custom'</span>: <span class="string">'#090'</span>,</span><br><span class="line">  <span class="string">'new-color'</span>: <span class="string">'#00a'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$name</span>, <span class="variable">$color</span> in <span class="variable">$colors</span> {</span><br><span class="line">  <span class="selector-class">.color-</span>#{<span class="variable">$name</span>} {</span><br><span class="line">     <span class="attribute">background</span>: <span class="variable">$color</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">:export {</span><br><span class="line">  @each <span class="variable">$name</span>, <span class="variable">$color</span> in <span class="variable">$colors</span> {</span><br><span class="line">    #{<span class="variable">$name</span>}: <span class="variable">$color</span>                </span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>Notice we don’t need semicolon (;) or comma (,) at the end of each line. </p></blockquote><p>Then, we will refactor our compoment like this:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"['component', colorClass]"</span>&gt;</span></span><br><span class="line">    My component</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> availableColors <span class="keyword">from</span> <span class="string">'./colors.scss'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'my-component'</span>,</span></span><br><span class="line">  props: {</span><br><span class="line"><span class="javascript">    color: <span class="built_in">String</span></span></span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    colorClass () { </span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (availableColors.indexOf(<span class="built_in">this</span>.color) !== <span class="number">-1</span>) {</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="string">`color-<span class="subst">${<span class="built_in">this</span>.color}</span>`</span></span></span><br><span class="line">      } </span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">null</span></span></span><br><span class="line">    }   </span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>But in Typescript we must declare the module to available its contents, we just add a <em>declaration</em> file (with the same name as scss file plus <code>.d.ts</code>)</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// colors.scss.d.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> colors : <span class="built_in">any</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> colors</span><br></pre></td></tr></tbody></table></figure><p>And now we only need to add a new color in one place (the scss file) and it will be available everywhere.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes you need to share variables between CSS (or SCSS) and Typescript, for example, if you have a list of colors in your SCSS file a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Why I write a blog</title>
    <link href="https://sergiocarracedo.es/2020/07/15/why-i-write-a-blog/"/>
    <id>https://sergiocarracedo.es/2020/07/15/why-i-write-a-blog/</id>
    <published>2020-07-15T00:00:00.000Z</published>
    <updated>2020-10-18T12:55:49.874Z</updated>
    
    <content type="html"><![CDATA[<p>If you are here (Welcome!) you are reading my blog, this is obvious <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>, and I want to share with you why I write it.</p><p>Writing a blog is in some ways a hard task:</p><ul><li>You should find an interesting topic to write about.</li><li>Look for information related to the chosen topic.</li><li>Read a lot of references about it.</li><li>Write your blog post.</li><li>Review it.</li><li>Correct it.</li><li>Find a beautiful and related picture for the header and home page.</li><li>And finally publish it.</li><li>You could also want to share on Twitter or LinkedIn.</li></ul><p>Ok, but why do you do this “effort”? In somehow I do this thinking of myself:</p><h2 id="To-Learn"><a href="#To-Learn" class="headerlink" title="To Learn"></a>To Learn</h2><p>All this effort you do reading about the topic and looking references makes you learn a lot about the topic and about other things you didn’t know previously. Well, is not the same write opinions or feelings (like this post) or write a technical article. </p><h2 id="Going-in-deep-on-the-topic"><a href="#Going-in-deep-on-the-topic" class="headerlink" title="Going in deep on the topic"></a>Going in deep on the topic</h2><p>Very related to the previous one is to go in deep in the topic. For example when you write about some technical topic you know a lot about, probably you could think that you don’t need read anything, but is interesting to check your arguments and that forces you to go deep in the topic, more than you expect.</p><h2 id="To-Practice-English"><a href="#To-Practice-English" class="headerlink" title="To Practice English"></a>To Practice English</h2><p>When I created this webpage I started to write in Spanish because is my native language (the order one is Galician), but six months ago I joined an English speaking team, and I need to improve my English.</p><p>One way to do that is to write my blog articles in English to practice it. (I know I make a lot of mistakes, but this is part of the way to improve <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f613.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f613.png?v8">😓</span>)</p><h2 id="To-share-knowledge"><a href="#To-share-knowledge" class="headerlink" title="To share knowledge"></a>To share knowledge</h2><p>I like to learn, and one source of (technical) knowledge is to read other people’s blogs, and I want to return a little of what I have received.</p><h2 id="As-own-reference"><a href="#As-own-reference" class="headerlink" title="As own reference"></a>As own reference</h2><p>This might sound stupid, but I came back to my old blog post to find information about some things. Things I don’t do for a long time and I forget how I resolved it, but I know that I wrote a post about that. So I just need to visit my blog and find the article.</p><p>These are my motivations. What are yours?  </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you are here (Welcome!) you are reading my blog, this is obvious &lt;span class=&quot;github-emoji&quot; style=&quot;color: transparent;background:no-re
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Improving your Vue (and JS) coding quality and workflow</title>
    <link href="https://sergiocarracedo.es/2020/06/21/Improving-your-JS-workflow/"/>
    <id>https://sergiocarracedo.es/2020/06/21/Improving-your-JS-workflow/</id>
    <published>2020-06-21T12:47:40.000Z</published>
    <updated>2020-10-18T12:55:49.874Z</updated>
    
    <content type="html"><![CDATA[<p>To start coding Javascript (and other languages), you almost need nothing, just a simple, text editor. That is good to start coding when you are learning the language, just code without distractions.</p><p>But when you develop bigger projects or/and with others, some problems appears: code organization, coding style, and other. That is because all languages have at a least clean code style guide.</p><p>Things like use semi-colon or not at the end of the line, the number of spaces indenting code, etc. </p><p>In Javascript, we have several code styles</p><ul><li><a href="https://google.github.io/styleguide/jsguide.html">Google Javascript Style Guide</a></li><li><a href="https://github.com/airbnb/javascript">AirBnb Javascript Style Guide</a></li><li><a href="https://standardjs.com/">Javascript Standard Style</a></li><li>…</li></ul><p>Personally I prefer StandardJS (Javascript Standard Style), despite this style bans semicolons, and I come from PHP where semicolons are mandatory.</p><p>And to complicate it a little more if you use a JS framework like Vue, Angular, or React have their coding styles.</p><p>And also if your project uses Typescript, it has is own <a href="https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines">coding style guide</a></p><p>Then, how could we ensure all our code complains chosen style guides?</p><h2 id="Lint"><a href="#Lint" class="headerlink" title="Lint"></a>Lint</h2><p>A <a href="https://en.wikipedia.org/wiki/Lint_(software)">linter</a> is a tool that analyzes statically our code to ensure that complaints the rules of our coding style(s).</p><p>One of the most used tools in the Javascript world is <a href="https://eslint.org/">ESLint</a>. This tool allows you to find coding style errors, and fix them automatically if is possible.</p><p>For example when you create a Vue project using <code>vue-cli</code> the setup wizard ask you if you want to use a Linter / Formatter (you should) and allows you to choose the coding style, and when you want the linter runs: on file save and/or when you commit your files.</p><script type="text/javascript" src="https://asciinema.org/a/34AKksPvMuJ7qpUk6K5gBruyS.js" id="asciicast-34AKksPvMuJ7qpUk6K5gBruyS" async=""></script><p>Please notice I choose lint on commit. When your project is small, there is no problem in use “lint on save”, but when the project makes bigger check the files on save would be very slow and unproductive. Even with lint on saving, when you are testing things in your code and for example, you comment lines and have an unused import, or remove last value of a list keeping the trailing comma, lint returns an error when you save, and make the tests slower. When you are experimenting you should be concentrated on the experiment, not in the code, when all works ok, then is time to refactor and take care of the coding style.</p><p>Let’s make an example adding some end line semicolons <code>;</code>, spaces between lines, etc</p><script type="text/javascript" src="https://asciinema.org/a/ghtOPskHMcmtMmj8q7RUQZb47.js" id="asciicast-ghtOPskHMcmtMmj8q7RUQZb47" async=""></script><p>As you can see, before commiting the code, a git hook runs the linter and fix the code (not always is able to fix the code)</p><p>This is the <code>package.json</code> section related to githooks and linter</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"gitHooks"</span>: {</span><br><span class="line">    <span class="attr">"pre-commit"</span>: <span class="string">"lint-staged"</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"lint-staged"</span>: {</span><br><span class="line">    <span class="attr">"*.{js,jsx,vue}"</span>: [</span><br><span class="line">      <span class="string">"vue-cli-service lint"</span>,</span><br><span class="line">      <span class="string">"git add"</span></span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Vue uses a tool called <a href="https://github.com/okonet/lint-staged">Lint-staged</a> that allows the linter to only check staged files. I can assume all files in the repo (not modified) are ok because they were linted before commiting to the repo.</p><p>If you want, you could manage git hooks using <a href="https://github.com/typicode/husky">Husky</a></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"husky"</span>: {</span><br><span class="line">    <span class="attr">"hooks"</span>: {</span><br><span class="line">      <span class="attr">"pre-commit"</span>: <span class="string">"lint-staged"</span>,</span><br><span class="line">      <span class="attr">"pre-push"</span>: <span class="string">"vue-cli-service test:unit"</span>,</span><br><span class="line">      <span class="attr">"..."</span>: <span class="string">"..."</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>For example, you can force run tests before push.</p><h1 id="Optimizing"><a href="#Optimizing" class="headerlink" title="Optimizing"></a>Optimizing</h1><p>If you are using Webpack, another interesting tool to know the optimization of your project is <a href="https://github.com/stephencookdev/speed-measure-webpack-plugin">Speed Measure Pluing</a></p><p>This tool shows the time elapsed by each webpack plugin when you build (even using HRM) your project using webpack. It’s very useful to detect if some loader is taking too much time to run.</p><p>If you use <code>vue-cli</code> in your project, you can take advantage of using the integrated analyzer. That allows you to see every imported package, css, or library and check the sizes, and put the focus on heavier ones and try to optimize imports (not importing whole package, just the necessary libraries)   </p><img src="/images/vue-cli.jpg" class="photoswipe"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;To start coding Javascript (and other languages), you almost need nothing, just a simple, text editor. That is good to start coding when 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>My favorite YouTube Channels 2020</title>
    <link href="https://sergiocarracedo.es/2020/06/02/my-favourite-youtube-channels-2020/"/>
    <id>https://sergiocarracedo.es/2020/06/02/my-favourite-youtube-channels-2020/</id>
    <published>2020-06-02T00:00:00.000Z</published>
    <updated>2020-10-18T12:55:49.874Z</updated>
    
    <content type="html"><![CDATA[<p>In 2018, I did a list of my <a href="/2018/11/29/Mis-canales-favoritos-de-YouTube/" title="favourite YouTube Channels">favourite YouTube Channels</a> (Spanish), almost 2 years pass after this post and on this time I start to watch new channels and remove or watch less other channels.</p><p>This year I classified the videos by topic (as I did last year), and I added an emoji code:</p><blockquote><p><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> Favorite channel. I usually watch most videos.<br><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span> Very interesting<br><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8">🔥</span> Some videos are very interesting</p></blockquote><p>This is the updated list:</p><h1 id="Travel-Culture-World"><a href="#Travel-Culture-World" class="headerlink" title="Travel / Culture / World:"></a>Travel / Culture / World:</h1><ul><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UC-UcKEWOSpz0AfY33TrYw3g">Nekojitablog</a> [ES] This channel is hosted by a Japanise woman an his Spanish husband. Thay talk about Japan culture, places, etc. An interesting point of view</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span> <a href="https://www.youtube.com/channel/UCUGfBZ3WiiqCc_UfcF_RrRA">Jabiertzo</a> [ES] A couple of Chinese and Spanish talking about china.</li><li><a href="https://www.youtube.com/channel/UCCNgRIfWQKZyPkNvHEzPh7Q">Ter</a> Sometimes talks about architecture.</li></ul><h1 id="Engineering-Science"><a href="#Engineering-Science" class="headerlink" title="Engineering / Science"></a>Engineering / Science</h1><ul><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCbdSYaPD-lr1kW27UJuk8Pw">QuantumFracture</a> [ES] Physics!!</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCV5G678sZwW5IcF3pCfRbHQ">La Hiperactina</a> [ES] Biomedicine</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCGKzjVZGdJ0YmUqg42xfO5w">Antroporama</a> [ES] Neuroscience!</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCy5znSnfMsDwaLlROnZ7Qbg">Dot CSV</a> [ES] AI</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCH-Z8ya93m7_RD02WsCSZYA">Derivando</a> [ES] Maths!</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span> <a href="https://www.youtube.com/channel/UCUK0HBIBWgM2c4vsPhkYY4w">The Slow Mo Guys</a> [EN] Slow motion videos about “science”</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span> <a href="https://www.youtube.com/channel/UCoXtmmnLCbXDiSo8GxsmOzA">La gata de Schrödinget</a> [ES]</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCMbQbVilo-nezMvwf1BZfAA">CienciaDeSofa</a> [ES]</li><li><a href="https://www.youtube.com/channel/UCGKDeE1qq3N9226-MHyO0wA">Raíz de Pi</a> [ES] Maths ;)</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span> <a href="https://www.youtube.com/channel/UCeiyuZljcK9iXzMAgzb9kpA">Hrom</a> [ES] Spanish MacGyver</li><li><a href="https://www.youtube.com/channel/UC6107grRI4m0o2-emgoDnAA">SmarterEveryDay</a> [EN] Very detailed videos about science topics.</li><li><a href="https://www.youtube.com/channel/UCibUX4QoSrRwmBZf0Ig-OCg">Deborahciencia</a> [ES] Chemistry</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span> <a href="https://www.youtube.com/channel/UC7DdEm33SyaTDtWYGO2CwdA">Physics Girl</a> [EN] Experiments, demonstrations, etc.</li><li><a href="https://www.youtube.com/user/Vsauce/videos">Vsauce</a> [EN]</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8">🔥</span> <a href="https://www.youtube.com/user/engineerguyvideo/videos">Engineerguy</a> [EN] This guy make videos talking about engineering processes, my favourite one <a href="https://www.youtube.com/watch?v=RMjtmsr3CqA">https://www.youtube.com/watch?v=RMjtmsr3CqA</a></li><li><a href="https://www.youtube.com/channel/UC6h-HID9dV2BAGSMy4_J84g">SizeMatters</a> [ES] Nanoscience using pixelart.</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8">🔥</span> <a href="https://www.youtube.com/channel/UCq3HgwV38l3WCHx8nyFtc6A">Carolina Jiménez G.</a> [ES] Cinema FX</li><li><a href="https://www.youtube.com/channel/UC52hytXteCKmuOzMViTK8_w">CdeCiencia</a> [ES] Weekly videos about scientific news</li><li><a href="https://www.youtube.com/channel/UCQX_MZRCaluNKxkywkLEgfA">Date un Vlog</a> [ES]</li><li><a href="https://www.youtube.com/channel/UCk195x4zYdMx4LhqEwhcPng">Instituto de física teórica</a> [ES]</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span> <a href="https://www.youtube.com/channel/UCm9K6rby98W8JigLoZOh6FQ">LockPickingLawyer</a> [EN] Lockpicking explained</li><li><a href="https://www.youtube.com/channel/UCoDZO0dHV8WKao3zjnfNzIQ/videos">Hablando en data</a> [ES] Data science</li></ul><h1 id="Music"><a href="#Music" class="headerlink" title="Music"></a>Music</h1><ul><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span> <a href="https://www.youtube.com/channel/UCa3DVlGH2_QhvwuWlPa6MDQ">Jaime Altozano</a> [ES] Talking about music</li></ul><h1 id="Animals"><a href="#Animals" class="headerlink" title="Animals"></a>Animals</h1><ul><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCvph04Sh9CFKAw-gA6y-brQ">I_am_puma</a> [RU]</li><li><a href="https://www.youtube.com/channel/UCRVruzlQF5cqpw9jQgIgNdw">Mugumogu</a> [ES/JP] Mara &amp; Hana cats</li><li><a href="https://www.youtube.com/channel/UCpLQXR116cLVUa1LRY8KS4w">OwlKitty</a> [EN] Cat and special effects</li><li><a href="https://www.youtube.com/channel/UCvmijL-eepDVHYSJHDY3d6w">Cole and Marmalade</a> [EN] Cats</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8">🔥</span> <a href="https://www.youtube.com/channel/UCPIvT-zcQl2H0vabdXJGcpg">The Pet Collective</a> [EN]</li><li><a href="https://www.youtube.com/channel/UCewve_DY_atXyU1wb9jWEBA">Hrzysztof Smejlis</a> [EN] Cats</li><li><a href="https://www.youtube.com/channel/UCsCFq6T-ut6mRvC5MlZmjkw">Sho Ko</a> [EN] Cats</li></ul><h1 id="Gaming"><a href="#Gaming" class="headerlink" title="Gaming"></a>Gaming</h1><ul><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCWktmlIWDDxOYSmV7gRV9gw">Buck Fernandex</a> [ES]</li><li><a href="https://www.youtube.com/channel/UCjuRnAVSiarRGOI8DA2oJtQ">Menos Trece</a> [ES]</li><li><a href="https://www.youtube.com/channel/UCHkh8YFg0l4tkY6_zvzdd5w">Luzugames</a> [ES]</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCFR2oaNj02WnXkOgLH0iqOA">Auron</a> [ES]</li><li><a href="https://www.youtube.com/channel/UCh715KhLM7vbOwozSXLWI_w">aLexBy11</a> [ES]</li><li><a href="https://www.youtube.com/channel/UCRl7gGf5iPTeVrzxx0jEWMA">Vicio ONE MORE TIME</a> [ES]</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8">🔥</span> <a href="https://www.youtube.com/channel/UCaY_-ksFSQtTGk0y1HA_3YQ">Ibai</a> [ES]</li><li><a href="https://www.youtube.com/channel/UCyGteX4xK-ZO7u9GMB8gKfA">Magma</a> [EN] Minecraft</li></ul><h1 id="Racing-Simracing-Cars"><a href="#Racing-Simracing-Cars" class="headerlink" title="Racing / Simracing / Cars"></a>Racing / Simracing / Cars</h1><ul><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8">🔥</span> <a href="https://www.youtube.com/channel/UC3gdaplfyzSr2YjHHwxRhPQ">Heikki360ES</a> [ES] This Youtuber make videos of his races on iRacing and other simracing games)</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCP92h2vCD3hw1xbNqIGY2RQ">Saul Lopez</a> [ES] Talks about Tesla, green energies, sustainable transport, etc.</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UC89aCe0fFyScFU-NegT2CFQ">Efeuno</a> [ES] Talks about F1 un deep and with a litle humor sense. Proudly creator of <a href="https://www.youtube.com/watch?v=V10SLqij2UM">Shittyflaute F1 theme</a> </li><li><a href="https://www.youtube.com/channel/UCT8u_uQZH4ddoQ00vjQfcgA">F1 Visualized</a> Show info about F1 races, times, etc using pixel art</li><li><a href="https://www.youtube.com/channel/UC7u-Dg0jb7g9s7XjmtJrtpg">Chain Bear</a> [EN/ES] Motorsport explained.</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCB_qr75-ydFVKSF9Dmo6izg">Formula 1</a> [EN] Oficial F1 channel. Race highlights, full races, radios, onboards, etc. </li><li><a href="https://www.youtube.com/channel/UCeymXIrIhMYFmCNIlwrl9Lw">Juan Francisco Calero</a> [ES]</li><li><a href="https://www.youtube.com/channel/UCwFIQ7wtJzYGFb2nZcVoNww">Lando Norris</a> [EN] McLaren F1 Driver channel</li></ul><h1 id="Humor-Entertainment"><a href="#Humor-Entertainment" class="headerlink" title="Humor / Entertainment"></a>Humor / Entertainment</h1><ul><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UC6lJZ9Ctx1vcmRY9cFEPyww">La Vida Moderna</a> [ES] Best humor channel ever.  </li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UC5hBvytNbuALxppbRJBluyg">La Lengua moderna</a> [ES]</li><li><a href="https://www.youtube.com/channel/UCvosUrZ7hXpzAyobhfztg4w">La Resistencia</a> [ES]</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UChN3MPAc_4Qa-xkM0ZQiVbg">Fortfast WTF</a> [ES] Interviews</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCPu5nstS7cbx_GUiH-kxwVw">Pantomima Full</a> [ES] Weekly videos about human contradictions.</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span> <a href="https://www.youtube.com/channel/UCyQqzYXQBUWgBTn4pw_fFSQ">AuronPlay</a> [ES]</li><li><a href="https://www.youtube.com/channel/UCcZBuBZ7Cp7skPRn87AY2Ew">Video Buck</a> [ES] Movies (new and old) reviews</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8">🔥</span> <a href="https://www.youtube.com/channel/UCexJCQ6fsxERAqKkuKrRP5w">Fácil Nejo</a> [ES] Movie reviews</li><li><a href="https://www.youtube.com/channel/UCffvdhj3nA0s2uN3NoWDQFA">Agujeros de guión</a> [ES] Movies and scripts reviews</li><li><a href="https://www.youtube.com/channel/UCpYBlwZQgSeFgbL9pI8jS3A">No te metas en política</a> [ES]</li><li><a href="https://www.youtube.com/channel/UCg9FVKnbCqfX-OuIFVgEZgw">FaceToFake</a> [ES] Humor using deepfakes</li><li><a href="https://www.youtube.com/channel/UC9suRmwQRSSBFOG7Mus1S_g">Vicisitud &amp; Sordidez</a> [ES]</li><li><a href="https://www.youtube.com/channel/UCAqznKuq5g6a0a8nRDXaXPA">Loulogio</a> [ES] Movies reviews, humor, etc</li><li><a href="https://www.youtube.com/user/simonscat">Simon’s Cat</a> [EN]</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8">🔥</span> <a href="https://www.youtube.com/channel/UCIpiHwdysY7hPHdV4CA_DQg">Aleix Saló</a> [ES]</li></ul><h1 id="Programming-Communities"><a href="#Programming-Communities" class="headerlink" title="Programming / Communities"></a>Programming / Communities</h1><ul><li><a href="https://www.youtube.com/channel/UC9DPKfcLiNd7SEU-QLlIG7A">A Industriosa</a> [ES/EN]</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span> <a href="https://www.youtube.com/channel/UC9IKtxn9AIGelnYmwYr0Lxw">CodelyTV</a> [ES]</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCmaEoq1zaakpdudbzgll-zw">Alva Majo</a> [ES] Very sarcastic indie game developer</li><li><a href="https://www.youtube.com/channel/UCGsVaz3QTFdspLqt79jIuPA">Guinxu</a> [ES] Indie game developer talking about game develop</li><li><a href="https://www.youtube.com/channel/UCQufRmIMRTLdRxTsXCh4-5w">Makigas</a> [ES]</li></ul><h1 id="Win-Fails-Zapping"><a href="#Win-Fails-Zapping" class="headerlink" title="Win / Fails / Zapping"></a>Win / Fails / Zapping</h1><ul><li><a href="https://www.youtube.com/user/Koreus/videos">Koreous</a> [FR/EN]</li><li><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <a href="https://www.youtube.com/channel/UCwbjxO5qQTMkSZVueqKwxuw">Cokaïn.fr</a> [FR/EN]</li><li><a href="https://www.youtube.com/channel/UCk_e9rhSH_Gg4Mp44Ut72ZQ">WinCompilation</a> [EN]</li><li><a href="https://www.youtube.com/user/failarmy/videos">FailArmy</a> [EN]</li><li><a href="https://www.youtube.com/channel/UCsVXjNRWJMyXViNLM2pyMfg">This is Happening</a> [EN]</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In 2018, I did a list of my &lt;a href=&quot;/2018/11/29/Mis-canales-favoritos-de-YouTube/&quot; title=&quot;favourite YouTube Channels&quot;&gt;favourite YouTube 
      
    
    </summary>
    
    
    
      <category term="youtube" scheme="https://sergiocarracedo.es/tags/youtube/"/>
    
  </entry>
  
  <entry>
    <title>Creating a simple donut progress chart</title>
    <link href="https://sergiocarracedo.es/2020/05/18/Creating-a-simple-donut-chart/"/>
    <id>https://sergiocarracedo.es/2020/05/18/Creating-a-simple-donut-chart/</id>
    <published>2020-05-18T09:28:03.000Z</published>
    <updated>2020-10-18T12:55:49.874Z</updated>
    
    <content type="html"><![CDATA[<p>One of more simpler charts you can create is a circular chart to represent the percent of completion of something.</p><h1 id="First-approximation"><a href="#First-approximation" class="headerlink" title="First approximation"></a>First approximation</h1><p>We could create a SVG document to draw our donut. SVG allow us to represent graphical elements, for example, cicles, rectangles, polygons, etc… using XML (and therefore accesing to the elements via DOM). SVG is vertorial and is perfect for responsive.</p><p align="center"><img src="/images/donut-chart/01.svg" class="photoswipe"></p><p>Figure 1 represent that kind of chart, if the value is 100% the donut is perfect, if is 50% donut is a half donut, and 0% means no donut.</p><p>As you can see in the figure 2 this chart is the addition of 3 elements: 1 circle with the colors, a smaller circle to create the illusion of the void center, and a triangle to create the illusion of the missing part of the donut to be completed (If the completion value if less than 50% you will need to add a rect to hide half of circles).</p><p>This approximation has an issue, the small circle and triangle have a color if your background has different color or is a non-solid background color, this approximation fails (figure 3)</p><h1 id="Second-approximation"><a href="#Second-approximation" class="headerlink" title="Second approximation"></a>Second approximation</h1><p>To avoid the non solid background color, problem, you could use <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/clipPath">SVG Clip Path</a> that limits the part of the element (or group of elements) are visible. In this case you should use the smaller circle and the triangle as clip path of the bigger circle.</p><p><em>Problem solved!</em></p><p>Wait, calculations necessary to draw the clip path can be complex, there are a simple way to draw a donut.</p><h1 id="Using-Stroke"><a href="#Using-Stroke" class="headerlink" title="Using Stroke"></a>Using Stroke</h1><p>We were drawing the donuts as the difference between to circles, the donut’s width was the radius difference (R1 - R2) are there another way to draw a donut? <strong>Yes, a fat stroke circumference.</strong></p><iframe src="https://codesandbox.io/s/interesting-field-ix2b6?fontsize=14&amp;hidenavigation=1&amp;initialpath=%23/simple-donut&amp;module=/src/views/SimpleDonut.vue&amp;theme=dark" width="100%" height="600px" frameborder="0" loading="lazy" allowfullscreen=""></iframe><p>Oh, our donut is drawing partially outside SVG element and is cropped. That is because the stroke grows from the center of the line, if the stroke is 10px, 5px will be drawn in a side of the line and other 5px in the other side. So we need to subtract the half of donut width of our circumference radius, and instead of using the radius we will use the svg size (in the case the diameter)</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">radius = size / <span class="number">2</span> - width / <span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><iframe src="https://codesandbox.io/s/interesting-field-ix2b6?fontsize=14&amp;hidenavigation=1&amp;initialpath=%23/simple-donut-2&amp;module=/src/views/SimpleDonut02.vue&amp;theme=dark" width="100%" height="600px" frameborder="0" loading="lazy" allowfullscreen=""></iframe><p>Cool! We have our donut, now we must remove part of it to represent the percent. Instead of use clip path we will use <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray">stroke-dasharray</a> attribute. This attribute allows us to define how is drawn the stroke, for example <code>stroke-dasharray="1 1"</code> means line will draw 1px solid and 1px transparent (in this context px is not a screen pixel, is a pixel in the SVG viewbox context). So we could use this behavior to draw a number of pixels and leave the rest transparent. We should calculate the numbers.</p><p>First we need to know what is the circle length, this is basic math: 2πR</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const circumferenceLength = 2 * Math.PI * radius</span><br></pre></td></tr></tbody></table></figure><p>Then the solid part is <code>circumferenceLength * percent / 100</code> and the transparent is <code>circumferenceLength * (100 - percent) / 100</code>, and this is the result.</p><iframe src="https://codesandbox.io/s/interesting-field-ix2b6?fontsize=14&amp;hidenavigation=1&amp;initialpath=%23/simple-donut-3&amp;module=/src/views/SimpleDonut03.vue&amp;theme=dark" width="100%" height="600px" frameborder="0" loading="lazy" allowfullscreen=""></iframe><p>Using this technique we could create a component with the properties: width, color, size, percent and we can create easy progress circle charts, absolutely responsive.</p><p>Also, you can animate the dash array to make a fluid change when value changes, or add a text label to show the value, or anything you can imagine.</p><p>Thanks for reading I hope you like it!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;One of more simpler charts you can create is a circular chart to represent the percent of completion of something.&lt;/p&gt;
&lt;h1 id=&quot;First-appr
      
    
    </summary>
    
    
    
      <category term="js, vue, donut, charts, data visualization" scheme="https://sergiocarracedo.es/tags/js-vue-donut-charts-data-visualization/"/>
    
  </entry>
  
  <entry>
    <title>Javascript unary operators: Taking advantage using them</title>
    <link href="https://sergiocarracedo.es/2020/05/09/js-unary-operators-and-taking-advantage/"/>
    <id>https://sergiocarracedo.es/2020/05/09/js-unary-operators-and-taking-advantage/</id>
    <published>2020-05-09T00:00:00.000Z</published>
    <updated>2020-10-18T12:55:49.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What’s-an-operator"><a href="#What’s-an-operator" class="headerlink" title="What’s an operator?"></a>What’s an operator?</h2><p>An operator is a symbol that define the operation to do between 1 o more operands.</p><p align="center"><img src="/images/operators.png" class=""></p><p>We use a lot of operators: sum (+), subtraction (-), multiply (*), division (/), logic and (&amp;&amp;), negation (!),…</p><h2 id="What’s-a-unary-operator"><a href="#What’s-a-unary-operator" class="headerlink" title="What’s a unary operator?"></a>What’s a unary operator?</h2><p>A unary operator is an operator that only needs one operand to work.<br>For example</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i++</span><br></pre></td></tr></tbody></table></figure><p>In this example we have an operand (<code>i</code>) and an operator (<code>++</code>), we don’t need more to increment the <code>i</code> variable value.</p><h2 id="Unary-operators-in-Javascript"><a href="#Unary-operators-in-Javascript" class="headerlink" title="Unary operators in Javascript"></a>Unary operators in Javascript</h2><p>here is a list with more common unary operators in Javascript</p><ul><li><code>++</code> <strong>Increment</strong>. Increments the value of operand in one unit.</li><li><code>--</code> <strong>Decrement</strong>. Decrements the value of operand in one unit.</li><li><code>!</code> <strong>Logical not</strong>. Negate the boolean operand value.</li><li><code>-</code> <strong>Negation</strong>. Negate the numeric operand value.</li><li><code>typeof</code> Returns the type of the operand in a string.</li><li><code>delete</code> Deletes the index of an array or an object.</li></ul><h2 id="Hacking-the-system"><a href="#Hacking-the-system" class="headerlink" title="Hacking the system"></a>Hacking the system</h2><p>There is another unary operator that I haven’t talked about, the <strong>unary addition</strong> (<code>+</code>).</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(+a)</span><br></pre></td></tr></tbody></table></figure><p>What do you think will be the result? You probably right: <code>10</code>.</p><p>So what is this operator for if returns the same value? Here is another example.</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">'10'</span></span><br><span class="line"><span class="built_in">console</span>.log(+a)</span><br></pre></td></tr></tbody></table></figure><p>In this one, what do you think will be the result? Yes, it’s <code>10</code> but not the same <code>10</code> we had. <strong>What?</strong></p><p>Replay, but now let’s look at the types </p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(type +a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">'10'</span></span><br><span class="line"><span class="built_in">console</span>.log(type +a)</span><br></pre></td></tr></tbody></table></figure><p>Both results are <code>number</code>. Here is the point, this operator (tries to) convert the value to number. So we can use it to cast values to <code>number</code>.</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(+<span class="string">'10a'</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">'0x10'</span>) <span class="comment">// 16</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">'0o10'</span>) <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">'0.1'</span>) <span class="comment">// 0.1</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">'1e12'</span>) <span class="comment">// 1000000000000</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">'Infinity'</span>) <span class="comment">// Infinity</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="literal">undefined</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="literal">true</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(+[]) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(+[<span class="number">2</span>]) <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(+[<span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(+{}) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="literal">null</span>) <span class="comment">// 0 &lt;= Take care</span></span><br></pre></td></tr></tbody></table></figure><p>Take care with the last result because it’s less obvious</p><p>Unary minus do the same, but negate the result.</p><p>The <code>!</code> operator behaves similarly: It tries to convert the value to <code>boolean</code>, but negate the result of the cast, but if we double negate the value we found a way to cast values to <code>boolean</code></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(!!<span class="string">'10a'</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="string">''</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">null</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">undefined</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">NaN</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">Infinity</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!!{}) <span class="comment">// true &lt;= Take care</span></span><br><span class="line"><span class="built_in">console</span>.log(!![]) <span class="comment">// true &lt;= Take care</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="string">'0'</span>) <span class="comment">// false &lt;= Take care</span></span><br></pre></td></tr></tbody></table></figure><p>I marked the results that for me are counterintuitive</p><p>This two unary operators, <code>+</code> and <code>!</code>, using as <code>!!</code> are very useful to cast to number and boolean respectively.</p><p>Enjoy them! <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8">😉</span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;What’s-an-operator&quot;&gt;&lt;a href=&quot;#What’s-an-operator&quot; class=&quot;headerlink&quot; title=&quot;What’s an operator?&quot;&gt;&lt;/a&gt;What’s an operator?&lt;/h2&gt;&lt;p&gt;An o
      
    
    </summary>
    
    
    
      <category term="js" scheme="https://sergiocarracedo.es/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Understanding Javascript&#39;s event loop: Macrotasks and microtasks</title>
    <link href="https://sergiocarracedo.es/2020/04/27/js-loop/"/>
    <id>https://sergiocarracedo.es/2020/04/27/js-loop/</id>
    <published>2020-04-27T00:00:00.000Z</published>
    <updated>2020-10-18T12:55:49.874Z</updated>
    
    <content type="html"><![CDATA[<p>Despite what it may seem, Javascript execution in a browser is <em>synchronous</em>. It is a similar thing as a <em>multitask</em> OS running in a mono-core processor, in that case multitasking is “fake”, because the processor can only execute one instruction at a time, but the OS controls the execution and distribute the processor time between each app, making it looks like multitasking.</p><p>In <em>Javascript</em> we have a similar approximation in a way to distribute the execution time. It’s not exactly the same. Lets see how it works.</p><h1 id="Event-loop"><a href="#Event-loop" class="headerlink" title="Event loop"></a>Event loop</h1><p>When you write a program in JS, every script you add or every instruction will be added to a queue in the <em>event loop</em></p><p>The engine starts to run every instruction in the same order you wrote, running all tasks, and when finish, it waits for more tasks and then starts again.</p><p>Every task in this queue is a <strong>macrotask</strong> and queue is the <strong>macrotask queue</strong>. Some examples of macrotasks are:</p><ul><li>Every <code>&lt;script&gt;</code> loaded and all the instructions on them</li><li><code>setInterval</code> or <code>setTimeout</code> command</li><li>DOM event: <code>window.load</code>, <code>mouseout</code>, etc </li></ul><p>In example below, we run some task: calculate the 6th element on Fibonacci series and get a string with the English alphabet. I put some <code>console.log</code> as code execution checkpoint to show the execution order.</p><iframe src="https://codesandbox.io/s/romantic-lewin-i1fjz?fontsize=14&amp;hidenavigation=1&amp;previewwindow=console&amp;runonclick=1&amp;initialpath=macrotasks.html&amp;module=/src/macrotasks.js&amp;theme=dark" width="100%" height="500px" frameborder="0" loading="lazy" allowfullscreen=""></iframe><p>The result is</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Checkpoint 1 </span><br><span class="line">13</span><br><span class="line">Checkpoint 2: 0.5600000149570405ms </span><br><span class="line">ABCDEFGHIJKLMNOPQRSTUVWXYZ </span><br><span class="line">Checkpoint 3 </span><br></pre></td></tr></tbody></table></figure><p>As you can see, the tasks run in order, string generation doesn’t start until fibonacci function finish, even if the function takes long time to be completed.</p><p>Let’s see what happens when you use <code>setTimeout</code>. When you set a timeout, you expect your function will be executed after the timeout you set. For example <code>setTimeout(() =&gt; console.log('here'), 1000)</code> should print in console ‘here’ after <strong>1s</strong>. You expect this always happens, no cares about next task or instructions. If you expect that, you are wrong. Check next code:</p><iframe src="https://codesandbox.io/s/romantic-lewin-i1fjz?fontsize=14&amp;hidenavigation=1&amp;previewwindow=console&amp;runonclick=1&amp;initialpath=macrotasksSetTimeout.html&amp;module=/src/macrotasksSetTimeout.js&amp;theme=dark" width="100%" height="500px" frameborder="0" loading="lazy" allowfullscreen=""></iframe><p>We have a long task after the timeout. Timeout should be executed after <strong>1s</strong>, but next task takes <strong>5s</strong> to be completed, and your timeout not executed yet. Ok let’s wait long task end, and… nothing, your timeout still missing. Next macrotask is our string generator, this task is executed and, finally, after all macrotask, our timeout is executed.</p><p>That occurs because, when you use a timeout, you are moving the task at the end of the queue, an at this point is when js engine checks if your timeout should be executed.</p><h2 id="Taking-advantage"><a href="#Taking-advantage" class="headerlink" title="Taking advantage"></a>Taking advantage</h2><p>You can take advantage of that event loop behavior, for example, you can put a high CPU usage task inside a <code>setTimeout</code>, even with 0ms of dispatch time, and this huge task will be executed after following tasks.<br>That is a fast solution, but if you have more than 1 or 2 long tasks, you are only moving the problem to the end of the queue, but problem is still there.</p><h2 id="Using-Promises"><a href="#Using-Promises" class="headerlink" title="Using Promises"></a>Using Promises</h2><p>You could think of using promises, for example</p><iframe src="https://codesandbox.io/s/romantic-lewin-i1fjz?fontsize=14&amp;hidenavigation=1&amp;previewwindow=console&amp;runonclick=1&amp;initialpath=macrotasksPromise.html&amp;module=/src/macrotasksPromise.js&amp;theme=dark" width="100%" height="500px" frameborder="0" loading="lazy" allowfullscreen=""></iframe><p>But the promise starts to run the code inside just after call the promise’s constructor, and your program is stucked again. You can resolve it using <code>setTimeout</code> again, but in this case we are creating a <strong>microtask</strong>:</p><h2 id="Microtasks"><a href="#Microtasks" class="headerlink" title="Microtasks"></a>Microtasks</h2><p>Microtasks are tasks created in promises (then, catch, finally). The microtask queue run immediately after every macrotask, before render or before the next macrotask</p><iframe src="https://codesandbox.io/s/romantic-lewin-i1fjz?fontsize=14&amp;hidenavigation=1&amp;previewwindow=console&amp;runonclick=1&amp;initialpath=microtasksPromise.html&amp;module=/src/microtasksPromise.js&amp;theme=dark" width="100%" height="500px" frameborder="0" loading="lazy" allowfullscreen=""></iframe><p>In that example, <code>setTimeout</code> creates a new macrotask, so it will run after macrotask loop, Promise creates a microtask that will be executed after next macrotrask ends, in this case after all script instructions but before the queued macrostask. And finally will run the <code>setTimeout</code> macrotask</p><p>There are another way to create a microtask, using <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/queueMicrotask"><code>queueMicrotask</code></a> that is a recent addition to the standard. it’s supported by most modern browsers (<a href="https://caniuse.com/#search=queueMicrotask">https://caniuse.com/#search=queueMicrotask</a>) but if not, you can use this polyfill:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.queueMicrotask !== <span class="string">'function'</span>) {</span><br><span class="line">  <span class="built_in">window</span>.queueMicrotask = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>{</span><br><span class="line">    <span class="built_in">Promise</span>.resolve()</span><br><span class="line">      .then(callback)</span><br><span class="line">      .catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> { <span class="keyword">throw</span> e }))</span><br><span class="line">  };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>And works exactly as the previous example but syntax is clearer</p><iframe src="https://codesandbox.io/s/romantic-lewin-i1fjz?fontsize=14&amp;hidenavigation=1&amp;previewwindow=console&amp;runonclick=1&amp;initialpath=microtasksPromise.html&amp;module=/src/microtasksPromise.js&amp;theme=dark" width="100%" height="500px" frameborder="0" loading="lazy" allowfullscreen=""></iframe><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>If you are using Vue, maybe you can show a loader or some kind of indicator when you go to execute a long task.</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  data: {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      loading: <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    ...</span><br><span class="line">    longTask () {</span><br><span class="line">      <span class="built_in">this</span>.loading = <span class="literal">true</span></span><br><span class="line">      <span class="comment">// doing your long task stuff</span></span><br><span class="line">      <span class="built_in">this</span>.loading = <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><p>You could think that the loader will be showed before start the long task and hidden after it, but that not happens, you never see the loader, because the reactive properties are “checked” after the loop and at this point <code>this.loading</code> is <code>false</code>.</p><p>You can try to use <code>$.nextTick</code> but the result it’s the same, you need to get out of the event loop with your long task</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  data: {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      loading: <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    ...</span><br><span class="line">    longTask () {</span><br><span class="line">      <span class="built_in">this</span>.loading = <span class="literal">true</span></span><br><span class="line">      queueMicrotask(<span class="function">() =&gt;</span> {</span><br><span class="line">        <span class="comment">// doing your long task stuff)</span></span><br><span class="line">        <span class="built_in">this</span>.loading = <span class="literal">false</span>      </span><br><span class="line">      }      </span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><p>Above I wrote that Javascript is <em>synchronous</em>, but I lied <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8">😅</span>. You can use <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers">WebWorkers</a>, this is topic for another post… :simple_smile:</p><p>More info: <a href="https://javascript.info/event-loop">https://javascript.info/event-loop</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Despite what it may seem, Javascript execution in a browser is &lt;em&gt;synchronous&lt;/em&gt;. It is a similar thing as a &lt;em&gt;multitask&lt;/em&gt; OS run
      
    
    </summary>
    
    
    
      <category term="js loop" scheme="https://sergiocarracedo.es/tags/js-loop/"/>
    
  </entry>
  
  <entry>
    <title>Slimbook ProX 15: First Impressions</title>
    <link href="https://sergiocarracedo.es/2020/04/05/slimbook-prox15-first-impressions/"/>
    <id>https://sergiocarracedo.es/2020/04/05/slimbook-prox15-first-impressions/</id>
    <published>2020-04-05T00:00:00.000Z</published>
    <updated>2020-10-18T12:55:49.874Z</updated>
    
    <content type="html"><![CDATA[<p>As you probably know, I started a new job this year, and my company provided me a laptop. They asked me which laptop I would like to use to work, most people would answer: MacBook Pro or something like that, but I don’t like Apple (sorry, those are my likes, maybe you have different ones), and I prefer Linux as my OS.</p><p>My first choice was a Dell XPS 15 with 16GB of RAM, but after several delays in delivery, my company and I were tired of waiting and we decided to order another laptop.</p><p>I was mulling over which model to choose, and I asked my friend Félix, who wrote a post about <a href="https://felixgomez.eu/2019/12/01/que-ordenador-me-compro-para-desarrollar-ii/">what laptop you can buy to work as a developer</a> <small>(Spanish)</small> and he told me: “<a href="https://slimbook.es/prox">Slimbook PROX</a>“ a 13.3” powerful laptop made by a Spanish company specialized in Linux laptops.</p><p>It was a great option, but most the time I work on a desktop computer and I prefer a laptop with a larger screen. Finally, I chose the 15” version of that laptop: <a href="https://slimbook.es/prox15">the PROX15</a>. But not just change the screen size, there are more differences from PROX: PROX15 is a high performance oriented laptop. </p><p>I configured my order with 32GB of RAM, 512GB NVMe SSD and an Intel Dual Band 9560AC Wifi Card.</p><p>One thing I like of that company is that you can <a href="https://slimbook.es/en/store/slimbook-pro-x-15/prox15-comprar">configure your computer</a>: you can choose memory, 1 or 2 SSD storage (with RAID 0 or 1, if you chose 2), WIFI Card, Keyboard layout, and OS. And component are not welded to motherboard, that means you can upgrade the computer in the future. </p><p>But let’s go to the point.</p><h1 id="Technical-Specs"><a href="#Technical-Specs" class="headerlink" title="Technical Specs"></a>Technical Specs</h1><ul><li><strong>Display</strong>: 15.6” FullHD IPS</li><li><strong>CPU</strong>: Intel i7-9750H (6 Core), no low-power or Ultra-power processor like series U</li><li><strong>GPU</strong>: NVIDIA Geforce GTX 1650 4GB and Intel® 630 HD Graphics</li><li><strong>RAM</strong>: 32GB</li><li><strong>Storage</strong>: SSD M.2 of 500GB</li><li><strong>Battery</strong>: ~92 Wh</li><li><strong>Others</strong>: Webcam 720 and an infrared cam to facial recognition, Bluetooth, etc…</li><li><strong>Weight</strong>: 1.5kg - Magnesium and aluminum case</li></ul><p>After 3-4 week using the laptop (non-intensive use), these are my thoughts.</p><h1 id="Things-I-love"><a href="#Things-I-love" class="headerlink" title="Things I love"></a>Things I love</h1><h3 id="Size"><a href="#Size" class="headerlink" title="Size"></a>Size</h3><p>The size is perfect for me. Big screen in a size contained case. Screen borders are very narrow (about 5mm) so laptop size is similar to 14” one</p><img src="/images/slimbookprox15/screenborder.jpg" class="photoswipe"><h3 id="Powerful-CPU-and-GPU"><a href="#Powerful-CPU-and-GPU" class="headerlink" title="Powerful CPU and GPU"></a>Powerful CPU and GPU</h3><p>CPU it’s a 9th generation’s <a href="https://www.intel.co.uk/content/www/uk/en/products/processors/core/i7-processors/i7-9750h.html">Intel i7-9750</a> H series, it’s a mobility oriented processor, but focused in performance. 2.60GHz, 6 cores, (12 threads). <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8">❤</span><br>Processor has an integrated Intel UHD Graphics 630, but also has a dedicated NVIDIA Geforce GTX 1650 with 4GB of non-shared RAM. If your system supports PRIME, you be able to choose what graphics card use. Intel to save battery or NVIDIA for performance.</p><p>I benchmarked both graphics card (Intel and Nvidia) and my desktop computer (Nvidia GTX 950) using <a href="https://benchmark.unigine.com/valley">Unigine Valley Benchmark</a> and this were the results.</p><div class="mb-3 left-33"> <img src="/images/slimbookprox15/benchmark_intel.jpg" class="photoswipe"> <small>Using integrated Intel card</small></div><div class="mb-3 left-33"> <img src="/images/slimbookprox15/benchmark_GTX1650.jpg" class="photoswipe"> <small>Using Nvidia GTX1650</small></div><div class="mb-3 left-33"> <img src="/images/slimbookprox15/benchmark_GTX950.jpg" class="photoswipe"> <small>Desktop computer. Nvidia GTX950</small></div><div class="clearfix"></div><p>It’s amazing! </p><h3 id="Weight-and-case’s-materials"><a href="#Weight-and-case’s-materials" class="headerlink" title="Weight and case’s materials"></a>Weight and case’s materials</h3><div class="mb-3 right-50"><img src="/images/slimbookprox15/keyboard.jpg" class="photoswipe"></div>It's a very light laptop considering its size, only 1.5Kg. The case is made in magnesium-aluminum alloy, very pleasant to the touch, at first view it could look like plastic, but it is not, the touch it's very different, it's not cold like only aluminum.  <h3 id="Connections"><a href="#Connections" class="headerlink" title="Connections"></a>Connections</h3><p>It has many of them: HMDI (full size), USB 2.1, USB 3.0, USB-C, RJ45, Jack 3.5mm, MicroSD.<br>Using a dock station, you can connect laptop to 3 external displays.  </p><h3 id="Keyboard"><a href="#Keyboard" class="headerlink" title="Keyboard"></a>Keyboard</h3><p>I love keyboard layout, keys are a bit bigger than my previous laptop (<a href="https://www.asus.com/es/Laptops/ASUS-ZenBook-UX330UA/">Asus ZenBook UX330UA</a>) Directions keys are complete and have Start, End, PageStart, PageEnd keys</p><h3 id="Upgradable"><a href="#Upgradable" class="headerlink" title="Upgradable"></a>Upgradable</h3><p>Components: Storage (2xM2 slots) and memory banks are upgradable. It’s a feature that I really appreciate. Maybe in the future, I will add other SSD. It’s possible to do this, and it does not force you to choose oversized components at the price of gold (cough, cough Apple) just in case.</p><div class="clearfix"></div><h3 id="Price"><a href="#Price" class="headerlink" title="Price"></a>Price</h3><p>That is work computer, and it was bought by my company. But the price was around 1500€ (VAT included). I think is a low price considering the specifications.</p><h1 id="Other-considerations"><a href="#Other-considerations" class="headerlink" title="Other considerations"></a>Other considerations</h1><h3 id="Touchpad"><a href="#Touchpad" class="headerlink" title="Touchpad"></a>Touchpad</h3><p>I’m not a big fan of the touchpad in general, I like mice, but I think the Slimbook’s touchpad is very good. More than enough for me.</p><h3 id="Battery"><a href="#Battery" class="headerlink" title="Battery"></a>Battery</h3><p>As I said before, and due to the quarantine, I didn’t use the laptop intensively. Maker said up to 12h of life, but they are honest and talk about <a href="https://slimbook.es/en/prox15-en#preguntasfreq">5-8 with office use</a>, obviously, playing games or using CPU and GPU intensive apps, battery life will be short as using “normal” apps</p><h3 id="Refrigeration"><a href="#Refrigeration" class="headerlink" title="Refrigeration"></a>Refrigeration</h3><p>While Benchmarking graphics I guess fans were at maximum speed, they are a little noisy, but at acceptable levels bearing in mind that the GPU was at 80ºC with maximum performance. I just felt the temperature in a small area on the keyboard.</p><h1 id="Things-that-I-don’t-like"><a href="#Things-that-I-don’t-like" class="headerlink" title="Things that I don’t like"></a>Things that I don’t like</h1><h3 id="Keyboard-backlight"><a href="#Keyboard-backlight" class="headerlink" title="Keyboard backlight"></a>Keyboard backlight</h3><div class="mb-3 right-33">  <img src="/images/slimbookprox15/keyboard_backlight.jpg" class="photoswipe"></div>It is not very bright, even raising the level to the maximum. The problem is that the keyboard is metallic gray, and for me, it is difficult to see the symbols on the keys. It's worse with backlight on, because the contrast between the keys color and symbol color it is very low. You can see it in the picture.<h3 id="Windows-key"><a href="#Windows-key" class="headerlink" title="Windows key"></a>Windows key</h3><p>I know, it’s a “standard” but I don’t like it.</p><div class="clearfix"></div><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>In the future, after using it longer, I will write a more complete review, but right now I think I have a very good laptop, high quality materials, nice display, powerful components that can be upgraded, no problem to install linux. I’m very happy with it. </p><p>I cannot forget good care of the Slimbook company. When I have any doubt about assembly process or something else, they respond very quickly on Twitter.</p><div class="mb-3 left-33"> <img src="/images/slimbookprox15/pro-x-15.jpg" class="photoswipe"></div><div class="mb-3 right-33"> <img src="/images/slimbookprox15/internal.jpg" class="photoswipe"></div><div class="mb-3 right-33"> <img src="/images/slimbookprox15/06.jpg" class="photoswipe"></div><div class="clearfix"></div><small>Images by Slimbook. CC-BY-SA</small> <script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;As you probably know, I started a new job this year, and my company provided me a laptop. They asked me which laptop I would like to use 
      
    
    </summary>
    
    
    
      <category term="slimbook, pc, linux" scheme="https://sergiocarracedo.es/tags/slimbook-pc-linux/"/>
    
  </entry>
  
  <entry>
    <title>Start using Typescript in Vue. The easy way.</title>
    <link href="https://sergiocarracedo.es/2020/02/27/start-using-typescript-in-vue-easy-way/"/>
    <id>https://sergiocarracedo.es/2020/02/27/start-using-typescript-in-vue-easy-way/</id>
    <published>2020-02-27T10:58:02.000Z</published>
    <updated>2020-10-18T12:55:49.874Z</updated>
    
    <content type="html"><![CDATA[<p>If you program in <em>JavaScript</em> probably somebody told you about the advantages of using <em>Typescript</em> or you thought about start using it.</p><p>As you can see in this chart, more than 50% <em>Javascript</em> developers are using <em>Typescript</em></p><p><img src="/images/javascript_flavors_section_overview.png" alt=""><br><em>Source: <a href="https://2019.stateofjs.com/javascript-flavors/">https://2019.stateofjs.com/javascript-flavors/</a></em></p><p>Start to use a new technology, new paradigm, new framework or anything could be hard and challenging, this is why is important start integrating new technologies avoiding friction with previous one. Today I’ll try to show you the easiest way to start using <em>Typescript</em> in your Vue projects.  </p><p>In case of <em>Typescript</em> we “just” will add a layer over <em>Javascript</em> then I’ll try to explain easier way to use <em>Typescript</em> with <em>Vue</em> even in existing projects.</p><p>Before start, you should know <em>Typescript</em> using benefits. You have thousands blog’s post talking about that:</p><ul><li><a href="https://apiumhub.com/tech-blog-barcelona/top-typescript-advantages/">https://apiumhub.com/tech-blog-barcelona/top-typescript-advantages/</a></li><li><a href="https://ionicframework.com/docs/v3/developer-resources/typescript/">https://ionicframework.com/docs/v3/developer-resources/typescript/</a></li><li><a href="https://medium.com/swlh/the-major-benefits-of-using-typescript-aa8553f5e2ed">https://medium.com/swlh/the-major-benefits-of-using-typescript-aa8553f5e2ed</a></li><li><a href="https://alligator.io/typescript/typescript-benefits/">https://alligator.io/typescript/typescript-benefits/</a></li><li>…</li></ul><p>Most repeated benefit is <strong>“types”</strong>. <em>Javascript</em> is a weakly typed language (variables and consts have types, but you can not set its type. Only by means of value)</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>I assume you are using <code>vue-cli</code>. You must be sure you are using version 4.0.0+</p><h2 id="Step-1-Adding-Typescript"><a href="#Step-1-Adding-Typescript" class="headerlink" title="Step 1: Adding Typescript"></a>Step 1: Adding Typescript</h2><p>First step is add <em>Typescript</em> using <code>vue-cli</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue add typescript</span><br></pre></td></tr></tbody></table></figure><p>Vue cli starts to add <em>typescript</em> package and necessary dependencies. Also create and update configuration files like <code>tsconfig.json</code>, It needs ask you some questions to configure properly.</p><p>Let view each question in detail and the “correct” answer.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? Use class-style component syntax? (Y/n)</span><br></pre></td></tr></tbody></table></figure><p>If you want start to use <a href="https://vuejs.org/v2/guide/typescript.html#Class-Style-Vue-Components">class-style component syntax</a> you should answer “<strong>yes</strong>“. You can answer “no” and you can not use it, but anything else changes. </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? Use Babel alongside TypeScript (required for modern mode, auto-detected polyfills, transpiling JSX)? (Y/n)</span><br></pre></td></tr></tbody></table></figure><p>“Yes”. You were probably already using it.</p><p>The next two questions are the most important</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? Convert all .js files to .ts? (Y/n)</span><br></pre></td></tr></tbody></table></figure><p>:warning: You must answer “<strong>No</strong>“ to avoid Vue cli rename all your files to <code>.ts</code>. If you do that you will have to refactor all your project files to <em>Typescript</em></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? Allow .js files to be compiled? (y/N)</span><br></pre></td></tr></tbody></table></figure><p>:warning: You must answer “<strong>Yes</strong>“. It’s the same as, in <code>tsconfig.json</code>, set the value <code>allowJs</code> to <code>true</code>. If you don’t anwser “yes” you will receive a lot of error messages, because the <em>typescript</em> transpiler tries to transpilate <code>.js</code></p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>No step 2. You just added <em>Typescript</em> support to your project and everything should work fine as usual.</p><h2 id="Writing-your-first-Vue-component-in-typescript"><a href="#Writing-your-first-Vue-component-in-typescript" class="headerlink" title="Writing your first Vue component in typescript"></a>Writing your first Vue component in <em>typescript</em></h2><p>When you write a Vue component in Javascript, you probably write something similar to:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> ....</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  props: ....,</span><br><span class="line">  data () ....,</span><br><span class="line">  methods: ....</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>To write a Vue compoment using <em>Typescript</em> you need to set the scripting language using the attribute <code>lang</code> in the script tag.<br>Also, as <em>Typescript</em> needs to infer types, you must define your components with <code>Vue.component</code> or <code>Vue.extend</code> (I prefer second one)</p><p>Then our component look like:</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> ....</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue.extend({</span><br><span class="line">  props: ....,</span><br><span class="line">  data () ....,</span><br><span class="line">  methods: ....</span><br><span class="line">})</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8">🎉</span> Done! You have your first Typescript Vue component.</p><p>The point is you can start using <em>Typescript</em> and keep your previous code. You don’t need to rewrite all components, or you can do step by step.</p><p>I recommend you to read <a href="https://vuejs.org/v2/guide/typescript.html">Vue documentation about Typescript support</a></p><p>In future blog posts I show how use multiple mixins in <em>Typescript</em> and other tips about <em>typescript</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you program in &lt;em&gt;JavaScript&lt;/em&gt; probably somebody told you about the advantages of using &lt;em&gt;Typescript&lt;/em&gt; or you thought about s
      
    
    </summary>
    
    
    
      <category term="vue, typescript, ts, js" scheme="https://sergiocarracedo.es/tags/vue-typescript-ts-js/"/>
    
  </entry>
  
  <entry>
    <title>Using same avatar in different accounts and avoid confusion</title>
    <link href="https://sergiocarracedo.es/2020/02/26/same-avatar-in-diferent-account/"/>
    <id>https://sergiocarracedo.es/2020/02/26/same-avatar-in-diferent-account/</id>
    <published>2020-02-26T09:00:00.000Z</published>
    <updated>2020-10-18T12:55:49.874Z</updated>
    
    <content type="html"><![CDATA[<p>Probably you have several internet services accounts, and some in the same service, for example two <em>gmail</em> accounts, one for work and a personal, or <a href="/2019/12/23/instagram-rbg/" title="multiple Instagram accounts as me">multiple Instagram accounts as me</a></p><p>I like to use same picture as avatar in each account, but the problem is difficult to differentiate the account you are logged in only watching the avatar.</p><p>I’m using a simple tip to differentiate them, add a color band at the  bottom of the image, the point is to use same color for every single account or role, for example you could use black for work, and green for personal.</p><p>So when you are logged in and see the avatar, you will be able to know which account are you logged in.</p><p>Next picture shows my avatars in 2015:</p><p><img src="/images/avatars2015.jpg" alt="Sergio Carracedo avatars in 2015"></p><p>Be sure that the color band has height enough when the avatar is a circle.</p><p><img src="/images/avatars2015_circle.jpg" alt="Sergio Carracedo avatars in 2015"></p><p>Using this tip is easier to differentiate the account you are using, in the example below, in <em>gmail</em></p><p><img src="/images/avatars2015_gmail.png" alt="Sergio Carracedo avatars in 2015"></p><p>If you are using OAuth, for example “Login with Google” button, to login into third party services, the avatar is the same as the source account and this tip still working.</p><p>I’m sorry for forcing you to see my face so many times <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8">😅</span><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8">😅</span><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8">😅</span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Probably you have several internet services accounts, and some in the same service, for example two &lt;em&gt;gmail&lt;/em&gt; accounts, one for work
      
    
    </summary>
    
    
    
      <category term="avatar, tips, account" scheme="https://sergiocarracedo.es/tags/avatar-tips-account/"/>
    
  </entry>
  
  <entry>
    <title>(Deep) Cloning objects in Javascript</title>
    <link href="https://sergiocarracedo.es/deep-cloning-objects-in-javascript/"/>
    <id>https://sergiocarracedo.es/deep-cloning-objects-in-javascript/</id>
    <published>2020-02-22T18:28:28.000Z</published>
    <updated>2020-10-18T12:55:49.874Z</updated>
    
    <content type="html"><![CDATA[<p>Cloning objects in <em>Javascript</em> (and in other language) is a tricky task. JS doesn’t store the object value in your variable or in your constant, instead, store a pointer to the object value (the object reference).</p><p>Even when you passes an object to a function or method, you are passing this object by reference, not the value.</p><p>This picture perfectly shows the difference.</p><div class="center-img">  ![By reference and by value](/images/pass-by-reference-vs-pass-by-value-animation.gif) </div><p>As you can see, if you pass (or copy) an object by reference and then change any property, the ‘source’ object’s property also changes.</p><p>In any example I’ll use the object below</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sourceObject = {</span><br><span class="line">  l1_1: {</span><br><span class="line">    l2_1: <span class="number">123</span>,</span><br><span class="line">    l2_2: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    l2_3: {</span><br><span class="line">      l3_1: <span class="string">'l3_3'</span>,</span><br><span class="line">      l3_3: <span class="function">() =&gt;</span> <span class="string">'l3_3'</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  l1_2: <span class="string">'My original object'</span></span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure><h1 id="‘Standard’-cloning"><a href="#‘Standard’-cloning" class="headerlink" title="‘Standard’ cloning"></a>‘Standard’ cloning</h1><p>We’ll use a ‘<em>standard</em>‘ cloning by assign the source value to other constant</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> copiedObject = sourceObject</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sourceObject'</span>, sourceObject.l1_2)</span><br><span class="line"><span class="comment">// My original object --&gt; ✔️</span></span><br><span class="line"></span><br><span class="line">clonedObject.l1_2 = <span class="string">'My cloned object'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'clonedObject'</span>, clonedObject.l1_2)</span><br><span class="line"><span class="comment">// My original object --&gt; ✔️</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sourceObject'</span>, sourceObject.l1_2)</span><br><span class="line"><span class="comment">// My original object --&gt; ❌</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codesandbox.io/s/practical-violet-dki61?fontsize=14&amp;hidenavigation=1&amp;theme=dark"><img src="https://codesandbox.io/static/img/play-codesandbox.svg" alt="Edit practical-violet-dki61"></a></p><p>As I said before, when I change property <code>l1_2</code> on cloned object, the value also changes on the source object.</p><p>Using this strategy, you are not copying the object at all.</p><h1 id="Using-spread-operator"><a href="#Using-spread-operator" class="headerlink" title="Using spread operator"></a>Using spread operator</h1><p>This time I’ll use the spread operator, that ‘returns’ every element in the object individually.</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'sourceObject l1_2'</span>, sourceObject.l1_2)</span><br><span class="line"><span class="comment">// My original object --&gt; ✔️</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sourceObject l1_1.l2_1'</span>, sourceObject.l1_1.l2_1)</span><br><span class="line"><span class="comment">// 123 --&gt; ✔️</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clonedObject = { ...sourceObject }</span><br><span class="line">clonedObject.l1_2 = <span class="string">'My cloned object'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'clonedObject'</span>, clonedObject.l1_2)</span><br><span class="line"><span class="comment">// My cloned object --&gt; ✔️</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sourceObject'</span>, sourceObject.l1_2)</span><br><span class="line"><span class="comment">// My original object  --&gt; ✔️</span></span><br><span class="line"></span><br><span class="line">clonedObject.l1_1.l2_1 = <span class="string">'321'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'clonedObject l1_1.l2_1'</span>, clonedObject.l1_1.l2_1)</span><br><span class="line"><span class="comment">// 123 --&gt; ✔️</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sourceObject l1_1.l2_1'</span>, sourceObject.l1_1.l2_1)</span><br><span class="line"><span class="comment">// 123 --&gt; ❌️</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codesandbox.io/s/sleepy-rain-1gtsb?expanddevtools=1&amp;fontsize=14&amp;hidenavigation=1&amp;theme=dark"><img src="https://codesandbox.io/static/img/play-codesandbox.svg" alt="Edit sleepy-rain-1gtsb"></a></p><p>Now property <code>l2_1</code> is copied by value, we can change it and original object <code>l2_1</code> keeps original value, but if when I changed <code>l1_1.l2_1</code> (2th depth property) we get the same as the first attempt. </p><p>Spread operator do a <em>shallow copy</em> of the object. Only first level depth properties are copied by value, the nested ones keeps copying by reference.</p><h1 id="Using-Object-assign"><a href="#Using-Object-assign" class="headerlink" title="Using Object.assign"></a>Using <code>Object.assign</code></h1><p>Like <em>spread operator</em>, just do a <em>shallow copy</em>, then I will not create the example, trust me, you will get the same result.</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> clonedObject = <span class="built_in">Object</span>.assign({}, sourceObject)</span><br></pre></td></tr></tbody></table></figure><h1 id="Using-JSON-parse-and-JSON-stringify"><a href="#Using-JSON-parse-and-JSON-stringify" class="headerlink" title="Using JSON.parse and JSON.stringify"></a>Using <code>JSON.parse</code> and <code>JSON.stringify</code></h1><p>This is a simple and fast way to deep clone an object, the point is convert the object to string with <code>JSON.stringify</code> and then get an object from the string using <code>JSON.parse</code></p><p>Lets do it</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> clonedObject = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(sourceObject))</span><br><span class="line"></span><br><span class="line">clonedObject.l1_1.l2_1 = <span class="string">'321'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'clonedObject l1_1.l2_1'</span>, clonedObject.l1_1.l2_1)</span><br><span class="line"><span class="comment">// 321 --&gt; ✔️</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sourceObject l1_1.l2_1'</span>, sourceObject.l1_1.l2_1)</span><br><span class="line"><span class="comment">// 123 --&gt; ✔</span></span><br></pre></td></tr></tbody></table></figure><p>Everything seems fine! :tada:<br>But, did you notice <code>l1_1.l2_3.l3_3</code> property is a function? <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8">😢</span></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'clonedObject l1_1.l2_3.l3_3'</span>, clonedObject.l1_1.l2_3.l3_3)</span><br><span class="line"><span class="comment">// undefined --&gt; ❌️</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sourceObject l1_1.l2_3.l3_3'</span>, sourceObject.l1_1.l2_3.l3_3)</span><br><span class="line"><span class="comment">// function l3_3() {} --&gt; ✔️</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codesandbox.io/s/xenodochial-frost-q8k71?expanddevtools=1&amp;fontsize=14&amp;hidenavigation=1&amp;theme=dark"><img src="https://codesandbox.io/static/img/play-codesandbox.svg" alt="Edit xenodochial-frost-q8k71"></a></p><p>Oh, oh, functions are not copied using that method, then, what could  we do? The solution is iterate every nested property in the object and use, for example, the spread operator method. Hard and dirty work.</p><h1 id="Loadash-to-the-rescue"><a href="#Loadash-to-the-rescue" class="headerlink" title="Loadash to the rescue"></a>Loadash to the rescue</h1><p><a href="https://lodash.com/">Lodash</a> is a modular utility library that adds many funcionalities, and one of them is <a href="https://lodash.com/docs/4.17.15#cloneDeep"><code>cloneDeep</code></a> that do exactily we need: clone (deep) an object through nested properties, keeping all value types, even functions.</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { cloneDeep } <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clonedObject = cloneDeep(sourceObject)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'clonedObject l1_1.l2_3.l3_3'</span>, clonedObject.l1_1.l2_3.l3_3)</span><br><span class="line"><span class="comment">// function l3_3() {} --&gt; ✔️</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sourceObject l1_1.l2_3.l3_3'</span>, sourceObject.l1_1.l2_3.l3_3)</span><br><span class="line"><span class="comment">// function l3_3() {} --&gt; ✔️</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codesandbox.io/s/trusting-currying-2o6uf?expanddevtools=1&amp;fontsize=14&amp;hidenavigation=1&amp;theme=dark"><img src="https://codesandbox.io/static/img/play-codesandbox.svg" alt="Edit trusting-currying-2o6uf"></a></p><h1 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h1><p>We’ll copy source object 10.000 times using each method to compare time elapsed. Compare memory usage is no sense because <code>Object.assign</code> and <em>Spread Operator</em> method are not copying nested property by value.</p><p>Results in my browser are following:</p><ul><li>Object.assign clone elapsed time: <strong>4ms</strong></li><li>Spread operator clone elapsed time: <strong>22ms</strong></li><li>JSON clone elapsed time: <strong>47ms</strong></li><li>Lodash clone elapsed time: <strong>92ms</strong></li></ul><p>As you can see, if you only need to do a shallow clone <code>Object.assign</code> is faster solution, and if you only need to clone values in nested properties (not functions or symbols), <code>JSON.parse(JSON.stringify())</code> could be a faster solution. But if you want make sure that all values are copied you must use <em>lodash</em> or a similar solution.</p><p>Test yourself in codesandbox!</p><p><a href="https://codesandbox.io/s/romantic-shannon-epf1o?expanddevtools=1&amp;fontsize=14&amp;hidenavigation=1&amp;theme=dark"><img src="https://codesandbox.io/static/img/play-codesandbox.svg" alt="Edit romantic-shannon-epf1o"></a></p><small>Header picture: <a style="background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &quot;San Francisco&quot;, &quot;Helvetica Neue&quot;, Helvetica, Ubuntu, Roboto, Noto, &quot;Segoe UI&quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px" href="https://unsplash.com/@pic_parlance?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge" target="_blank" rel="noopener noreferrer" title="Download free do whatever you want high-resolution photos from Karen Lau"><span style="display:inline-block;padding:2px 3px"><svg xmlns="http://www.w3.org/2000/svg" style="height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white" viewBox="0 0 32 32"><title>unsplash-logo</title><path d="M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z"></path></svg></span><span style="display:inline-block;padding:2px 3px">Karen Lau</span></a></small><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Cloning objects in &lt;em&gt;Javascript&lt;/em&gt; (and in other language) is a tricky task. JS doesn’t store the object value in your variable or in
      
    
    </summary>
    
    
    
      <category term="js clone deep-clone" scheme="https://sergiocarracedo.es/tags/js-clone-deep-clone/"/>
    
  </entry>
  
  <entry>
    <title>Vue Router lazy loading and chunking</title>
    <link href="https://sergiocarracedo.es/2019/12/29/vue-router-lazy-loading-and-chunking/"/>
    <id>https://sergiocarracedo.es/2019/12/29/vue-router-lazy-loading-and-chunking/</id>
    <published>2019-12-29T00:00:00.000Z</published>
    <updated>2020-10-18T12:55:49.874Z</updated>
    
    <content type="html"><![CDATA[<p>When you start to create SPA <em>(Single page application)</em> you must bear in mind that SPA doesn’t mean <em>Single JavaScript file</em>.</p><p>You normally use <em>Webpack</em> to handle your app builds, by default, <em>Webpack</em> create one file for all assets, <em>even CSS</em>. </p><p>The first step, maybe, is separate styles from <em>app.js</em> in their own CSS files.</p><p>To do this, we’ll use the <em>Webpack</em> plugin <em><a href="https://webpack.js.org/plugins/mini-css-extract-plugin/">MiniCssExtractPlugin</a></em> which we’ll configure like this:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin({</span><br><span class="line">      filename: <span class="string">'[name].css'</span></span><br><span class="line">    })</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">      {</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          {</span><br><span class="line">            loader: MiniCssExtractPlugin.loader,</span><br><span class="line">            options: {</span><br><span class="line">              publicPath: <span class="string">'/public/path/to/'</span>,</span><br><span class="line">            },</span><br><span class="line">          },</span><br><span class="line">          <span class="string">'css-loader'</span>,</span><br><span class="line">          ... <span class="comment">// Other loaders like sass-loader or postcss-loader</span></span><br><span class="line">        ],</span><br><span class="line">      }</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  },</span><br></pre></td></tr></tbody></table></figure><p>This forces <em>Webpack</em> to extract CSS into separated files, for example <code>app.css</code></p><p>If you use <em>vue-cli</em>, this is the default config for <em>Webpack</em>. </p><h3 id="Going-forward"><a href="#Going-forward" class="headerlink" title="Going forward"></a>Going forward</h3><p>For simple apps it is a good idea keep all your built code into a single file, because client’s browser loads <code>app.css</code> the first time user accesses your app and keep it in cache, next access the file will be served from local browser’s cache (until cache expire).</p><p>But when your application starts to grow the <code>app.js</code> will be huge, slowing down the page loading. There will even be parts of the app that are never used, for example “pages” (in this context think pages as Vue page component, not static pages) forbidden for regular users.</p><p>In this case a good solution is chunking your <code>app.js</code> using <a href="https://vuejs.org/v2/guide/components-dynamic-async.html">async components</a> for page components. You can split every page into different files which will be loaded when user navigates to route.</p><p>This strategy uses the <em><a href="https://webpack.js.org/guides/code-splitting/">Webpack’s code splitting</a></em> feature.</p><p>In Vue router configuration you just do </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  {</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    name: <span class="string">'home'</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'./views/HomeComponent'</span>)</span><br><span class="line">  },</span><br><span class="line">  ...</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p><em>Webpack</em> now will create a separated file for your page components. But this way the user receives no feedback about the loading process. We could improve the router using a loading component. </p><p>An async component must provide a <em>Promise.resolve</em>. When you write <code>() =&gt; import('./views/HomeComponent')</code> implicit you return a <em>Promise</em> that resolves the component. But if you want to use the <em><a href="https://vuejs.org/v2/guide/components-dynamic-async.html#Handling-Loading-State">handling loading state</a></em> you need to return an explicit <em>Promise</em></p><p>Like this:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> LoadingComponent <span class="keyword">from</span> <span class="string">'./LoadingComponent'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  {</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    name: <span class="string">'home'</span>,</span><br><span class="line">    component: lazyLoading(<span class="keyword">import</span>(<span class="string">'./views/HomeComponent'</span>)) </span><br><span class="line">  },</span><br><span class="line">  ...</span><br><span class="line">]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazyLoadView</span> (<span class="params">AsyncPageComponent</span>) </span>{</span><br><span class="line">  <span class="keyword">const</span> AsyncHandler = <span class="function">() =&gt;</span> ({</span><br><span class="line">    component: AsyncPageComponent,    </span><br><span class="line">    loading: LoadingComponent,</span><br><span class="line">    ...</span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve({</span><br><span class="line">    functional: <span class="literal">true</span>,</span><br><span class="line">    render: <span class="function">(<span class="params">h, { data, children }</span>) =&gt;</span> h(AsyncHandler, data, children)</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>As you can see, we use a <em>Promise.resolve</em> that returns component render function.</p><p><em>data</em> and <em>children</em> are necessary to pass props, attributes and events to component <a href="https://vuejs.org/v2/guide/render-function.html#Passing-Attributes-and-Events-to-Child-Elements-Components">More info</a></p><p>With these changes, when the user navigate to <code>/</code> firstly, the app shows the <em>LoadingComponent</em> and then, when the component is fully loaded, shows it.<br>Finally, say that you can group the components in the same <em>chunk</em> using the following notation.</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "group-main" */</span> <span class="string">'./HomeComponent.vue'</span>)</span><br><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "group-main" */</span> <span class="string">'./LoginComponent.vue'</span>)</span><br><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "group-admin" */</span> <span class="string">'./AdminPageComponent.vue'</span>)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;When you start to create SPA &lt;em&gt;(Single page application)&lt;/em&gt; you must bear in mind that SPA doesn’t mean &lt;em&gt;Single JavaScript file&lt;/e
      
    
    </summary>
    
    
    
      <category term="vue" scheme="https://sergiocarracedo.es/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Instagram RGB Project</title>
    <link href="https://sergiocarracedo.es/2019/12/23/instagram-rbg/"/>
    <id>https://sergiocarracedo.es/2019/12/23/instagram-rbg/</id>
    <published>2019-12-23T00:00:00.000Z</published>
    <updated>2020-10-18T12:55:49.874Z</updated>
    
    <content type="html"><![CDATA[<p>This is my first post  in English. I joined a team whose main language is English and I need to improve it <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f61e.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f61e.png?v8">😞</span></p><p>I will start writing about non-technical topics, in this case about my 3 public Instagram accounts.</p><h3 id="Red"><a href="#Red" class="headerlink" title="Red"></a>Red</h3><p>About 3 years ago, in 2016, I decided to create an Instagram account only for red things pictures because I thought in the global visual effect in the account profile page. This is the effect I am talking about:</p><img src="/images/instagram/sergiocarracedo-red.png" class="photoswipe mb-0"><p>&nbsp;</p><p>This is that account <a href="https://www.instagram.com/sergiocarracedo.red/">https://www.instagram.com/sergiocarracedo.red/</a></p><h3 id="Green"><a href="#Green" class="headerlink" title="Green"></a>Green</h3><p>In August of this year I created another account with same concept, but for green things: <a href="https://www.instagram.com/sergiocarracedogreen/">https://www.instagram.com/sergiocarracedogreen/</a></p><img src="/images/instagram/sergiocarracedo-green.png" class="photoswipe mb-0"><h3 id="Blue"><a href="#Blue" class="headerlink" title="Blue"></a>Blue</h3><p>And a few days later, I completed the RGB project creating the blue one: <a href="https://www.instagram.com/sergiocarracedo.blue/">https://www.instagram.com/sergiocarracedo.blue/</a></p><img src="/images/instagram/sergiocarracedo-blue.png" class="photoswipe mb-0"><p>&nbsp;</p><p>In the beginning I thought that taking pictures based on a single color would be easy but I was wrong. Taking pictures is complicated, maybe the red are the easiest, and blue ones the hardest, always with the constraint of not repeating topic.</p><p>There are a lot of blue ones if you think of the sea and the skies, but all those pictures would be similar.</p><p>If you like this idea (different Instagram accounts based in color), please follow them:</p><p>Red: <a href="https://www.instagram.com/sergiocarracedo.red/">https://www.instagram.com/sergiocarracedo.red/</a><br>Green: <a href="https://www.instagram.com/sergiocarracedogreen/">https://www.instagram.com/sergiocarracedogreen/</a><br>Blue: <a href="https://www.instagram.com/sergiocarracedo.blue/">https://www.instagram.com/sergiocarracedo.blue/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is my first post  in English. I joined a team whose main language is English and I need to improve it &lt;span class=&quot;github-emoji&quot; sty
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Simracing: Muy real y mucho real</title>
    <link href="https://sergiocarracedo.es/2019/12/11/simracing-mas-real-que-virtual/"/>
    <id>https://sergiocarracedo.es/2019/12/11/simracing-mas-real-que-virtual/</id>
    <published>2019-12-11T00:00:00.000Z</published>
    <updated>2020-10-18T12:55:49.874Z</updated>
    
    <content type="html"><![CDATA[<p>Llevo mucho tiempo jugando a simuladores de conducción, especialmente de F1, y cuando digo mucho tiempo, es mucho tiempo, más de 20 años <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f613.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f613.png?v8">😓</span>, desde el <a href="https://www.youtube.com/watch?v=qATaCWHLAxw">Microprose Grand Prix</a> hasta uno de los más actuales que he jugado: <a href="https://www.lfs.net/">Live for Speed</a></p><p>Nótese que hablo de <strong>simuladores</strong> no de juegos de coches en general. Y por simulador podemos entender que el juego trata de imitar de la formas más realista posible la experiencia de conducción y competición: Principalmente las físicas del vehículo: Amortiguaciones, Ruedas (temperaturas, desgaste, suciedad), aerodinámica, ángulos de caída, motor, inercias, etc.</p><p>Obviamente los primeros simuladores no eran totalmente fidedignos a la realidad física, pero el paso del tiempo y el aumento de la potencia de los equipos ha permitido que los cálculos de físicas lleguen a unos niveles de realismo muy alto.</p><p>También otras tecnologías como el LIDAR han permitido el escaneo 3D de los circuitos, pudiendo llevar al simulador hasta el más mínimo bache o irregularidad del asfalto. En este video de iRacing se muestra el proceso de escaneo de un circuito: </p><div class="video-container"><iframe src="https://www.youtube.com/embed/IcqLEIE8MBk" frameborder="0" loading="lazy" allowfullscreen=""></iframe></div><br>Desde hace ya años los equipos de <strong>Fórmula 1</strong> disponen de simuladores propios, para que sus pilotos puedan entrenar y probar distintos <em>setups</em> del coche antes de realmente a pista o incluso antes de fabricar alguna pieza. De hecho la mayoría de ellos tienen actualmente la figura del <em>piloto de desarrollo</em> que es el encargado de pasarse, literalmente, horas y horas en el simulador, para que los <em>setups</em> de partida en cada una de las carreras sean lo mejores posibles.<p></p><p>Esto es una de las pruebas de que el mundo físico (Real) y el virtual (Simuladores) cada día tiene las fronteras más difuminadas.</p><p>Otra pieza importante son las mejora de las interfaces de interacción con el simulador, los volantes, pedaleras, cambios, sillas, etc. Un volante para PC o consola de buena calidad, con un <em>force feedback</em> de calidad, y tacto bastante realista ronda los <a href="https://fanatec.com/eu-en/bundles/forza-motorsport-wheel-bundle-for-xbox-one-pc">1000-1500€</a>, aunque hay volante y pedales bastante decentes <a href="https://www.amazon.es/Logitech-G29-Simulaci%C3%B3n-incluidos-Compatible/dp/B00YUIM2J0/ref=pd_sbs_147_img_0/259-9260620-8775035?_encoding=UTF8&amp;pd_rd_i=B00YUIM2J0&amp;pd_rd_r=b2f6d2b1-39cf-4bc4-8687-bad7f8eda145&amp;pd_rd_w=LzZHX&amp;pd_rd_wg=IDkKj&amp;pf_rd_p=45c8f3df-c10f-46f2-ac72-29f4fe8ecc31&amp;pf_rd_r=JDDVAGW3XAAFX129NF5W&amp;psc=1&amp;refRID=JDDVAGW3XAAFX129NF5W">por 200€</a> (Yo tengo actualmente un <a href="https://www.pccomponentes.com/logitech-driving-force-gt-pc-ps3-ps2">Logitech Driving Force GT</a> que es más que suficiente para un uso ocasional)</p><p>Como decía cada vez están más difuminadas las fronteras entre el <em>Racing</em> y el <em>Simracing</em>, en 2008 Nissan, PlayStation(r) y Polyphony Digital (creados de Gran Turismo) crearon la <a href="https://www.gran-turismo.com/es/academy/">GT Academy</a> un concurso que permite a los ganadores del concurso (que compiten en la PS4) la oportunidad de conseguir una plaza en el equipo de carreras de Nissan (equipo de competición en el mundo Real). Es decir esta habiendo un transvase de talento del mundo virtual al real.</p><p>Hay que pensar que competir en carreras de coches es algo muy caro que no esta al alcance de todo el mundo, además de los riesgos que supone, el simracing permite reducir esa barrera, reduciendo los costes a la mínima expresión y pudiendo “entrenar” y practicar con la seguridad de estar sentado en un simulador.</p><p>Y es más, las compañías y federaciones han apostado por fomentar la competición oficial virtual, por ejemplo la Fórmula 1 con <a href="https://f1esports.com/">F1esports</a> apoyado por los propios equipos de la competición “real”. <em>Logitech</em> patrocinando el equipo <a href="https://es.mclaren.com/racing/patrocinador/logitech/">McLaren de F1</a></p><p>Pero si hay un “juego” que ha hecho mucho por el <em>Simracing</em> creo que puedo decir sin temor a equivocarme que ha sido <strong><a href="https://www.iracing.com/">iRacing</a></strong>.</p><h4 id="iRacing"><a href="#iRacing" class="headerlink" title="iRacing"></a>iRacing</h4><p><em>iRacing</em> tiene un modelo bastante distinto a lo habitual:</p><ul><li>por un lado, en lugar pagar por un juego, se paga por una subscripción mensual que da acceso al juego y al uso de ciertos coches y pistas (se puede acceder a más pagando por ellas y ellos)</li><li>Está totalmente orientado a la competición online, y aunque se pueden hacer carreras privadas, está orientado a competiciones “oficiales” que organiza la propia <em>iRacing</em> en determinados días a determinadas horas.</li><li>Y lo que, para mí, es más interesante. El <a href="https://simracer.es/como-funciona-el-irating/">irating</a> que es una valoración de cada piloto según las posiciones que consigues en cada carrera. Las carreras se dividen en <em>splits</em> de 20-30 coches con pilotos con <em>irating</em> similar. Esto hace que en cada carrera compitas con pilotos de un nivel similar al tuyo y que vayas progresando poco a poco. También se valora el <em><a href="https://simracer.es/como-funciona-el-safety-rating/">Safety rating</a></em> que penaliza los incidentes de carrera, evitando que los “Maldonado” de turno fastidien la carrera de los demás en la medida de lo posible.</li></ul><p>El nivel que he visto en esta plataforma es bestial y prueba de ello, es que pilotos profesionales están “jugando” en iRacing, no sé si para entrenar o simplemente para entretenerse.</p><p>Por ejemplo en esta carrera que pude ver en directo hace unos días del <em>streamer</em> español <a href="https://www.youtube.com/channel/UCn5KQNxL_WmaM10_KPD4bhw">Keny500</a></p><div class="video-container"><iframe src="https://www.youtube.com/embed/fnSoCgrf1PY" frameborder="0" loading="lazy" allowfullscreen=""></iframe></div><p>En esta carrera los 4 primeros clasificadores eran:</p><ul><li><a href="https://es.wikipedia.org/wiki/Max_Verstappen">Max Verstappen</a> piloto oficial de Red Bull Racing de Formula 1, que 2 días antes de esa carrera virtual había ganado el Gran Premio do Brasil de F1 (en el mundo real)</li><li><a href="https://es.wikipedia.org/wiki/Lando_Norris">Lando Norris</a> piloto oficial de McLaren F1 (compañero del español Carlos Sainz)</li><li><a href="https://es.wikipedia.org/wiki/Bruno_Spengler">Bruno Spengler</a> piloto canadiense de la <a href="https://es.wikipedia.org/wiki/Deutsche_Tourenwagen_Masters">DTM</a></li><li><a href="https://es.wikipedia.org/wiki/Daniel_Juncadella">Dani Juncadella</a> piloto de DTM y ganador del <a href="https://es.wikipedia.org/wiki/Gran_Premio_de_Macao_de_2011">Gran Premio de Macao en 2011</a></li></ul><p>De hecho Lando Norris <em>streamea</em> en <a href="https://www.twitch.tv/landonorris">Twitch</a> sus carreras en iRacing (y otros juegos)</p><p>Y parece que recientemente <a href="https://es.wikipedia.org/wiki/Carlos_Sainz_Jr.">Carlos Sainz</a>, piloto oficial de McLaren F1, también se ha unido a este grupo:</p><div class="video-container"><iframe src="https://www.youtube.com/embed/LI8Js6kI0VY" frameborder="0" loading="lazy" allowfullscreen=""></iframe></div><p>Aprovecho para dejar un lista de <em>youtubers</em> / <em>streamers</em> que emiten habitualmente carreras que en muchas ocasiones son igual o más entretenidas (y competidas) que las reales.</p><ul><li>Heikki360 <a href="https://www.youtube.com/channel/UC3gdaplfyzSr2YjHHwxRhPQ">YouTube</a> | <a href="https://www.twitch.tv/heikki360es">Twitch</a></li><li>Kenny500 <a href="https://www.youtube.com/keny500">YouTube</a> | <a href="https://www.twitch.tv/keny500">Twitch</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Llevo mucho tiempo jugando a simuladores de conducción, especialmente de F1, y cuando digo mucho tiempo, es mucho tiempo, más de 20 años 
      
    
    </summary>
    
    
    
      <category term="simracing esports" scheme="https://sergiocarracedo.es/tags/simracing-esports/"/>
    
  </entry>
  
</feed>

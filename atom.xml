<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sergio Carracedo</title>
  
  
  <link href="https://sergiocarracedo.es/atom.xml" rel="self"/>
  
  <link href="https://sergiocarracedo.es/"/>
  <updated>2022-09-08T07:23:28.009Z</updated>
  <id>https://sergiocarracedo.es/</id>
  
  <author>
    <name>Sergio Carracedo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Las arquitecturas limpias como necesidas</title>
    <link href="https://sergiocarracedo.es/arquitecturas-limpias-como-necesidad/"/>
    <id>https://sergiocarracedo.es/arquitecturas-limpias-como-necesidad/</id>
    <published>2022-09-08T00:00:00.000Z</published>
    <updated>2022-09-08T07:23:28.009Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Este post fue escrito originalmente e incluido en la revista de la <a href="https://pulpocon.es/">#pulpoCon22</a></p></blockquote><p>Todo tiene su momento y las soluciones que valen hoy, pueden no servir para mañana.</p><p>Por eso, cuando hablamos de arquitecturas limpias, clean code, desacomplarte del framework, etc. en muchos casos nos suenan a que nuestro producto va a ser mejor solo por el hecho de aplicarlas.</p><p>Pero no siempre es así, hay fases en la que la simplicidad del código prima sobre su “belleza”, donde la rapidez en el delivery prima sobre la abstracción, pero lo importante es que seamos conscientes antes o despues necesitaremos arquitecturas limpias para seguir creciendo y escalando.</p><p><strong>Y esto no deber ser un trauma</strong>, es la madurez  que poco a poco va alcanzando el proyecto en el que trabajas.</p><p>Llegará un momento en el que desacoplarte del framework será una necesidad de la que tu y tu equipo os dareis cuenta, por que un dia quereis actualizar el framework y sabes que va a ser un dolor, porque quieres mejorar el testing y necesitas levantar una base de datos para testar una tarea simple, porque el equipo crece, y para empezar a tocar el código se necesita un onboarding muy largo</p><p>Ese es el momento donde entiendes que las cosas se pueden hacer de otra forma, que ahora es mejor para el crecimiento de tu proyecto.</p><p>Las arquitecturas limpias no son un capricho, o algo que “queda bien” , no son un objetivo, son simplemente un medio para resolver necesidades de los proyectos.</p><p>En el germen del proyecto, no son necesarias, pueden incluso llegar a ser un estorbo, pero tienes que ser conciente que según crece el proyecto las arquitecturas limpias serán, cada dia que pase, una necesidad que vendrá a ayudarte.</p><p><img src="/images/2022/arquitecturas-limpias-revista.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Este post fue escrito originalmente e incluido en la revista de la &lt;a href=&quot;https://pulpocon.es/&quot;&gt;#pulpoCon22&lt;/a&gt;&lt;/p&gt;
&lt;/bloc</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Generics in Golang 1.18</title>
    <link href="https://sergiocarracedo.es/generics-in-golang-1.18/"/>
    <id>https://sergiocarracedo.es/generics-in-golang-1.18/</id>
    <published>2022-02-28T00:00:00.000Z</published>
    <updated>2022-09-08T07:23:28.009Z</updated>
    
    <content type="html"><![CDATA[<p>At the moment of writing this post Go 1.18 wasn’t released  (the latest version for 1.18 is the <a href="https://groups.google.com/g/golang-announce/c/QHL1fTc352o/m/5sE6moURBwAJ">Release Candidate 1</a>), but we can still play using the <a href="https://go.dev/play/">playground</a> (enabling the dev branch) or installing the RC</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go install golang.org/dl/go1.18rc1@latest</span><br><span class="line">go1.18rc1 download</span><br></pre></td></tr></tbody></table></figure><p>One of the most interesting novelties is the <em>generics</em> in a similar way we have in other languages (C#, Java, Typescript, etc…). Generics allow us as developers, for example, to create a function that works with different types. The classical example Go uses in its blog to explain <a href="https://go.dev/blog/why-generics">why generics</a> (highly recommended), is a function that does some operation over an array, for example, reverse the array. Now we must write the same function for different types, ex: int, float, string, etc</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">func ReverseInts(s []int) {</span><br><span class="line">    first := 0</span><br><span class="line">    last := len(s) - 1</span><br><span class="line">    for first &lt; last {</span><br><span class="line">        s[first], s[last] = s[last], s[first]</span><br><span class="line">        first++</span><br><span class="line">        last--</span><br><span class="line">    }    </span><br><span class="line">}</span><br><span class="line">func ReverseStrings(s []string) {</span><br><span class="line">    first := 0</span><br><span class="line">    last := len(s) - 1</span><br><span class="line">    for first &lt; last {</span><br><span class="line">        s[first], s[last] = s[last], s[first]</span><br><span class="line">        first++</span><br><span class="line">        last--</span><br><span class="line">    }    </span><br><span class="line">}</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><p>As you see the code inside the function is exactly the same for both types, only the changes the types in signature. That is not nice because we should maintain the same logic in 2, 3, or more different places.</p><p>How we can achieve it using generics: adding a new element to the signature between brackets <em>[<em>typeName</em> <em>constraint</em>]</em> and using this <code>T</code> definition as the argument Type<br>Like in this example:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func Reverse[T any] (s []T) {</span><br><span class="line">    first := 0</span><br><span class="line">    last := len(s) - 1</span><br><span class="line">    for first &lt; last {</span><br><span class="line">        s[first], s[last] = s[last], s[first]</span><br><span class="line">        first++</span><br><span class="line">        last--</span><br><span class="line">    }    </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Reverse[int]([]int{1, 2, 3, 4})</span><br><span class="line">Reverse[string]([]string{"1", "2", "3", "4"})</span><br></pre></td></tr></tbody></table></figure><p><a href="https://go.dev/play/p/0IrUF_f54bK?v=gotip">Try it on playground</a></p><p>Note you can have multiple generics in the same function even the return type can be typed: <code>func [T any, U  any](arg0 T) U</code></p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><p>In the examples above we are using <code>any</code> as a constraint that means all the types can be used with the function, but in most of the cases we will need to limit the types we can use the function, </p><p>The next simpler constraint is the union type:</p><p>The union type is a list of possible types: <code>int | float64</code>. In our previous example, trying to <code>Reverse</code> an array of strings will return the error <code>string does not implement int</code>. That means Go is not comparing the types themselves, is comparing the interface of the types, and that is important for the next type of constraint.</p><p>Imagine we want to create a function to get the minimum value in the array, we could write something like:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// Not this function only works for positive numbers. but it's for example pourpouse</span><br><span class="line">func Max[T any](values []T) T {</span><br><span class="line">  var max T </span><br><span class="line">  for _, v := range values {</span><br><span class="line">     if v &gt; max {</span><br><span class="line">        max = v</span><br><span class="line">     }</span><br><span class="line">  }</span><br><span class="line">  return max</span><br><span class="line">}</span><br><span class="line">a := []int{1, 2, 3, 4, 5}</span><br><span class="line">fmt.Println("Max:", Max[int](a))</span><br></pre></td></tr></tbody></table></figure><p>If we run above we will get the error <code>invalid operation: v &gt; max (type parameter T is not comparable with &gt;)</code>. That is because not all the types represented by <code>any</code> implement the operator &gt; and are not comparable.</p><p>We can solve this using <code>func Max[T int|string](values []T) T</code> as signature, but there is a better way: using the <code>constraints</code> package (in the moment of writting this it was removed from the standard library and moved to )(exp/constrains](<a href="https://pkg.go.dev/golang.org/x/exp/constraints">https://pkg.go.dev/golang.org/x/exp/constraints</a>) <a href="https://go-review.googlesource.com/c/go/+/382460/">https://go-review.googlesource.com/c/go/+/382460/</a>)</p><p>So we can so</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import "golang.org/x/exp/constraints"</span><br><span class="line">func Max[T constraints.Ordered](values []T) T {</span><br><span class="line">....</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Type-approximation"><a href="#Type-approximation" class="headerlink" title="Type approximation"></a>Type approximation</h2><p>Is very common in Go creating custom types from a “primitive” type</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type MyString = string</span><br></pre></td></tr></tbody></table></figure><p>The problem with generics is that <code>MyString</code> is not the same type as <code>string</code>, so <code>func [T string|int]MyFunc(arg T)</code> will not work with <code>MyString</code>.</p><p>The way to solve it is the <code>type aproximation</code>: that is a type that underlying is the type specified. Let’s see it with an example: <code>~string</code> represent any type that is a pure <code>string</code> or is string underlying as our <code>MyString</code></p><p><a href="https://tip.golang.org/ref/spec#Interface_types">More info in the Go spec</a></p><h2 id="Generic-Structs"><a href="#Generic-Structs" class="headerlink" title="Generic Structs"></a>Generic Structs</h2><p>Go also supports generics in Structs:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">type MyGenericStruct[T string | int, U constraints.Ordered] struct {</span><br><span class="line">id    T</span><br><span class="line">value U</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// So this works and makes sense</span><br><span class="line">c := MyGenericStruct[int, string]{1, "2"}</span><br><span class="line">d := MyGenericStruct[string, int]{"c", 2}</span><br></pre></td></tr></tbody></table></figure><p>That means we can use generics in methods (but in a limited way), we can use generic in the receiver, but not in the method, this was [pushed to go 1.19]</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// Works</span><br><span class="line">func (m MyGenericStruct[T, U]) GetValue() U {</span><br><span class="line">return m.value</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// Doesn't Work</span><br><span class="line">func (m MyGenericStruct[T, U]) [A any]GetValueAndAdd(add A) U {</span><br><span class="line">return m.value + add</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>For the methods, we could use generics defined in the struct as a roundabout, but I think is not very elegant</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">type MyGenericStruct[T string | int, U constraints.Ordered, A any] struct {</span><br><span class="line">id    T</span><br><span class="line">value U</span><br><span class="line">}</span><br><span class="line">func (m MyGenericStruct[T, U]) [A any]GetValueAndAdd(add A) U {</span><br><span class="line">    return m.value + add</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="any"><a href="#any" class="headerlink" title="any"></a>any</h1><p>The new keyword <code>any</code> we used above it’s just an alias of <code>interface{}</code>, and we could use it in any place we were using interface{}, ex: <code>map[string]any</code></p><h1 id="Summarizing"><a href="#Summarizing" class="headerlink" title="Summarizing"></a>Summarizing</h1><p>In my opinion, generics in Go 1.18 are a big improvement in terms of flexibility creating reusable logic independent of the types but keeping the language robust.<br><em>Union types</em> are only allowed in the constraints so there is no ambiguity in the types as in other languages inside the function.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;At the moment of writing this post Go 1.18 wasn’t released  (the latest version for 1.18 is the &lt;a href=&quot;https://groups.google.com/g/gola</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Running workflows in you k8s cluster: Argo Workflows</title>
    <link href="https://sergiocarracedo.es/running-workflows-in-you-k8s-cluster-argo-workflows/"/>
    <id>https://sergiocarracedo.es/running-workflows-in-you-k8s-cluster-argo-workflows/</id>
    <published>2021-12-28T00:00:00.000Z</published>
    <updated>2022-09-08T07:23:28.009Z</updated>
    
    <content type="html"><![CDATA[<p>Simplifying it, a workflow is a list of tasks to run in some order and/or fulfilling some dependencies, for example, if we have 5 tasks to run: <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code>, <code>E</code>.<br>Task <code>C</code> depends on finishing tasks <code>A</code> and <code>B</code>, task <code>D</code> depends on finishing <code>C</code> and <code>E</code> </p><p>Something like this:</p><p><img src="/images/2021/argo-workflows/grafo.svg" alt="Grafo"></p><p>There are several tools to orchestrate that, but we’ll focus on <em><a href="https://argoproj.github.io/argo-workflows/">Argo Workflows</a></em></p><p><em>Argo Workflows is an open-source container-native workflow engine for orchestrating parallel jobs on <em>Kubernetes</em>.</em></p><p>Running over Kubernetes is one of the most characteristic things of Argo differentiating it from others.</p><p>Every task you define will run in a container or using other words, you must create a container to run the tasks, and all of it will run in your Kubernetes cluster</p><h2 id="Install-Argo-Workflows"><a href="#Install-Argo-Workflows" class="headerlink" title="Install Argo Workflows"></a>Install Argo Workflows</h2><p>Installing Argo Workflows is very easy, you only need to apply a manifest in your cluster to configure Argo’s services in the cluster:</p><p>For example <a href="https://raw.githubusercontent.com/argoproj/argo-workflows/master/manifests/quick-start-postgres.yaml">https://raw.githubusercontent.com/argoproj/argo-workflows/master/manifests/quick-start-postgres.yaml</a></p><p><small>More info: <a href="https://argoproj.github.io/argo-workflows/quick-start/">https://argoproj.github.io/argo-workflows/quick-start/</a></small></p><p>Argo Workflows also provides a URL to access a UI to manage Workflows, Events, Reports, Users, Docs, etc…</p><p>To keep track of the workflows, etc. Argo needs persistence for example: Postgres, MySQL, etc…</p><p>As is indicated in the official documentation is highly recommended create a namespace (ex. argo) in the cluster to “install” into it all Argo’s services.</p><h2 id="Workflows"><a href="#Workflows" class="headerlink" title="Workflows"></a>Workflows</h2><p>There are two types of workflows: <em>Regular workflows</em> and <em>Cron Workflows</em></p><p>Both are basically the same, but a <em>cron workflow</em> creates a <em>Regular workflow</em> automatically when should be executed according to the cron syntax, ex. */3 * * * * *. Note it can create more than one workflow </p><p>Workflows are defined as Kubernetes manifest that should be applied to the same namespace as Argo services.</p><p>This manifest defines all the tasks and their dependencies</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">argoproj.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Workflow</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-workflow</span> </span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">argoproj.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Workflow</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">generateName:</span> <span class="string">my-workflow</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">entrypoint:</span> <span class="string">tasksDependencies</span> <span class="comment"># This is the name of the template to run first</span></span><br><span class="line">  <span class="attr">templates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">exampleTask</span></span><br><span class="line">      <span class="attr">inputs:</span></span><br><span class="line">        <span class="attr">parameters:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">msg</span></span><br><span class="line">      <span class="attr">container:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">docker/whalesay</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">cowsay</span>]</span><br><span class="line">        <span class="attr">args:</span> [{{ <span class="string">inputs.parameters.msg</span> }}]</span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tasksDependencies</span></span><br><span class="line">      <span class="attr">dag:</span></span><br><span class="line">        <span class="attr">tasks:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sayHello</span></span><br><span class="line">            <span class="attr">template:</span> <span class="string">exampleTask</span></span><br><span class="line">            <span class="attr">arguments:</span></span><br><span class="line">              <span class="attr">parameters:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">text</span></span><br><span class="line">                  <span class="attr">value:</span> <span class="string">"Hello"</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sayNiceJob</span></span><br><span class="line">            <span class="attr">template:</span> <span class="string">exampleTask</span></span><br><span class="line">            <span class="attr">dependencies:</span> [ <span class="string">sayHello</span> ]</span><br><span class="line">            <span class="attr">arguments:</span></span><br><span class="line">              <span class="attr">parameters:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">text</span></span><br><span class="line">                  <span class="attr">value:</span> <span class="string">"Nice Job"</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sayRunning</span></span><br><span class="line">            <span class="attr">template:</span> <span class="string">exampleTask</span></span><br><span class="line">            <span class="attr">dependencies:</span> [ <span class="string">sayHello</span> ]</span><br><span class="line">            <span class="attr">arguments:</span></span><br><span class="line">              <span class="attr">parameters:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">text</span></span><br><span class="line">                  <span class="attr">value:</span> <span class="string">"Running"</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sayFinished</span></span><br><span class="line">            <span class="attr">template:</span> <span class="string">exampleTask</span></span><br><span class="line">            <span class="attr">dependencies:</span> [ <span class="string">sayRunning</span>, <span class="string">sayNiceJob</span>]</span><br><span class="line">            <span class="attr">arguments:</span></span><br><span class="line">              <span class="attr">parameters:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">text</span></span><br><span class="line">                  <span class="attr">value:</span> <span class="string">"It's over"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">entrypoint:</span> <span class="string">exampleTask</span> <span class="comment"># This is the name of the template to run first</span></span><br><span class="line">  <span class="attr">templates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">exampleTask</span></span><br><span class="line">      <span class="attr">inputs:</span></span><br><span class="line">        <span class="attr">parameters:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">msg</span></span><br><span class="line">      <span class="attr">container:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">docker/whalesay</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">cowsay</span>]</span><br><span class="line">        <span class="attr">args:</span> [<span class="string">"<span class="template-variable">{{ inputs.parameters.msg }}</span>"</span>]</span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tasksDependencies</span></span><br><span class="line">      <span class="attr">dag:</span></span><br><span class="line">        <span class="attr">tasks:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sayHello</span></span><br><span class="line">            <span class="attr">template:</span> <span class="string">exampleTask</span></span><br><span class="line">            <span class="attr">arguments:</span></span><br><span class="line">              <span class="attr">parameters:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">msg</span></span><br><span class="line">                  <span class="attr">value:</span> <span class="string">"Hello"</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sayNiceJob</span></span><br><span class="line">            <span class="attr">template:</span> <span class="string">exampleTask</span></span><br><span class="line">            <span class="attr">dependencies:</span> [ <span class="string">sayHello</span> ]</span><br><span class="line">            <span class="attr">arguments:</span></span><br><span class="line">              <span class="attr">parameters:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">msg</span></span><br><span class="line">                  <span class="attr">value:</span> <span class="string">"Nice Job"</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sayRunning</span></span><br><span class="line">            <span class="attr">template:</span> <span class="string">exampleTask</span></span><br><span class="line">            <span class="attr">dependencies:</span> [ <span class="string">sayHello</span> ]</span><br><span class="line">            <span class="attr">arguments:</span></span><br><span class="line">              <span class="attr">parameters:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">msg</span></span><br><span class="line">                  <span class="attr">value:</span> <span class="string">"Running"</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sayFinished</span></span><br><span class="line">            <span class="attr">template:</span> <span class="string">exapleTask</span></span><br><span class="line">            <span class="attr">dependencies:</span> [ <span class="string">sayRunning</span>, <span class="string">sayNiceJob</span>]</span><br><span class="line">            <span class="attr">arguments:</span></span><br><span class="line">              <span class="attr">parameters:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">msg</span></span><br><span class="line">                  <span class="attr">value:</span> <span class="string">"It's over"</span></span><br></pre></td></tr></tbody></table></figure><p>Let’s explain this example, but in the first view you can see the power of Argo</p><p>A template defines a job to be done, can be a <a href="https://argoproj.github.io/argo-workflows/workflow-concepts/#container">container</a> (as in our example), a <a href="https://argoproj.github.io/argo-workflows/workflow-concepts/#script">script</a>, a <a href="https://argoproj.github.io/argo-workflows/workflow-concepts/#resource">resource</a> (to do operations on the cluster’s resources directly from the workflow) and <a href="https://argoproj.github.io/argo-workflows/workflow-concepts/#suspend">suspend</a> that is just to wait the time defined.</p><p>In our example, we defined a template called <code>exampleTask</code> (this name must be unique and can be used to refer to this template).</p><p>For the task, we define one input parameter, a msg to print. This value can be referenced later.</p><p>This task uses a container with the image <code>docker/whalesay</code> from docker registry, but you can use your own and private registry, Argo runs the command <code>[cowsay]</code> and uses the input values defined previously as command arguments <code>[{{inputs.parameters.text}}]</code></p><p>Templates also can define <a href="https://argoproj.github.io/argo-workflows/workflow-concepts/#template-invocators">Template Invocators</a>, that are used to call other templates and do execution control, in our example we are using DAG ((Directed Acyclic Graph)[<a href="https://airflow.apache.org/docs/apache-airflow/1.10.12/concepts.html#:~:text=In%20Airflow%2C%20a%20DAG%20%E2%80%93%20or,and%20their%20dependencies)%20as%20code.]">https://airflow.apache.org/docs/apache-airflow/1.10.12/concepts.html#:~:text=In%20Airflow%2C%20a%20DAG%20%E2%80%93%20or,and%20their%20dependencies)%20as%20code.]</a>), but we can use also steps, but that allows us to create better dependencies</p><p>In our case we are defining 3 tasks, all use the same template with different params (but we can use different templates for different tasks), the entry point is <code>sayHello</code> and <code>sayNiceJob</code> and <code>sayRunning</code> after that, and finally <code>sayFinished</code> only will run after <code>sayNiceJob</code> and <code>sayRunning</code>.</p><p>An after applying the manifest: <code>kubectl -n argo -f workflow.yml</code> Argo runs it<br>This is how the workflow looks after running it</p><p><img src="/images/2021/argo-workflows/workflow01.png"></p><p>Clicking over a task we can get information about the run: the summary, the input and outputs, the container involved in the run, and the logs or the run</p><p><img src="/images/2021/argo-workflows/workflow02.png"></p><p>To summarizing, if you have a Kubernetes cluster and need to run workflows, Argo is a very good option.</p><p>I will write more blog post in the future about Argo, for example how to configure the access security.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Simplifying it, a workflow is a list of tasks to run in some order and/or fulfilling some dependencies, for example, if we have 5 tasks t</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Dealing with infinite pagination</title>
    <link href="https://sergiocarracedo.es/dealing-with-infinite-pagination/"/>
    <id>https://sergiocarracedo.es/dealing-with-infinite-pagination/</id>
    <published>2021-11-22T00:00:00.000Z</published>
    <updated>2022-09-08T07:23:28.009Z</updated>
    
    <content type="html"><![CDATA[<p>In the software development context, pagination is the process of dividing a list of items (rows) into groups of the same size.</p><p>For example if we have these items:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> items = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>]</span><br></pre></td></tr></tbody></table></figure><p>and we want to paginate in pages (groups) of 5 elements we should know the list or the total items in the list, and we can calculate the number of pages, and how to get the items on a page (I’m assuming that the page value starts in 0)</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> itemsPerPage = <span class="number">5</span></span><br><span class="line"><span class="keyword">const</span> items = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pages = <span class="built_in">Math</span>.ceil(items.length / itemsPerPage)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getPageItems = <span class="function">(<span class="params">items, page, itemsPerPage</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> items.slice(page * itemsPerPage, itemsPerPage)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p> This is the ideal situation where the list of items is known, and we are working only on frontend or backend.</p><p>The common situation is when your frontend shows the items and the paginator, and you get the data from an API. In this case, you will do a request like <code>https://example.com/list-items/?page=1</code> or better using <code>offset</code> and <code>limit</code> instead of <code>page</code> for more flexibility: <code>https://example.com/list-items/offset=0&amp;limit=5</code></p><p>In this situation to render the paginator, we must know the total number of items or pages, that is why the response of the server should be something similar to:</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"pagination"</span>: {</span><br><span class="line">    <span class="attr">"totalItems"</span>: <span class="number">16</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"items"</span>: [...]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Then, after loading the first page we will get the total items in the server, and we can calculate the number of pages and render the paginator.</p><p>If our database table from where we get the items is big, the operation of counting the total number of events can be very expensive.</p><h1 id="Pagination-without-knowing-the-total-count-of-items-a-k-a-Infinite-pagination"><a href="#Pagination-without-knowing-the-total-count-of-items-a-k-a-Infinite-pagination" class="headerlink" title="Pagination without knowing the total count of items (a.k.a. Infinite pagination)"></a>Pagination without knowing the total count of items (a.k.a. Infinite pagination)</h1><p>The concept is very similar to the <em>infinite scrolling</em>, where the user does scroll and when the scroll is in the last item, your component loads a few items more, and so on.</p><p>The different thing is we must show a paginator. How we should show the paginator?</p><p>As we don’t know the total number of pages we have some questions to answer: </p><ul><li>How many pages we must show in the paginator?</li><li>What is the last page?</li></ul><h2 id="The-algorithm"><a href="#The-algorithm" class="headerlink" title="The algorithm"></a>The algorithm</h2><p>This algorithm will help us to know how many pages we must show and how to know the last page</p><p>In our paginator component we must have two variables: </p><ul><li><code>page</code> is the current page</li><li><code>pages</code> is the total number of pages</li><li><code>lastPage</code> is the last confirmed page (default value <code>Number.POSITIVE_INFINITY</code>)</li></ul><p><code>pages</code> is a dynamic value, the initial value is <code>1</code></p><ol><li>Load the first page using the <code>offset</code> and <code>limit</code> params. <code>offset</code> will be 0 (it’s the first page), and limit will be, let’s say 10</li><li>If the count of loaded items is less than the <code>limit</code> in this case 10, then we know this is the last page</li><li>If not, if the count is 10, we increment the value of <code>pages</code> by 1, then our component must render a new page button.</li></ol><p>There is a special case: What happens if the last page has 10 items?<br>In that case when the user tries to go to this page, when we will load it we will get an empty list of items, then, we must set the value of <code>lastPage</code> to the last page with items and use <code>lastPage</code> to only render this number of pages.</p><p>With this simple algorithm we can create an infinite paginator, and obviously, it has some disadvantages:</p><ul><li>The user only can navigate the pages in order (Can’t go to page 10 from page 1 without pass through the page 2,3,4,5…)</li><li>If we have the case of 10 items (<code>limit</code> = page items) in the last page, is strange for the user to go back to the last page and remove the next button</li></ul><p>Despite these disadvantages is a good solution if our backend doesn’t let us know the total number of pages.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;In the software development context, pagination is the process of dividing a list of items (rows) into groups of the same size.&lt;/p&gt;
&lt;p&gt;Fo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Integration tests in Golang with dockertest </title>
    <link href="https://sergiocarracedo.es/integration-tests-in-golang-with-dockertest/"/>
    <id>https://sergiocarracedo.es/integration-tests-in-golang-with-dockertest/</id>
    <published>2021-11-09T00:00:00.000Z</published>
    <updated>2022-09-08T07:23:28.009Z</updated>
    
    <content type="html"><![CDATA[<p>Do integration testing (or system testing) usually means to have a database populated with data, services like redis, elasticsearch, etc… working, In general, any infrastructure with which our software interacts.</p><p>The most common way to do it is to have a replica of our production infrastructure. Actually, it’s relatively easy to achieve using containers, for example, docker containers. </p><p>We can set up and run a container for every service we need to replicate, we can orchestrate it with docker-compose and create some makefiles or just a simple script to prepare the infrastructure and run the integration tests.</p><p>If your tests are independent (they should), you must find the way to “restart” the infrastructure services between tests, and this can be hard to get with a separated infrastructure setup and tests (the infra is set up in a script and the tests are in Go files) </p><h1 id="dockertest"><a href="#dockertest" class="headerlink" title="dockertest"></a>dockertest</h1><p>If you are using Golang, you can use <a href="https://github.com/ory/dockertest">dockertest</a>, a library with which you can manage and orchestrate the containers in your Go test files.</p><p>Manage the test infrastructure container from the Go files allow us to control which service we need in each test (for example, some package is using a database but not Redis, makes no sense to run the Redis for this test)</p><h2 id="Installing-dockertest"><a href="#Installing-dockertest" class="headerlink" title="Installing dockertest"></a>Installing dockertest</h2><p>To install <em>dockertest</em>, just run</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/ory/dockertest/v3</span><br></pre></td></tr></tbody></table></figure><h2 id="Using-dockertest"><a href="#Using-dockertest" class="headerlink" title="Using dockertest"></a>Using dockertest</h2><p>The simplest way to set up the infrastructure with <em>dockertest</em> is to add the setup code in the <code>TestMain</code> function in your test file.</p><p><code>TestMain</code> is a function is called before running the tests in the package <a href="https://medium.com/goingogo/why-use-testmain-for-testing-in-go-dafb52b406bc">More info</a></p><p>This is an example of how to set up a MySQL service using <em>dockertest</em></p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mypackage_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"database/sql"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line">_ <span class="string">"github.com/go-sql-driver/mysql"</span></span><br><span class="line"><span class="string">"github.com/ory/dockertest/v3"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> db *sql.DB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMain</span><span class="params">(m *testing.M)</span></span> {</span><br><span class="line"><span class="comment">// uses a sensible default on windows (tcp/http) and linux/osx (socket)</span></span><br><span class="line">pool, err := dockertest.NewPool(<span class="string">""</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">log.Fatalf(<span class="string">"Could not connect to docker: %s"</span>, err)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// pulls an image, creates a container based on it and runs it</span></span><br><span class="line">resource, err := pool.Run(<span class="string">"mysql"</span>, <span class="string">"5.7"</span>, []<span class="keyword">string</span>{<span class="string">"MYSQL_ROOT_PASSWORD=secret"</span>})</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">log.Fatalf(<span class="string">"Could not start resource: %s"</span>, err)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// exponential backoff-retry, because the application in the container might not be ready to accept connections yet</span></span><br><span class="line"><span class="keyword">if</span> err := pool.Retry(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> {</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">db, err = sql.Open(<span class="string">"mysql"</span>, fmt.Sprintf(<span class="string">"root:secret@(localhost:%s)/mysql"</span>, resource.GetPort(<span class="string">"3306/tcp"</span>)))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> db.Ping()</span><br><span class="line">}); err != <span class="literal">nil</span> {</span><br><span class="line">log.Fatalf(<span class="string">"Could not connect to docker: %s"</span>, err)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RESERVED FOR DATABASE MIGRATIONS    </span></span><br><span class="line">        </span><br><span class="line">code := m.Run()</span><br><span class="line"></span><br><span class="line"><span class="comment">// You can't defer this because os.Exit doesn't care for defer</span></span><br><span class="line"><span class="keyword">if</span> err := pool.Purge(resource); err != <span class="literal">nil</span> {</span><br><span class="line">log.Fatalf(<span class="string">"Could not purge resource: %s"</span>, err)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">os.Exit(code)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Populate-database"><a href="#Populate-database" class="headerlink" title="Populate database"></a>Populate database</h2><p>Now we have the database service working, but this database is empty. <em>dockertest</em> is using a generic MySQL image for the container and nothing related to our app is there. </p><p>If you follow my posts, you would remember I wrote a post about <a href="/database-migrations-in-golang/" title="database migrations">database migrations</a> (if not you can take a look at it). In that post I talked about <em>go-migrate</em> a tool to run database migrations but, in it, I focused on the usage as CLI tool, now we will use it in our Go code</p><p>In the previous code in the line where we wrote <code>// RESERVED FOR DATABASE MIGRATIONS</code> we will add this code</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">m, err := migrate.NewWithDatabaseInstance(<span class="string">"file://&lt;path-to-migration-folder&gt;, "</span>mysql<span class="string">", driver)</span></span><br><span class="line"><span class="string">if err != nil {</span></span><br><span class="line"><span class="string">    log.Fatalf("</span>Error running migrations: %s<span class="string">", err)</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">err = m.Up()</span></span><br><span class="line"><span class="string">if err != nil {</span></span><br><span class="line"><span class="string">    log.Fatal(err.Error())</span></span><br><span class="line"><span class="string">}</span></span><br></pre></td></tr></tbody></table></figure><p>Then after <em>dockertest</em> ups the database, the migration tool populates the database and our integration tests can run with the same data in the database.</p><p>If the app has more than one package (that is the common situation), I put the services’ setup code in an independent file which is called from every package:</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// it_utils.go</span></span><br><span class="line"><span class="keyword">package</span> it_utils</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IntegrationTestSetup</span><span class="params">()</span> <span class="params">(*dockertest.Pool, *[]dockertestResource {</span></span></span><br><span class="line"><span class="function"><span class="params">  // Setup the services</span></span></span><br><span class="line"><span class="function"><span class="params">  //<span class="keyword">return</span> the pool and the resources</span></span></span><br><span class="line"><span class="function"><span class="params">}</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">func</span> IntegrationTestTeardown(pool *dockertest.Pool, resources []*dockertest.Resource)</span></span> {</span><br><span class="line"><span class="keyword">for</span> _, resource := <span class="keyword">range</span> resources {</span><br><span class="line"><span class="keyword">if</span> err := pool.Purge(resource); err != <span class="literal">nil</span> {</span><br><span class="line">fmt.Printf(<span class="string">"Could not purge resource: %s\n"</span>, err)</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Then in each package’s test we only need to add</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> my_package</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMyTests</span> <span class="params">(t *testing.T)</span></span> {</span><br><span class="line">    <span class="keyword">if</span> testing.Short() {</span><br><span class="line">t.Skip()</span><br><span class="line">}</span><br><span class="line">pool, resources := itutils.IntegrationTestSetup()</span><br><span class="line"><span class="keyword">defer</span> itutils.IntegrationTestTeardown(pool, resources)</span><br><span class="line"></span><br><span class="line">t.Run(<span class="string">"your test"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> {</span><br><span class="line">...</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestOtherTests</span> <span class="params">(t *testing.T)</span></span> {</span><br><span class="line">    <span class="keyword">if</span> testing.Short() {</span><br><span class="line">t.Skip()</span><br><span class="line">}</span><br><span class="line">pool, resources := itutils.IntegrationTestSetup()</span><br><span class="line"><span class="keyword">defer</span> itutils.IntegrationTestTeardown(pool, resources)</span><br><span class="line"></span><br><span class="line">t.Run(<span class="string">"your other test"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> {</span><br><span class="line">...</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Doing it in that way on every test block the service runs in a new container making the test completely independent.</p><p>As a last tip, I recommend putting the integration test in a different package to avoid circular imports.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Do integration testing (or system testing) usually means to have a database populated with data, services like redis, elasticsearch, etc…</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue Composition API: How to split and reuse code</title>
    <link href="https://sergiocarracedo.es/vue-composition-api-how-to-split-and-reuse-code/"/>
    <id>https://sergiocarracedo.es/vue-composition-api-how-to-split-and-reuse-code/</id>
    <published>2021-11-02T00:00:00.000Z</published>
    <updated>2022-09-08T07:23:28.009Z</updated>
    
    <content type="html"><![CDATA[<p>The Vue Composition API arrived at us in Nov 2018, 2 years ago, as a <a href="https://medium.com/vue-mastery/evan-you-previews-vue-js-3-0-ab063dec3547">preview</a> and become with <a href="https://dev.to/danielelkington/vue-s-darkest-day-3fgh">some controversial</a>, because people believed composition API would replace the traditional Object API, but would not.</p><p>Anyway, after start to develop Vue apps using the composition API I don’t want to go back, maybe for very small components makes you write more code than with the Object API, but in most cases, you can take advantage of the composition API features.</p><p>One of these features is code splitting, and by extension, code reusability.</p><h1 id="Options-API"><a href="#Options-API" class="headerlink" title="Options API"></a>Options API</h1><p>With the Options API we could reuse code through the mixins. The mixins in Vue works like a kind of object composition. Your component will use all the data, methods, etc presents in the mixin, and you can rewrite it. Let see an example. </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// Mixing</span><br><span class="line">export default {</span><br><span class="line">  props: {</span><br><span class="line">    color: String,</span><br><span class="line">    size: String</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    colorClasses: () =&gt; {</span><br><span class="line">      return [`color-${this.color}`]</span><br><span class="line">    },</span><br><span class="line">    sizeClasses: () =&gt; {</span><br><span class="line">      return [`size-${this.size}`]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Imagine we have components we can colorate or change the size, then our mixin includes the properties and the way (computed) to get the classes to apply, the mixing above do exactly that.</p><p>Now let write the component</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// Component </span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div :class="['component-a', ...colorClasses, ...sizeClasses]"&gt;</span><br><span class="line">    ....</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import colorSizeMixin from '...'  </span><br><span class="line">export default {</span><br><span class="line">  mixins: { </span><br><span class="line">    colorSizeMixin </span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>This thing works, but only looking at the component file, it’s very hard to know from where we get the <code>colorClasses</code> and <code>sizeClasses</code>. You need to go to the mixin definition to know from where we are getting the values or which properties you could use in your component.</p><p>Mixins have another limitation, mixin can’t adapt the behavior (in a simple way), I mean, you can’t change the mixin behavior passing to it a flag, in this example, for example, a list of valid colors to accept.</p><h1 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h1><p>Let’s do the same with the composition API</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useClasses.js</span></span><br><span class="line"><span class="keyword">import</span> { computed } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (props) =&gt; {</span><br><span class="line">    <span class="keyword">const</span> colorClasses = computed(<span class="function">() =&gt;</span> [<span class="string">`color-<span class="subst">${props.color}</span>`</span>])</span><br><span class="line">    <span class="keyword">const</span> sizeClasses =  computed(<span class="function">() =&gt;</span> [<span class="string">`size-<span class="subst">${props.size}</span>`</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      colorClasses,</span><br><span class="line">      sizeClasses</span><br><span class="line">    }</span><br><span class="line">      </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// Component (Vue 3)</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div :class="['component-a', ...colorClasses, ...sizeClasses]"&gt;</span><br><span class="line">    ....</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import { defineComponent } from 'vue'</span><br><span class="line">import useClasses from './useClasses.js'</span><br><span class="line"></span><br><span class="line">export default defineComponent({</span><br><span class="line">  props: {</span><br><span class="line">    color: String,</span><br><span class="line">    size: String</span><br><span class="line">  },</span><br><span class="line">  setup(props) {</span><br><span class="line">    const { colorClasses, sizeClasses } = useClasses(props)</span><br><span class="line">  </span><br><span class="line">    return {</span><br><span class="line">      colorClasses,</span><br><span class="line">      sizeClasses</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>Now we have the same functionality, the <code>colorClasses</code> and <code>sizeClasses</code> can be reusable in another component as we had using mixins. </p><p>Composition API has some advantages:</p><ul><li>It’s very easy to see from where the <code>colorClasses</code> and <code>sizeClasses</code> comes, and what input needs</li><li>We don’t need to “import” or use all the methods as in the mixins, for example here we can only get the sizeClasses computed value (<code>const { sizeClasses } = useClasses(props)</code>) without any modification in the <code>useClasses.js</code></li><li>We can parameterize the behavior, for example:</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useClasses.js </span></span><br><span class="line"><span class="keyword">import</span> { computed } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (props, allowedColors) =&gt; {</span><br><span class="line">    <span class="keyword">const</span> colorClasses = computed(<span class="function">() =&gt;</span>  allowedColors.indexOf(props.color) !== <span class="number">1</span> </span><br><span class="line">        ? [<span class="string">`color-<span class="subst">${props.color}</span>`</span>]</span><br><span class="line">        : []</span><br><span class="line">         </span><br><span class="line">    <span class="keyword">const</span> sizeClasses =  computed(<span class="function">() =&gt;</span> [<span class="string">`size-<span class="subst">${props.size}</span>`</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      colorClasses,</span><br><span class="line">      sizeClasses</span><br><span class="line">    }</span><br><span class="line">      </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Now we can pass to the <code>useClass</code> an array with all allowed colors that can be different in different components, with mixins that it’s hard to achieve.</p><h2 id="Splitting-the-code"><a href="#Splitting-the-code" class="headerlink" title="Splitting the code"></a>Splitting the code</h2><p>Using this technique we can split our component’s code into different “uses” files, and if we put the related functionalities in the same “use” file we can reuse it. For example, we have a that needs to control the window scroll, we can write a “use” file like this:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useScroll.js</span></span><br><span class="line"><span class="keyword">import</span> { onBeforeUnmount, onMounted, Ref, ref } <span class="keyword">from</span> <span class="string">'@vue/composition-api'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; {</span><br><span class="line">  <span class="keyword">const</span> scrollY = ref(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> scrollX = ref(<span class="number">0</span>)</span><br><span class="line">  <span class="comment">// Before update the reactive values we store it in a local variable</span></span><br><span class="line">  <span class="keyword">let</span> localX = <span class="number">0</span>  </span><br><span class="line">  <span class="keyword">let</span> localY = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> onScroll = <span class="function">(<span class="params">e</span>) =&gt;</span> {</span><br><span class="line">    localX = <span class="built_in">window</span>.scrollX</span><br><span class="line">    localY = <span class="built_in">window</span>.scrollY</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">//We only update reactive values every 100 to avoid a update it too much</span></span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (localX !== scrollX.value) {</span><br><span class="line">      scrollX.value = localX</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (localY !== scrollY.value) {</span><br><span class="line">      scrollY.value = localY</span><br><span class="line">    }</span><br><span class="line">  }, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">  onMounted(<span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, onScroll)</span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">  onBeforeUnmount(<span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">'scroll'</span>, onScroll)</span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    scrollX, scrollY</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Note that we can set the scroll position directly to the <code>scrollX</code> and <code>scrollY</code> but we want to avoid triggering the re-render of the component several times, and we store the values in a local variable, and every 100ms we dump the values to the reactive variables.</p><p><a href="https://github.com/Tarektouati/vue-use-web">vue-use-web</a> is a library inspired on that.</p><h3 id="Some-tips-passing-values-to-the-“use”-files"><a href="#Some-tips-passing-values-to-the-“use”-files" class="headerlink" title="Some tips passing values to the “use” files"></a>Some tips passing values to the “use” files</h3><p>In the example file <code>useClasses.js</code> I passed the component <code>props</code>, which means we pass all props, this is not very good, because the component using the “use” file must pass the necessary properties, and this couldn’t happen.</p><p>It’s better to define in the “use” signature the params we need. This is the previous code rewrite using this.</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useClasses.js</span></span><br><span class="line"><span class="keyword">import</span> { computed } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (color, size) =&gt; {</span><br><span class="line">    <span class="keyword">const</span> colorClasses = computed(<span class="function">() =&gt;</span> [<span class="string">`color-<span class="subst">${color}</span>`</span>])</span><br><span class="line">    <span class="keyword">const</span> sizeClasses =  computed(<span class="function">() =&gt;</span> [<span class="string">`size-<span class="subst">${size}</span>`</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      colorClasses,</span><br><span class="line">      sizeClasses</span><br><span class="line">    }</span><br><span class="line">      </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>And in the component</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"> <span class="keyword">const</span> { colorClasses, sizeClasses } = useClasses(props.color, props.size)</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><p>You probably realized, that now the computed variables inside the use file will never be updated event if the property changes. That’s because the prop.color is a string and is passed as copy not as reference.</p><p>To solve that, we must pass the properties through a function:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"> <span class="keyword">const</span> { colorClasses, sizeClasses } = useClasses(<span class="function">() =&gt;</span> props.color, <span class="function">() =&gt;</span>  props.size)</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><p>And change our “use” file, adding the <code>()</code> to call the wrapper function and get the “live” value of the property </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useClasses.js</span></span><br><span class="line"><span class="keyword">import</span> { computed } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (color, size) =&gt; {</span><br><span class="line">    <span class="keyword">const</span> colorClasses = computed(<span class="function">() =&gt;</span> [<span class="string">`color-<span class="subst">${color()}</span>`</span>])</span><br><span class="line">    <span class="keyword">const</span> sizeClasses =  computed(<span class="function">() =&gt;</span> [<span class="string">`size-<span class="subst">${size()}</span>`</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      colorClasses,</span><br><span class="line">      sizeClasses</span><br><span class="line">    }</span><br><span class="line">      </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>As personal opinion I being using Composition API for a long time, even in Vue 2.x, and I prefer it over Options API because I feel the code is better, easier to read, easier to reuse, and could be code non-related with Vue, I mean you can write all the logic without use anything related with Vue and after all the “calculations” put the results in a reactive variable, so this code could be used in other frameworks.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;The Vue Composition API arrived at us in Nov 2018, 2 years ago, as a &lt;a href=&quot;https://medium.com/vue-mastery/evan-you-previews-vue-js-3-0</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Database migrations in Golang.</title>
    <link href="https://sergiocarracedo.es/database-migrations-in-golang/"/>
    <id>https://sergiocarracedo.es/database-migrations-in-golang/</id>
    <published>2021-10-25T00:00:00.000Z</published>
    <updated>2022-09-08T07:23:28.009Z</updated>
    
    <content type="html"><![CDATA[<p>During the development of an app, it’s very common to do changes in the database schema, for a new feature you need to add a new table, add a new column to an existing table, alter the type of existing column or delete a column.</p><p>When you work alone you could do it manually, run the queries to alter the database schemas manually.</p><p>What happens when your team is not a one-person team? You need to share the queries to change the schema with your teammates, and they should know what changes they applied before to know if there are some new changes.</p><p>To simplify this task database migration tools were born. These tools do all this thing on behalf us.</p><p>Let see how the workflow with these tools works: </p><ul><li>When a member of the team needs to change something in the schema, she/he creates a text file with the sentences to achieve the new schema.</li><li>This file is usually stored in the repository, for example in a folder called <code>migrations</code>. if we also store it in the repository we can share easily and track changes (New files added, migration files should never be modified)</li><li>When a new migration file is detected the migration tool will run and apply the changes to the database</li></ul><p>Run the migration should be <em>idempotent</em>, that’s that you can run it several times with the same migration files, and the final database schema must be the same. To achieve that usually, the migration tools store in a database table the last migration that ran ok and apply the new ones.</p><h1 id="go-migrate"><a href="#go-migrate" class="headerlink" title="go-migrate"></a>go-migrate</h1><p><a href="https://github.com/golang-migrate/migrate">Go Migrate</a> is a migration tool written in Golang. It can work as a CLI or as a Go library.</p><p>As a CLI tool, you can use it for projects <em>in any language</em>, not necessarily Go.</p><p>Go migrate read the migrations from a source, that they could be: files, GitHub Repo, Bitbucket, AWS S3, Google cloud storage, etc, and applies the changes in the database.</p><p>It supports several database types, but SQL and non-SQL, like <em>PostgreSQL</em>, MySQL, MongoDB, Clickhouse, Cassandra, etc… <a href="https://github.com/golang-migrate/migrate#databases">See the complete list of supported databases</a>.  </p><p>To track which migrations need to be applied, it stores the status in the database.  </p><h2 id="Installing-go-migrate-CLI"><a href="#Installing-go-migrate-CLI" class="headerlink" title="Installing go-migrate (CLI)"></a>Installing go-migrate (CLI)</h2><p>For Go 1.16+ just execute in your terminal</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install -tags <span class="string">'postgres'</span> github.com/golang-migrate/migrate/v4/cmd/migrate@latest</span><br></pre></td></tr></tbody></table></figure><p>You can also download the binary from <a href="https://github.com/golang-migrate/migrate/releases">here</a></p><p>Check the <a href="https://github.com/golang-migrate/migrate/tree/master/cmd/migrate">documentation</a> for more instructions</p><h2 id="Your-first-migration-file"><a href="#Your-first-migration-file" class="headerlink" title="Your first migration file"></a>Your first migration file</h2><blockquote><p>In these examples I’m going to use Postgres as target database</p></blockquote><p>Our goal is to get the database schema our app needs from the migration files.<br>The first migration file should create the tables we need.<br>Imagine we need a ‘user’ table.</p><p>We must create a file with the following name schema: <code>{version}_{title}.up.{extension}</code>, for example: <code>1_add_users_table.up.sql</code>, with the following content</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA common;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> common.users(</span><br><span class="line">  id SERIAL <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  name <span class="type">VARCHAR</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  </span><br><span class="line">  email <span class="type">VARCHAR</span> <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  created_at <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> NOW(),  </span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id);</span><br></pre></td></tr></tbody></table></figure><p>Then we can run migrate:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate -<span class="built_in">source</span> file://migrations -database postgres://user:pass@localhost:5434/database up</span><br></pre></td></tr></tbody></table></figure><p>Go migrate will check the last completed migration version and applies the following, in this case, we never run go migrate so will execute our file.</p><h2 id="Adding-more-migration-files"><a href="#Adding-more-migration-files" class="headerlink" title="Adding more migration files"></a>Adding more migration files</h2><p>Imagine that we need to add a new column, for example <code>age</code>. We will create a file with the name <code>2_add_age_to_users.up.sql</code> with content down below:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> common.users <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> age <span class="type">INT</span>;  </span><br></pre></td></tr></tbody></table></figure><p>Anyone in the team can run the migrate command again and get the new column.</p><p>if you run again the command, nothing happens because go-migrate knows all migration were applied.</p><p>You can execute go-migrate in a deployment pipeline like GitHub Action to put your database in the correct schema</p><p>One of the advantages of putting the schema updates in migration files, store them in the repo and run go-migrate in the deployment pipeline, is that the database schema can be synced with the app version.<br>I mean, imagine you are working on a new feature in a new repo branch, you can define the migration files you need for this feature and commit them at the same time your code.<br>if your code is promoted to the main branch, when the code is deployed, the database update its schema </p><h2 id="Migration-rollback"><a href="#Migration-rollback" class="headerlink" title="Migration rollback"></a>Migration rollback</h2><p>go-migrate also allows us to do a migration rollback, that is a database query or queries to put the database schema as before run the equivalent up file.</p><p>In our example we can write the ‘down’ file for the second migration <code>2_add_age_to_users.up.sql</code> must have the name <code>2_add_age_to_users.down.sql</code> (the same name replacing <code>up</code> by <code>down</code>)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> common.users <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> age;</span><br></pre></td></tr></tbody></table></figure><p>If we want to roll back to version 1 we must run:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate -<span class="built_in">source</span> file://migrations -database postgres://user:pass@localhost:5434/database down 2</span><br></pre></td></tr></tbody></table></figure><p>Down migration files are usually not written because usually can mean data loss.</p><p><a href="https://twitter.com/taylorotwell">Taylor Otwell</a> the creator of <a href="https://laravel.com/">Laravel</a> said in an interview:</p><blockquote><p>My view on that recently, in a past year, has been that you just never rollback. Ever. You would always go forward. Because I don’t know how you roll back without losing customer data. At least for my own projects like Forge or Envoyer, I could never really guarantee that I wasn’t losing data, so I think if at all possible, what I would try to do is write an entirely new migration that fixes whatever problem there is, and it would just migrate forward.</p></blockquote><p><a href="https://laraveldaily.com/still-need-migrations-taylor-says-no/">https://laraveldaily.com/still-need-migrations-taylor-says-no/</a></p><h1 id="Next-steps"><a href="#Next-steps" class="headerlink" title="Next steps"></a>Next steps</h1><p>In this post, I talked about how to use <em>go-migrate</em> as CLI but we can use it in our Golang programs. That it’s very useful for example to run an integration test. I will write a post about how to manage integration’s test in Go.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;During the development of an app, it’s very common to do changes in the database schema, for a new feature you need to add a new table, a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Creating custom events in JS</title>
    <link href="https://sergiocarracedo.es/creating-custom-events-in-js/"/>
    <id>https://sergiocarracedo.es/creating-custom-events-in-js/</id>
    <published>2021-10-18T00:00:00.000Z</published>
    <updated>2022-09-08T07:23:28.009Z</updated>
    
    <content type="html"><![CDATA[<p>When you try to encapsulate features but need to interact with async events or events generated by user interaction, one of the easiest ways to achieve that is using event and event handlers (often called callbacks).</p><p>Imagine you have a UI component to render a TO-DO list with a button to create a TO-DO item through a form. This component is self-encapsulated, you only need to put the component in your app, and the component itself renders the list, the button, the form, do the request to API, etc.</p><p>You want to do some action after the TO-DO creation, for example, display a toast or an alert with some message.</p><p>You can alter the component and add that behavior into the component, but this reduces the reusability of the component because in other parts of your app (or in other app) this behaviour makes no sense.</p><h2 id="Events-and-callbacks-to-the-rescue"><a href="#Events-and-callbacks-to-the-rescue" class="headerlink" title="Events and callbacks to the rescue"></a>Events and callbacks to the rescue</h2><p>A callback for an event is a piece of code that runs when the event is dispatched. We are using that a lot in JS, for example when we want to do something after the user interacts with an element.</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.addEventListener(<span class="string">'click'</span>, <span class="function">() =&gt;</span> { alert(<span class="string">'hello'</span>) }, ...)</span><br></pre></td></tr></tbody></table></figure><p>With the line above, the code (listener or callback) will run when the user clicks the element</p><p>Browser’s API provides a lot of events we can <em>handle</em>, but we want to do it by ourselves, and it’s very easy:</p><p>First, we need to expose outside the component I mentioned before a method to set the callback for example <code>setToDoCreateEventHandler</code></p><blockquote><p>To simplify the example we will create a simple event dispatch system that only allows one handler</p></blockquote><p>This function will receive as param a function will be called when the event dispatches</p><p>For example:</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Main app</span></span><br><span class="line"><span class="keyword">import</span> myTodoComponent <span class="keyword">from</span> <span class="string">'myTodoComponent'</span></span><br><span class="line">myTodoComponent.setToDoCreateEventHandler(<span class="function">() =&gt;</span> alert(<span class="string">'TO-DO created'</span>))</span><br></pre></td></tr></tbody></table></figure><p>The implementation of the method in the component could be something like:</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Component</span></span><br><span class="line"><span class="keyword">let</span> toDoCreateEventHandler: <span class="built_in">Function</span> = <span class="function">() =&gt;</span> {}</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setToDoCreateEventHandler</span> (<span class="params">handler: <span class="built_in">Function</span></span>): <span class="title">void</span> </span>{</span><br><span class="line">  toDoCreateEventHandler = handler</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>We have the variable <code>toDoCreateEventHandler</code> where to store the handler, by default I set an empty function <code>() =&gt; {}</code> that doesn’t do anything just to avoid manage <code>null</code> values (but you can allow <code>null</code> or <code>undefined</code> as a handler and check it before dispatch it)</li><li>Our exposed <code>setToDoCreateEventHandler</code> function is in charge of set the handler to the variable</li></ul><p>Ok, now we can store the handler, but we need to dispatch it, to do it we only need to execute the handler in the part of the component where the TODO creation is complete, imagine is after sending the values to API and get an OK</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Component</span></span><br><span class="line">...</span><br><span class="line">axios(...).then(<span class="function">() =&gt;</span> {</span><br><span class="line">  ... <span class="comment">// Do other things</span></span><br><span class="line">  toDoCreateEventHandler()</span><br><span class="line">})</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><p><em>That’s all</em> <span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>, after saving the TODO doing a call to the API using <em>axios</em> (in this example) we call the handler stored in the variable, and our code outside the component will be executed.</p><p>As you can see it’s very easy to create custom components.</p><p>We can improve our event handler allowing to add more than one listener/handler, for example</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Component</span></span><br><span class="line"><span class="keyword">let</span> toDoCreateEventHandlers: <span class="built_in">Function</span>[] = []</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addToDoCreateEventHandler</span> (<span class="params">handler: <span class="built_in">Function</span></span>): <span class="title">void</span> </span>{</span><br><span class="line">  toDoCreateEventHandlers.push(handler)</span><br><span class="line">}</span><br><span class="line">...</span><br><span class="line">axios(...).then(<span class="function">() =&gt;</span> {</span><br><span class="line">  ... <span class="comment">// Do other things</span></span><br><span class="line">  toDoCreateEventHandlers.forEach(<span class="function"><span class="params">handler</span> =&gt;</span> handler())</span><br><span class="line">})</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>We also need to define a method to remove a handler, but I will let you do it.</p><p>You could think we can achieve this using <em>Promises</em>, and you are partially right, but promises only <a href="https://stackoverflow.com/questions/20328073/is-it-safe-to-resolve-a-promise-multiple-times">can be resolved once</a></p><p>Event dispatch / handler has the advantage you can attach to the event at any moment (and wait for the new dispatches) and are widely used in the standard JS libraries.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;When you try to encapsulate features but need to interact with async events or events generated by user interaction, one of the easiest w</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>How to create a table with a fixed header</title>
    <link href="https://sergiocarracedo.es/how-to-create-a-table-with-a-fixed-header/"/>
    <id>https://sergiocarracedo.es/how-to-create-a-table-with-a-fixed-header/</id>
    <published>2021-10-12T00:00:00.000Z</published>
    <updated>2022-09-08T07:23:28.009Z</updated>
    
    <content type="html"><![CDATA[<p>Tables in HTML are one of the older things in the standard, even before CSS we had HTML tables. In the past tables were used to markup the webpages, but the correct usage is to display tabular data.</p><p>Over time the standard improves the table styling covering most of the use cases you can consider.</p><p>But, there is a use case it’s not easy to get with the table attributes or style properties, I’m talking about creating a table with a fixed/sticky header (or footer).</p><p>The behavior we want to get is, for a large table, make it possible to scroll the table content showing always on top of the header.</p><h1 id="Possible-solutions"><a href="#Possible-solutions" class="headerlink" title="Possible solutions"></a>Possible solutions</h1><p>There is more than one solution to this problem. It depends on your needs.</p><p>The simplest solution I found is to use CSS to set <code>position: sticky</code> to the <code>th</code> elements: </p><iframe src="https://codesandbox.io/embed/table-fixed-header-s37y4?fontsize=14&amp;hidenavigation=1&amp;initialpath=/fixed-header-css.html&amp;module=/fixed-header-css.html&amp;theme=dark" width="100%" height="350px" frameborder="0" loading="lazy" allowfullscreen=""></iframe><p>This solution can work in most of cases, but have some limitations, for example <code>position: sticky</code> is not supported in legacy browsers <a href="https://caniuse.com/css-sticky">https://caniuse.com/css-sticky</a>. </p><p>In my opinion, the most important limitation is you must set a background color for the header elements to avoid overlapping the table content. This is not always a good solution for all cases.</p><p><em>Following is the same without set the background color for the <code>th</code> elements</em> </p><iframe src="https://codesandbox.io/embed/table-fixed-header-s37y4?fontsize=14&amp;hidenavigation=1&amp;initialpath=/fixed-header-css-no-bg.html&amp;module=/fixed-header-css-no-bg.html&amp;theme=dark" width="100%" height="350px" frameborder="0" loading="lazy" allowfullscreen=""></iframe><p>Another possible solution is to use <code>display: grid</code> and add the <code>position: fixed</code> to the first row</p><p>But I don’t feel comfortable with this solution because:</p><ul><li>It has the same problem with the header’s background color </li><li>We lose the semantic tags (we are displaying as a table, but the html is not a real table, we have a list of div or other tags that don’t set a semantic meaning)</li><li>We must know the number of cols of the table because we must set it in CSS, for example <code>grid-template-columns: repeat(4, 1fr)</code></li></ul><iframe src="https://codesandbox.io/embed/table-fixed-header-s37y4?fontsize=14&amp;hidenavigation=1&amp;initialpath=css-grid.html&amp;module=/css-grid.html&amp;theme=dark" width="100%" height="300px" frameborder="0" loading="lazy" allowfullscreen=""></iframe><h2 id="Duplicating-header-technique"><a href="#Duplicating-header-technique" class="headerlink" title="Duplicating header technique"></a>Duplicating header technique</h2><p>Why don’t just put the header outside the table and only scroll the <code>tbody</code>. You can see the result in the following codesandbox. Please notice now, the header can have a transparent background working well with the gradient page background.</p><iframe src="https://codesandbox.io/embed/table-fixed-header-s37y4?fontsize=14&amp;hidenavigation=1&amp;initialpath=duplicate.html&amp;module=/duplicate.html&amp;theme=dark" width="100%" height="300px" frameborder="0" loading="lazy" allowfullscreen=""></iframe><p>Ok, but probably you noticed it, this solution as we did it doesn’t work well, the header column sizes are not the same as the content, and if the content has a horizontal scroll the header doesn’t follow the scroll position.</p><p>To fix it we need some <em>javascript</em> to sync the header columns width and the scroll position.</p><p>It’s important don’t hide the original table head using something like <code>display: none</code> or alter its width with <code>position: absolute</code> we want the original header with the same column width as in a regular table to copy these values to the cloned header. The best way to do it is using <code>visibility: collapse;</code> that for table rows or columns hide the element, and the space occupied is removed, but the size of the columns is still calculated <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/visibility">https://developer.mozilla.org/en-US/docs/Web/CSS/visibility</a> </p><p>It’s also necessary to set the <code>table-layout: fixed</code> to avoid the browser tries to fit the columns space, we want to use the same space we copy from the original header </p><p>To copy these widths we can use something like this. The column width sync function is called when the table can change the width, for example on window resize. We can improve this just observing when the table is resized, not when the window is resized using the <a href="https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver">ResizeObserver</a></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> syncColsWidth = <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="keyword">const</span> thead = <span class="built_in">document</span>.getElementById(<span class="string">"thead"</span>);</span><br><span class="line">  <span class="keyword">const</span> theadClone = <span class="built_in">document</span>.getElementById(<span class="string">"thead-clone"</span>);</span><br><span class="line">  <span class="keyword">const</span> theadCols = thead.getElementsByTagName(<span class="string">"th"</span>);</span><br><span class="line">  <span class="keyword">const</span> theadCloneCols = theadClone.getElementsByTagName(<span class="string">"th"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i <span class="keyword">in</span> theadCols) {</span><br><span class="line">    theadCloneCols[i].style.width = <span class="string">`<span class="subst">${theadCols[i].offsetWidth}</span>px`</span>;</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line"> <span class="built_in">window</span>.onresize = syncColsWidth;</span><br></pre></td></tr></tbody></table></figure><p>We must also sync the scroll position</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> onScrollTable = <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="keyword">const</span> wrapper = <span class="built_in">document</span>.getElementById(<span class="string">"table-wrapper"</span>);</span><br><span class="line">  <span class="keyword">const</span> clone = <span class="built_in">document</span>.getElementById(<span class="string">"wrapper-header"</span>);</span><br><span class="line">  clone.scrollLeft = wrapper.scrollLeft;</span><br><span class="line">};</span><br><span class="line">       </span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"table-wrapper"</span>).onscroll = onScrollTable;</span><br></pre></td></tr></tbody></table></figure><p>And with that, we have a fully fixed header for our table.</p><p>This solution adds more complexity than the CSS one, but it’s more flexible and allows us to use gradient or image backgrounds. </p><iframe src="https://codesandbox.io/embed/table-fixed-header-s37y4?fontsize=14&amp;hidenavigation=1&amp;initialpath=duplicate-js.html&amp;module=/duplicate-js.html&amp;theme=dark" width="100%" height="400px" frameborder="0" loading="lazy" allowfullscreen=""></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Tables in HTML are one of the older things in the standard, even before CSS we had HTML tables. In the past tables were used to markup th</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Soy casi un boomer y consumo Twitch: Mis streams favoritos</title>
    <link href="https://sergiocarracedo.es/mis-streams-favoritos-de-twitch/"/>
    <id>https://sergiocarracedo.es/mis-streams-favoritos-de-twitch/</id>
    <published>2021-08-09T00:00:00.000Z</published>
    <updated>2022-09-08T07:23:28.009Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Disclaimer: Este es mi primer post en castellano en bastante tiempo, el motivo es el contenido del que voy a hablar está mayoritariamente en castellano y sería un poco raro hacerlo en inglés</p></blockquote><p>Como dice el título, ya soy casi un boomer, lo que para muchos estereotipos me haría ser el típico consumidor de televisión en mis horas de entretenimiento, pero desde unos hace 4-5 años he ido reduciendo mi consumo televisivo poco a poco a prácticamente 0.</p><p>No voy a entrar mucho en los motivos de este cambio, pero puedo resumirlo en: <strong>Baja calidad del contenido</strong> y <strong>exceso de publicidad</strong></p><p>Al principio mis hábitos de consumo de entretenimiento se movieron a YouTube, porque YT me ofrecía entretenimiento y recursos de aprendizaje. Escribí un par de posts hablando sobre mis canales favoritos: <a href="/2020/06/02/my-favourite-youtube-channels-2020/" title="versión 2020">versión 2020</a> y <a href="/2018/11/29/Mis-canales-favoritos-de-YouTube/" title="versión 2018">versión 2018</a>, y parte siguen estando ahi.</p><p>Cuando a principios de 2019 estuve recibiendo un <a href="/2018/12/20/Como-es-uno-de-mis-ciclos-de-quimioterapia/" title="tratamiento de quimioterapia">tratamiento de quimioterapia</a>, y como durante las recuperaciones tenía tiempo para, entre otras muchas cosas ver entretenimiento, empecé a descubrir Twitch a partir de que uno de los YouTubers que ya conocía también <em>stremeaba</em>, y de ahi comencé a tirar el hilo de otros streamers.</p><p>Y ya llegado el 2020, el año de pandemia y confinamientos, esto ya despuntó, de hecho ya no soy solo consumidor de Twitch, sino también creador ya que lo hemos usado como plataforma de difusión de las charlas de las comunidades de técnicas como en (PHPVigo)[<a href="https://www.twitch.tv/phpvigo?lang=es-ES%5D">https://www.twitch.tv/phpvigo?lang=es-ES]</a> y especialmente (LaretasGeek)[<a href="https://www.twitch.tv/laretasgeek]">https://www.twitch.tv/laretasgeek]</a> </p><h1 id="Que-es-Twitch"><a href="#Que-es-Twitch" class="headerlink" title="Què es Twitch?"></a>Què es Twitch?</h1><p>Para los que no conozcais Twitch (si es que queda alguien que no lo conozca a estas alturas) es una plataforma de emisión de videos en directo (streams), cada canal tiene un chat que puede interactuar con el streamer (si la mayoría de los streams los gestiona una sola persona). La diferencia con otras plataformas es que los videos solo permanecen disponibles después de la emisión durante unos dias, es decir están pensados para consumirse en directo.</p><p>Cualquiera de nosotros puede seguir un canal de forma gratuita (para que nos avisen cuando empiezan los streams). </p><h2 id="Como-ganan-dinero-en-Twitch-los-streamer"><a href="#Como-ganan-dinero-en-Twitch-los-streamer" class="headerlink" title="Cómo ganan dinero en Twitch los streamer?"></a>Cómo ganan dinero en Twitch los streamer?</h2><p>Además te puedes <em>subscribir</em> al canal, lo que implica el pago, a día de hoy con los cambios que ha introducido Twitch, de 4€/mes en España (de los cuales el streamer se lleva entre el 50% y 70%) y también puedes regalar subscripciones a otros. </p><p>Normalmente los streamers usan herramientas que muestran en el stream sobreimpreso cuando alguien se suscribe o regala suscripciones a otros. Lo que refuerza el hecho de hacerse suscriptor.</p><p>Aunque la mayoría de las suscripciones no tiene coste directo para los seguidores ya que si dispones de Amazon Prime, puedes hacer una suscripción gratis al mes.</p><p>También se pueden hacer donaciones directas (los bits)</p><h2 id="Que-contenido-hay-en-Twitch"><a href="#Que-contenido-hay-en-Twitch" class="headerlink" title="Qué contenido hay en Twitch?"></a>Qué contenido hay en Twitch?</h2><p>Twitch nació como una plataforma para retransmitir partidas de videojuegos, que siguen siendo mayoría, pero también hay otros muchos tipos de contenido no relacionados con videojuegos, como “Just Chatting”, Donde el streamer habla con su audiencia y “Difusión de ciencia y tecnología”, en realidad cualquier tipo de video en directo es susceptible the ser transmitible en Twitch, de hecho este año se han transmitido partidos de futbol de la liga española (de forma legal) y más recientemiente, Ibai, ha <a href="https://www.youtube.com/watch?v=AFFq0gLd2Uo">retransmitido la copa américa</a>  </p><h1 id="Mis-canales-favoritos-the-twitch"><a href="#Mis-canales-favoritos-the-twitch" class="headerlink" title="Mis canales favoritos the twitch"></a>Mis canales favoritos the twitch</h1><h3 id="Carola-https-www-twitch-tv-carola"><a href="#Carola-https-www-twitch-tv-carola" class="headerlink" title="Carola: https://www.twitch.tv/carola"></a>Carola: <a href="https://www.twitch.tv/carola">https://www.twitch.tv/carola</a></h3><div class="left-33">    <img src="/images/2021/twitch/carola.jpg" class="photoswipe">  </div><div class="left-33">    <img src="/images/2021/twitch/carola02.jpg" class="photoswipe"></div><div class="left-33">    <img src="/images/2021/twitch/carola03.jpg" class="photoswipe"></div><div class="clearfix"></div><p>Este streamer es el que estamos viendo más ahora mismo en mi casa. Comenzó principalmente jugando a GTA5 Roleplay, creando personales muy interesantes y sabiendo gestionar para mi gusto muy bien la improvisación y la planificación de los personales. Además es Gallego y su humor es también muy gallego a veces y sobre todo por que nos saca una carcajada casi cada vez que lo vemos y eso vale mucho.<br>En los últimos 2 años ha hecho grupo con MenosTrece, Ricoy, y Agustabell (otros streamers) principalmente para jugar juegos de supervivencia, como Scape From Tarkov</p><h3 id="BuckFernandez-https-www-twitch-tv-buckfernandez"><a href="#BuckFernandez-https-www-twitch-tv-buckfernandez" class="headerlink" title="BuckFernandez: https://www.twitch.tv/buckfernandez"></a>BuckFernandez: <a href="https://www.twitch.tv/buckfernandez">https://www.twitch.tv/buckfernandez</a></h3><div class="left-33">    <img src="/images/2021/twitch/buck-fernandez01.jpg" class="photoswipe">  </div><div class="left-33">    <img src="/images/2021/twitch/buck-fernandez02.jpg" class="photoswipe"></div><div class="left-33">    <img src="/images/2021/twitch/buck-fernandez03.jpg" class="photoswipe"></div><div class="clearfix"></div><p>Este streamer y youtuber, que debe estar cercano a mi edad, es productor musical, rapero, etc.<br>Sus streams no son tan masivos como los de otros, pero los basa en hacer un contenido de calidad que le guste a él y a sus habituales. Puedes encontrarlo componiendo música, jugando a juegos retro con consolas reales (no solo emuladores), haciendo resúmenes humorísticos de películas de serie B de los 80s</p><h3 id="MenosTrece-https-www-twitch-tv-menostrece"><a href="#MenosTrece-https-www-twitch-tv-menostrece" class="headerlink" title="MenosTrece https://www.twitch.tv/menostrece"></a>MenosTrece <a href="https://www.twitch.tv/menostrece">https://www.twitch.tv/menostrece</a></h3><p>Creo que fue de los primeros YouTubers de entretenimiento que comencé a seguir. En Twitch juega a solo o con otros juegadores como Carola, Agus o Ricoy, y mayoritariamente juegos como Escape from Tarkov, Rust, 7 Days to die, Day by daylight, etc</p><blockquote><p>En los siguientes nos voy a entrar en tanto detalle porque los veo de forma más causal</p></blockquote><h3 id="Agustabell212-https-www-twitch-tv-agustabell212"><a href="#Agustabell212-https-www-twitch-tv-agustabell212" class="headerlink" title="Agustabell212 https://www.twitch.tv/agustabell212"></a>Agustabell212 <a href="https://www.twitch.tv/agustabell212">https://www.twitch.tv/agustabell212</a></h3><h3 id="Ricoy23-https-www-twitch-tv-ricoy23"><a href="#Ricoy23-https-www-twitch-tv-ricoy23" class="headerlink" title="Ricoy23 https://www.twitch.tv/ricoy23"></a>Ricoy23 <a href="https://www.twitch.tv/ricoy23">https://www.twitch.tv/ricoy23</a></h3><p>Agus y Ricoy son primos y juegas habitualmente juntos, son muy buenos en Rust</p><h3 id="Silithurh-https-www-twitch-tv-silithur"><a href="#Silithurh-https-www-twitch-tv-silithur" class="headerlink" title="Silithurh https://www.twitch.tv/silithur"></a>Silithurh <a href="https://www.twitch.tv/silithur">https://www.twitch.tv/silithur</a></h3><p>Es un streamer que juega a un poco de todo, y muchas veces interactua con otros de los mencionados y tiene la capacidad de transmitir tranquilidad y relajación.</p><h3 id="Angel-Martin-https-www-twitch-tv-angelmartin"><a href="#Angel-Martin-https-www-twitch-tv-angelmartin" class="headerlink" title="Angel Martin https://www.twitch.tv/angelmartin"></a>Angel Martin <a href="https://www.twitch.tv/angelmartin">https://www.twitch.tv/angelmartin</a></h3><p>Admiro su capacidad de crítica, su ironía, y el hecho de que se ha sabido reinventar: viniendo del mundo de la TV y ahora ha creado un stream con bastantes seguidores y para mi gusto de muy buena calidad  </p><h3 id="Ibai-https-www-twitch-tv-ibai"><a href="#Ibai-https-www-twitch-tv-ibai" class="headerlink" title="Ibai https://www.twitch.tv/ibai"></a>Ibai <a href="https://www.twitch.tv/ibai">https://www.twitch.tv/ibai</a></h3><p>Ibai es la revelación de 2020, previamente <em>casteaba</em> (retransmitia esports, o cosas tan locas como (carreras de canicas)[<a href="https://www.youtube.com/watch?v=bJgfisVKe6w%5D">https://www.youtube.com/watch?v=bJgfisVKe6w]</a>) y a rotos records de audiencia en Twitch, por ejemplo cuando retransmitió las campanadas. Lo que me gusta principalmente son las “entrevistas” distendidas que hace a gente que no va a otras plataformas.</p><h3 id="Auronplay-https-www-twitch-tv-auronplay"><a href="#Auronplay-https-www-twitch-tv-auronplay" class="headerlink" title="Auronplay https://www.twitch.tv/auronplay"></a>Auronplay <a href="https://www.twitch.tv/auronplay">https://www.twitch.tv/auronplay</a></h3><p>Qué decir de Auronplay, debe ser ahora mismo el streamer con mejores numerous en habla hispana. No soy un gran conmsumidor de todo su contenido, pero a veces lo pongo de fondo y es divertido</p><h3 id="Outconsumer-https-www-twitch-tv-outconsumer"><a href="#Outconsumer-https-www-twitch-tv-outconsumer" class="headerlink" title="Outconsumer https://www.twitch.tv/outconsumer"></a>Outconsumer <a href="https://www.twitch.tv/outconsumer">https://www.twitch.tv/outconsumer</a></h3><p>Otro streamer que parece de mi quinta, y que habla de baloncesto, otros deporte, y juega, pero siempre con un mensaje tranquilo y con transforndo educativo</p><h3 id="IamCristinini-https-www-twitch-tv-iamcristinini"><a href="#IamCristinini-https-www-twitch-tv-iamcristinini" class="headerlink" title="IamCristinini https://www.twitch.tv/iamcristinini"></a>IamCristinini <a href="https://www.twitch.tv/iamcristinini">https://www.twitch.tv/iamcristinini</a></h3><p>Es otra de las grandes del roleplay</p><h1 id="Canales-de-stream-tecnicos-y-de-divulgacion"><a href="#Canales-de-stream-tecnicos-y-de-divulgacion" class="headerlink" title="Canales de stream técnicos y de divulgación"></a>Canales de stream técnicos y de divulgación</h1><h3 id="CodelyTv-https-www-twitch-tv-codelytv"><a href="#CodelyTv-https-www-twitch-tv-codelytv" class="headerlink" title="CodelyTv https://www.twitch.tv/codelytv"></a>CodelyTv <a href="https://www.twitch.tv/codelytv">https://www.twitch.tv/codelytv</a></h3><div class="left-33">    <img src="/images/2021/twitch/codelytv01.jpg" class="photoswipe">  </div><div class="left-33">    <img src="/images/2021/twitch/codelytv02.jpg" class="photoswipe"></div><div class="left-33">    <img src="/images/2021/twitch/codelytv03.png" class="photoswipe"></div><div class="clearfix"></div><p>Poco que más decir de CodelyTV que seruramente no conozcas. Aparte de la plataforma de cursos online de la que disponen, divulgan sobre tecnología todas las semanas en Twitch para disfrute de todos nosotros. Con un contenido interesante, entretenido que genera debates y situaciones divertidas.</p><h3 id="DovCSV-https-www-twitch-tv-dotcsv"><a href="#DovCSV-https-www-twitch-tv-dotcsv" class="headerlink" title="DovCSV https://www.twitch.tv/dotcsv"></a>DovCSV <a href="https://www.twitch.tv/dotcsv">https://www.twitch.tv/dotcsv</a></h3><p>Canal dedicado principalmente a noticias sobre AI y ML</p><h3 id="LaHiperActina-https-www-twitch-tv-lahiperactina"><a href="#LaHiperActina-https-www-twitch-tv-lahiperactina" class="headerlink" title="LaHiperActina https://www.twitch.tv/lahiperactina"></a>LaHiperActina <a href="https://www.twitch.tv/lahiperactina">https://www.twitch.tv/lahiperactina</a></h3><p>Canal dedicado a la divulgación de biomedicina</p><h3 id="Alva-Majo-https-www-twitch-tv-5ro4"><a href="#Alva-Majo-https-www-twitch-tv-5ro4" class="headerlink" title="Alva Majo https://www.twitch.tv/5ro4"></a>Alva Majo <a href="https://www.twitch.tv/5ro4">https://www.twitch.tv/5ro4</a></h3><p>Dedicado a hablar de la creación de video juegos con un estilo muy particular y mucha sorna</p><h3 id="Salva-Spin-https-www-twitch-tv-salvaespin"><a href="#Salva-Spin-https-www-twitch-tv-salvaespin" class="headerlink" title="Salva Spin https://www.twitch.tv/salvaespin"></a>Salva Spin <a href="https://www.twitch.tv/salvaespin">https://www.twitch.tv/salvaespin</a></h3><p>Salva es un dibujante profesional, trabaja para DC dibujando a Deathpool, en algunos de sus steams muestras como trabaja realizando los dibujos</p><p>Hay otros muchos <a href="https://www.twitch.tv/directory/following/channels">streamers que sigo</a> y otros que conozco y que he visto muy puntualmente como puede ser <a href="https://www.twitch.tv/elxokas">elxokas</a>, <a href="https://www.twitch.tv/elisawavess">elisawavess</a>, <a href="https://www.twitch.tv/gtv_genesis">gtv_genesis</a>, <a href="https://www.twitch.tv/sarinha_3">sarinha_3</a>, <a href="https://www.twitch.tv/little_mary">Little Mary</a>, <a href="https://www.twitch.tv/juansguarnizo">JuanGuarnizo</a>, etc… </p><p>Podemos dejar para otro post la opinión sobre si el contenido es siempre es el adecuado para audiencias de ciertas edades. Spoiler: No siempre, como en todas las plataformas, por desgracia hay contenido tóxico o ejemplo que en mi opinion no son buenos.</p><p>Espero que os gustase mi primer post en castellano, que como veis fué publicado en agosto un mes en el que mayoritariamente todos estamos pensando en las vacaciones, de ahi que no escribiese nada técnico.</p><p>Si queries compartir algún canal que conozcas o que te guste no dudes en dejarlo en los comentarios.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Disclaimer: Este es mi primer post en castellano en bastante tiempo, el motivo es el contenido del que voy a hablar está may</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>How to run GitHub Actions in local with Act</title>
    <link href="https://sergiocarracedo.es/act-how-to-run-github-actions-in-local/"/>
    <id>https://sergiocarracedo.es/act-how-to-run-github-actions-in-local/</id>
    <published>2021-06-14T00:00:00.000Z</published>
    <updated>2022-09-08T07:23:28.009Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub Actions is a powerful tool, you can run tests, build your app, deploy it, even <a href="https://github.blog/2021-04-22-github-actions-update-helping-maintainers-combat-bad-actors/">mining bitcoins</a> <span class="github-emoji"><span>😔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f614.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>When you are creating an action or workflow in GitHub Actions, it is very common the needing of test it, check if all works as you need and if something is not correct, fix it, in other works as other software GitHub Actions need to be iterated.</p><p>Doing it in GitHub have disadvantages:</p><ul><li>Waste running time: even if you are using a free plan you have a 2000 minutes per month limit</li><li>Fill your repository history with “trash” commit: As the action definition is in the repo, every change is a new commit, if you are testing something that is very common to fill your repo history with the commits of every change. You can <a href="https://www.internalpointers.com/post/squash-commits-into-one-git">squash these commits</a> into one, but is an extra step</li><li>Is slow</li></ul><h1 id="ACT"><a href="#ACT" class="headerlink" title="ACT"></a>ACT</h1><p><a href="https://github.com/nektos/act">ACT</a> comes to help us, this tool allows us to run GitHub Actions on our local computer.</p><p>It creates an environment equal to GitHub provides, uses Docker images to run the actions, the environment variables and filesystem are all configured to match what GitHub provides.</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>Act is available for Linux, Windows and MacOS, the installation instructions (and dependencies) depend on your OS, I’m going to focus on Ubuntu, but you can check the <a href="https://github.com/nektos/act#installation">official docs</a> to know how to install in your OS.</p><p>In Ubuntu, you need Go 1.16+ as a dependency and run</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install github.com/nektos/act@latest</span><br></pre></td></tr></tbody></table></figure><p>Is very useful to add the Go bin path to your PATH<br>For example, if you are using <strong>zsh</strong> as shell</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"export PATH=<span class="variable">$PATH</span>;~/go/bin/"</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></tbody></table></figure><h2 id="Running-your-action"><a href="#Running-your-action" class="headerlink" title="Running your action"></a>Running your action</h2><p>Running an action on your computer is simple as go to your repo root folder and run:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">act</span><br></pre></td></tr></tbody></table></figure><p>In the first run, Act will ask you to choose the default image to run the action. The image to choose depends on your action, but I recommend you to choose, the <em>medium image</em>, because the <em>micro</em> image for example can’t install Python</p><p>If your action needs “secrets” will fail. We must set the secrets and that is easy as pass an argument to <em>act</em></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">act -s GITHUB_TOKEN=&lt;your_token&gt; -s OTHER_SECRET=&lt;value&gt;</span><br></pre></td></tr></tbody></table></figure><p>It’s important to bear in mind that GitHub always injects the <code>GITHUB_TOKEN</code> secret, but in our local environment, we must provide the value.<br>If your action needs this value (for example, after build, deploy to GHPages) you must provide it.<br>To create a token in GitHub you only need to navigate to <em>Settings &gt; Developer settings &gt; Personal access tokens</em> or just <a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a></p><h2 id="Dispatching-custom-events"><a href="#Dispatching-custom-events" class="headerlink" title="Dispatching custom events"></a>Dispatching custom events</h2><p>By default, act runs the “on: push” configured action in your workflow file, but maybe you want to run another workflow depending on other triggers, and you can, only need to pass the event name as an argument</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">act pull_request</span><br><span class="line">act workflow_dispatch</span><br><span class="line">act release</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><h2 id="Use-a-specific-workflow"><a href="#Use-a-specific-workflow" class="headerlink" title="Use a specific workflow"></a>Use a specific workflow</h2><p>Sometimes you have more than workflow files, usually, they don’t run on the same dispatcher, but anyway, you can set the workflow file to use.</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">act -W &lt;path to workflow file&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="Listing-the-actions"><a href="#Listing-the-actions" class="headerlink" title="Listing the actions"></a>Listing the actions</h2><p>Running <code>act -l</code> or <code>act release -l</code> you can list the action that will run </p><h2 id="Draw-workflow"><a href="#Draw-workflow" class="headerlink" title="Draw workflow"></a>Draw workflow</h2><p>Sometimes can be interesting to see the action’s dependency tree, using the <code>-g</code> flag you will get an exit like that</p><p><img src="/images/2021/act_01.png" alt="Graph"></p><h2 id="Run-a-specific-job"><a href="#Run-a-specific-job" class="headerlink" title="Run a specific job"></a>Run a specific job</h2><p>If you want to test a specific job into the workflow you can pass the job name using <code>-j</code> argument, for example</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">act -j deploy </span><br></pre></td></tr></tbody></table></figure><p>There are more flags. You can check the full list <a href="https://github.com/nektos/act#flags">here</a></p><h2 id="GitHub-Enterprise"><a href="#GitHub-Enterprise" class="headerlink" title="GitHub Enterprise"></a>GitHub Enterprise</h2><p>Act can login to private GitHub Enterprise servers as simple as add <code>--github-instance &lt;your-company-ghe-server&gt;</code> in the command</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p><em>Act</em> it’s a wonderful tool to run GH Action in local when you are creating or iterating it, avoiding using the real repo to test it.<br>But <em>Act is</em> something more, you can also use it as a local task runner using all the power, and the actions in the GitHub Actions marketplace to create your local task, and this task can easily move to the cloud if you need it.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;GitHub Actions is a powerful tool, you can run tests, build your app, deploy it, even &lt;a href=&quot;https://github.blog/2021-04-22-github-acti</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Simplifying the use of custom a Vue v-model</title>
    <link href="https://sergiocarracedo.es/vue-use-model-helpers/"/>
    <id>https://sergiocarracedo.es/vue-use-model-helpers/</id>
    <published>2021-05-10T00:00:00.000Z</published>
    <updated>2022-09-08T07:23:28.009Z</updated>
    
    <content type="html"><![CDATA[<p>One year ago I wrote a post about how to manage your <a href="/2019/12/05/tu-propio-v-model-en-un-componente-vue/" title="custom v-model in your component">custom v-model in your component</a> (<em>Spanish</em>).</p><p>The problem still being the same, if you try to mutate the value of the property into the component you will get this error message:</p><blockquote><p>Error message: Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop’s value.</p></blockquote><p>That is normal, because the correct way of update a property value in the parent component is <strong>emit</strong> an event, for example: <code>emit('input', newValue)</code>.</p><p>I think the most convenient way to manage this situation is to create a local copy of the property in the component and observe its changes, and then emit the event, we also must observe property changes to keep the local copy updated if the parent component changes the property value.</p><p>This requires writting repetitive code for every single property (remember that in Vue 2.x we can use the <code>.sync</code> modifier to make other properties distinct of <code>value</code> 2-way bound)</p><p>To simplify my life (and yours) I created and published in <em>npmjs</em> a package that takes advantage of <strong>Vue composition API</strong> to make the code more reusable.</p><blockquote><p>The package is <a href="https://www.npmjs.com/package/vue-use-model-helpers">vue-use-model-helpers</a></p></blockquote><h3 id="IMPORTANT"><a href="#IMPORTANT" class="headerlink" title="IMPORTANT"></a>IMPORTANT</h3><p>The package works on both <strong>Vue 2.x</strong> and <strong>Vue 3</strong>, the way of using it is the same, but you must use the correct package version.</p><p>For Vue 2.x:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-use-model-helper@2.x --save </span><br><span class="line"><span class="comment"># or </span></span><br><span class="line">yarn add vue-use-model-helper@2.x</span><br></pre></td></tr></tbody></table></figure><p>For Vue 3:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-use-model-helper@3.x --save </span><br><span class="line"><span class="comment"># or </span></span><br><span class="line">yarn add vue-use-model-helper@3.x</span><br></pre></td></tr></tbody></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>This package encapsulates the logic of creating the local property’s copy, the watchers to observe the property and the local value, and the event dispatch.</p><p>In your components must import the <code>useLocalModel</code> helper function:</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { useLocalModel } <span class="keyword">from</span> <span class="string">'vue-use-model-helpers'</span></span><br></pre></td></tr></tbody></table></figure><p>Then you must pass an array with the names of the properties you want to manage because, yes, in Vue 2.x the helper can manage <code>.sync</code>. You don’t need to take care of the event name, the helper can recognize the property type and emits the correct event. </p><p>The helper returns a copy of every property with the name <code>local + [property name capitalized]</code> as a <code>ref</code>.</p><p>You can use destructuring to get the copies: <code>const { localValue, localUsername } = useLocalModel(['value', 'username'])</code></p><p>Putting all together:</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { useLocalModel } <span class="keyword">from</span> <span class="string">'vue-use-model-helpers'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent({</span><br><span class="line">  ...</span><br><span class="line">  props: {</span><br><span class="line">    value: <span class="built_in">String</span>,</span><br><span class="line">    username: <span class="built_in">String</span></span><br><span class="line">  },</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span> {</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> { localValue, localUsername } = useLocalModel([<span class="string">'value'</span>, <span class="string">'username'</span>])</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      localValue, localUsername</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  ...</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>If, for example, you are using the <code>localValue</code> in an input in your component, every single time the user updates the input, the helper emits the event on behalf of you.</p><p>I think this helpers package simplifies the component readability and allow you to write less repetitive code.</p><p><a href="https://github.com/sergiocarracedo/vue-use-model-helpers/issues">Any comments</a> to improve the package are highly welcome!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;One year ago I wrote a post about how to manage your &lt;a href=&quot;/2019/12/05/tu-propio-v-model-en-un-componente-vue/&quot; title=&quot;custom v-model </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Tips using Typescript and Vue</title>
    <link href="https://sergiocarracedo.es/tips-using-typescript-and-vue/"/>
    <id>https://sergiocarracedo.es/tips-using-typescript-and-vue/</id>
    <published>2021-04-25T00:00:00.000Z</published>
    <updated>2022-09-08T07:23:28.009Z</updated>
    
    <content type="html"><![CDATA[<p>Typescript is a great “language”, makes it possible to create more maintainable and understandable software, but requires extra effort to type the variables, the functions’ arguments, etc…</p><p>Vue 2.x, and even more Vue 3 provide a great typescript integration, providing the necessary types to use your app, but not always are trivial, and you need to know the types you must use in every case.</p><p>I want to share with all of you the lessons I learned in my experience using Vue and TS, the typical questions, and the “problems” I found in the way.</p><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p>Typing the Vuex’s store can’t be straightforward, my first time typing the store was frustrating because I didn’t know types use.</p><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>The state is a JS object, in type you can type it as a generic <code>Record&lt;string, any&gt;</code> but this is not nice. It’s better creating and interface that define all the store items types, for example, imagine this store:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = {</span><br><span class="line">  name: <span class="string">'Sergio'</span>,</span><br><span class="line">  lastLogin: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2021</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">34</span>),</span><br><span class="line">  config: {</span><br><span class="line">    darkTheme: <span class="literal">true</span>,</span><br><span class="line">    fontSize: <span class="number">23</span></span><br><span class="line">  },</span><br><span class="line">  friends: [{ <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Juan'</span> }, { <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'Felipe'</span> }]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>We must create an interface for this object:</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Friend {</span><br><span class="line">  id: <span class="built_in">number</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">interface</span> StoreState {</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  lastLogin?: <span class="built_in">Date</span>,</span><br><span class="line">  config: {</span><br><span class="line">    darkTheme: <span class="built_in">boolean</span>;</span><br><span class="line">    fontSize: <span class="built_in">number</span>;</span><br><span class="line">  },</span><br><span class="line">  friends: Friend[]</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> store: StoreState = {</span><br><span class="line">  name: <span class="string">'Sergio'</span>,</span><br><span class="line">  lastLogin: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2021</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">34</span>),</span><br><span class="line">  config: {</span><br><span class="line">    darkTheme: <span class="literal">true</span>,</span><br><span class="line">    fontSize: <span class="number">23</span></span><br><span class="line">  },</span><br><span class="line">  friends: [{ <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Juan'</span> }, { <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'Felipe'</span> }]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Mutations"><a href="#Mutations" class="headerlink" title="Mutations"></a>Mutations</h2><p>For the mutations, Vuex provides the type <code>MutationTree&lt;S&gt;</code>, defined as:</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> MutationTree&lt;S&gt; {</span><br><span class="line">    [key: <span class="built_in">string</span>]: Mutation&lt;S&gt;;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">type</span> Mutation&lt;S&gt; = <span class="function">(<span class="params">state: S, payload?: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">any</span>;</span><br></pre></td></tr></tbody></table></figure><p>Basically is a map of mutation functions, as you can see, a mutation function get the state type, but the payload can be anything and return anything</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mutations: MutationTree&lt;StoreState&gt; = {</span><br><span class="line">    setName (store, <span class="attr">payload</span>: <span class="built_in">string</span>) {</span><br><span class="line">        store.name = payload</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>As the payload is defined by the type as <code>any</code> it’s a good practice type your payload in every mutation function</p></blockquote><h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h2><p>It’s similar to the mutations, but with a peculiarity:</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ActionTree&lt;S, R&gt; {</span><br><span class="line">    [key: <span class="built_in">string</span>]: Mutation&lt;S, R&gt;;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">type</span> Action&lt;S, R&gt; = ActionHandler&lt;S, R&gt; | ActionObject&lt;S, R&gt;;</span><br></pre></td></tr></tbody></table></figure><p>Without going deeper, the <code>S</code> is the state of the vuex module, and <code>R</code> is the <strong>Root State</strong>. In a simple case (without using vuex modules) <code>S</code> and <code>R</code> are the same.</p><h2 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h2><p>Same as actions, </p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> GetterTree&lt;S, R&gt; {</span><br><span class="line">    [key: <span class="built_in">string</span>]: Getter&lt;S, R&gt;;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>For example:</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getters: GetterTree&lt;StoreState, StoreState&gt; = {</span><br><span class="line">    friendCount(store): <span class="built_in">number</span> {</span><br><span class="line">      <span class="keyword">return</span> store.friends.length</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>As in the store payload params, it’s a good practice to type getter return</p></blockquote><h1 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h1><p>If you are using composition API in the setup function we can type our properties as we did in the store. Make sure you are using <code>defineComponent</code> instead <code>Vue.extend</code> to make it work</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Props {</span><br><span class="line">    value: <span class="built_in">boolean</span>,</span><br><span class="line">    title: <span class="built_in">string</span>    </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent({</span><br><span class="line">    name: <span class="string">'my-component'</span>,</span><br><span class="line">    props: {</span><br><span class="line">        value: <span class="built_in">Boolean</span>,</span><br><span class="line">        title: <span class="built_in">String</span>        </span><br><span class="line">    },</span><br><span class="line">    setup (props: Props) {</span><br><span class="line">     ...</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>You can also type the properties directly in the <code>props</code> entry, but as <strong>typescript interfaces don’t exist at runtime</strong> we can’t use the interface directly as the property type</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Doesn't work because Friend doesn't exists in the runtime</span></span><br><span class="line">{</span><br><span class="line">  props: {</span><br><span class="line">    friend: {</span><br><span class="line">      <span class="keyword">type</span>: Friend</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// Doesn't work because Object doesn't implement Friend properties</span></span><br><span class="line">{</span><br><span class="line">  props: {</span><br><span class="line">    friend: {</span><br><span class="line">      <span class="keyword">type</span>: <span class="built_in">Object</span> <span class="keyword">as</span> Friend</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>But, we can pass the type as return of a function, then Vue instance the interface instances the interface and can check the value type</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Works</span></span><br><span class="line">{</span><br><span class="line">  props: {</span><br><span class="line">    friend: <span class="built_in">Object</span> <span class="keyword">as</span> () =&gt; Friend,</span><br><span class="line">    friends: <span class="built_in">Array</span> <span class="keyword">as</span> () =&gt; Friend[],</span><br><span class="line">    name: <span class="built_in">String</span> <span class="keyword">as</span> () =&gt; <span class="built_in">string</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://frontendsociety.com/using-a-typescript-interfaces-and-types-as-a-prop-type-in-vuejs-508ab3f83480">Read more about that</a></p><p>Remember to type “native” types because <code>String</code> is not the same as <code>string</code> (<code>String</code> is an object and string is a type) <a href="https://stackoverflow.com/a/14727461">More info about this in Stackoverflow</a></p><h1 id="Add-extra-properties-to-Vue-Component-Object"><a href="#Add-extra-properties-to-Vue-Component-Object" class="headerlink" title="Add extra properties to Vue Component Object"></a>Add extra properties to Vue Component Object</h1><p>By default, Vue provides us a defined structure for the Vue Component Object, for example, the property <code>data</code>, <code>props</code>, etc… Using vanilla JS we can add a new property to the Vue Component Object without doing extra works, for example, we want to add a property called <code>layout</code> that makes our root component can use different layouts in our view. </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    name: <span class="string">'my-component'</span>,</span><br><span class="line">    layout: <span class="string">'2-cols'</span> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>If we try to do this using typescript we will get an error because the property <code>layout</code> wasn’t defined in the Vue Component Object. To fix it we must extend the definition creating a definition file in our <code>src/</code>, for example, <code>src/typings.d.ts</code></p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># src/typings.d.ts</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">'vue/types/options'</span> {</span><br><span class="line">  <span class="keyword">interface</span> ComponentOptions&lt;V <span class="keyword">extends</span> Vue&gt; {</span><br><span class="line">    layout?: <span class="built_in">string</span>;    </span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Add-extra-properties-to-the-Vue-Instance"><a href="#Add-extra-properties-to-the-Vue-Instance" class="headerlink" title="Add extra properties to the Vue Instance"></a>Add extra properties to the Vue Instance</h1><p>As in the previous chapter, we could want to add a new property to the Vue Instance, for example, to add a global functionality like a toast, etc: <code>vm.$toast.open()</code></p><p>Remember you can do it doing something like this, for example, during the plugin installation:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$toast = {</span><br><span class="line">    open: <span class="function">() =&gt;</span> {</span><br><span class="line">        ....</span><br><span class="line">    }</span><br><span class="line">} <span class="keyword">as</span> ToastHandler</span><br></pre></td></tr></tbody></table></figure><p>Then we must add to our <em>definition</em> file these lines to declare the new Vue instance properties and their types</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># src/typings.d.ts</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">'vue/types/vue'</span> {</span><br><span class="line">  <span class="keyword">interface</span> Vue {</span><br><span class="line">    $toast: ToastHandler;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Typescript can be tough at the beginning, but gives you more confidence in your code and make it more readable, for example</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    props: {</span><br><span class="line">        friend: <span class="built_in">Object</span> <span class="keyword">as</span> () =&gt; Friend,</span><br><span class="line">        person: <span class="built_in">Object</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>For example in the case of <code>friend</code> you only need to go to the type declarations to know the ‘friend<code>structure and properties, even your IDE can provide you autocomplete, but for</code>person` is very hard to know the object structure. I hope this post can help you using Typescript and Vue.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Typescript is a great “language”, makes it possible to create more maintainable and understandable software, but requires extra effort to</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Understanding d3.js - A simple line chart</title>
    <link href="https://sergiocarracedo.es/understanding-d3-js-introduction/"/>
    <id>https://sergiocarracedo.es/understanding-d3-js-introduction/</id>
    <published>2021-04-19T00:00:00.000Z</published>
    <updated>2022-09-08T07:23:28.009Z</updated>
    
    <content type="html"><![CDATA[<p>Before starting is important to say that <strong>d3.js is not a chart library is a library for making charts</strong>, if you are expecting to pass the data to the library and set 4, 5,… 10 params and get the chart to render, d3.js is not your library.</p><p><a href="https://d3js.org/">d3.js</a> is more than that, is a very flexible library to manage data (data-driven documents) and create the representation of that data (not only charts). <strong>d3.js</strong> provides you the different pieces to create your customized data visualizations (for example charts)</p><p>Let’s start creating a simple line chart:</p><p><img src="/images/2021/d3.js/line-chart.png"></p><h1 id="Scales-domain-and-range"><a href="#Scales-domain-and-range" class="headerlink" title="Scales, domain, and range"></a>Scales, domain, and range</h1><p>Simplifying, there are two pieces in the chart: Axis and line. Let’s talk about the axis.<br>In the example the chart we have two axes: X and Y, but we can have more or less, depending on the chart type.</p><p>Axis is one of the reference lines of a coordinate system, every single point represents a value in the coordinate system and also a position in the canvas which is displaying the chart.</p><p>In our example, in the y-axis the ‘1’ value of the chart is drawn in the position 31px from the axis start, but in SVG or canvas the origin of the coordinate system start on the top left corner, and ‘y’ grows in the direction to monitor bottom. Then to print the 1 value in our chart we must use 319 - 31 (288) as y position.<br><img src="/images/2021/d3.js/line-chart-axis.png"></p><p>That’s complicated, and can be even more, if the relation between screen coordinates and chart coordinates aren’t lineal, for example, a logarithmic chart.</p><p><strong>d3.js</strong> brings us a component to help us to abstract the conversion between screen coordinates and chart coordinates:</p><h2 id="d3-scale"><a href="#d3-scale" class="headerlink" title="d3-scale"></a>d3-scale</h2><p><a href="https://github.com/d3/d3-scale"><strong>d3-scale</strong></a> is our component.<br>There are a lot of different types of scales: Continuous (Linear, Power, log, identity, time, radial), Sequential, Ordinal, etc…  For our example chart, we will use Linear.</p><p>Before continuing with <em>scale</em> I’m going to introduce 2 important concepts: <strong>domain</strong> and <strong>range</strong></p><p><strong>Domain</strong> is the complete set of values chart can use, in our case is all the values between 0 and 10</p><p><strong>Range</strong> is the coordinates (in the screen) where the chart can draw, in this case from 0 to 319</p><p>Putting all together: </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xScale = d3.scaleLinear().domain([<span class="number">0</span>, <span class="number">10</span>]).range([<span class="number">319</span>, <span class="number">0</span>]) </span><br></pre></td></tr></tbody></table></figure><blockquote><p>Note the range is between <code>319</code> and <code>0</code> not between <code>0</code> and <code>319</code></p></blockquote><p>This returns a function that links the values in the chart (domain), and the values in the ‘canvas’ (range)</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xScale(<span class="number">0</span>) <span class="comment">// 319</span></span><br><span class="line">xScale(<span class="number">5</span>) <span class="comment">// 159.5</span></span><br><span class="line">xScale(<span class="number">10</span>) <span class="comment">// 0</span></span><br></pre></td></tr></tbody></table></figure><p>Scale also provides some methods for do extra actions, for example, if you want to get the value in the chart from the ‘canvas’ coordinates (the typical use case is getting the chart value in the mouse position) we can use</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xScale.invert(<span class="number">159.5</span>) <span class="comment">// 5</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>Probably you are thinking the same as me the first time I see that: It’s a function that has methods? WTF!. If you want you can go farther but in swallow, if the function has arguments returns the ‘main’ value, if not returns an object of functions.</p></blockquote><p>We can do the same for the y-axis:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> yScale = d3.scaleLinear().domain([<span class="number">0</span>, <span class="number">20</span>]).range([<span class="number">0</span>, <span class="number">700</span>]) </span><br></pre></td></tr></tbody></table></figure><p>Ok, we have all the tools to manage the data and the canvas, now we must render the data and the axis</p><h1 id="Rendering-the-chart"><a href="#Rendering-the-chart" class="headerlink" title="Rendering the chart"></a>Rendering the chart</h1><p><strong>d3.js</strong> can render charts in <strong>SVG</strong> and <strong>Canvas</strong> but we will focus on the SVG rendering because is fast enough for most charts and makes easy interaction and styling.<br>To render our line chart, first, we must prepare our placeholder.</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'chart'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>For our comfort I’m going to define the chart margins and the width and height. The margins are necessary to render the axis, because the size of the chart refers to the draw area. </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> margin = { <span class="attr">top</span>: <span class="number">10</span>, <span class="attr">right</span>: <span class="number">10</span>, <span class="attr">bottom</span>: <span class="number">50</span>, <span class="attr">left</span>: <span class="number">50</span> }</span><br><span class="line"><span class="keyword">const</span> width = <span class="number">1280</span> - margin.left - margin.right</span><br><span class="line"><span class="keyword">const</span> height = <span class="number">420</span> - margin.top - margin.bottom</span><br><span class="line"><span class="keyword">const</span> n = <span class="number">20</span> <span class="comment">// Number of points in x axis</span></span><br><span class="line"><span class="keyword">const</span> maxY = <span class="number">10</span> <span class="comment">// Max y value</span></span><br></pre></td></tr></tbody></table></figure><p>Now we will use <em>d3</em> to add our SVG chart</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> svg = d3</span><br><span class="line">    .select(<span class="string">'.chart'</span>)</span><br><span class="line">    .append(<span class="string">'svg'</span>)</span><br><span class="line">    .attr(<span class="string">'width'</span>, width + margin.left + margin.right)</span><br><span class="line">    .attr(<span class="string">'height'</span>, height + margin.top + margin.bottom)</span><br></pre></td></tr></tbody></table></figure><p>Line by line:</p><ul><li><code>.select('.chart')</code> selects the DOM element previously we defined</li><li><code>.append('svg')</code> appends a <code>&lt;svg&gt;</code> element to the <code>&lt;div class='chart'&gt;</code></li><li><code>.attr('width', width + margin.left + margin.right)</code> adds an <code>width</code> attribute to the <code>&lt;svg&gt;</code> element</li><li><code>.attr('height', height + margin.top + margin.bottom)</code> adds an <code>hight</code> attribute to the <code>&lt;svg&gt;</code> element</li></ul><p>We defined the scales above, but we will do it again, now using our variables to make the chart more reusable</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xScale = d3.scaleLinear().domain([<span class="number">0</span>, n - <span class="number">1</span>]).range([<span class="number">0</span>, width])</span><br><span class="line"><span class="keyword">const</span> yScale = d3.scaleLinear().domain([<span class="number">0</span>, maxY]).range([height, <span class="number">0</span>])</span><br></pre></td></tr></tbody></table></figure><h3 id="Rendering-the-x-axis"><a href="#Rendering-the-x-axis" class="headerlink" title="Rendering the x-axis"></a>Rendering the x-axis</h3><p>To render the X axis we will create a new SVG group that holds the axis</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">svg</span><br><span class="line">.append(<span class="string">'g'</span>)</span><br><span class="line">.attr(<span class="string">'class'</span>, <span class="string">'x axis'</span>)</span><br><span class="line">.attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + margin.left + <span class="string">','</span> + (height + margin.top) + <span class="string">')'</span>)</span><br><span class="line">.call(d3.axisBottom(xScale))</span><br></pre></td></tr></tbody></table></figure><p>Line by line:</p><ul><li><code>.append('g')</code> appends the new group for the axis</li><li><code>.attr('class', 'axis x-axis')</code> adds 2 classes to the group (this allows us to style it using CSS)</li><li><code>.attr('transform', 'translate(' + margin.left + ',' + height + ')')</code> moves the axis group bellow the chart draw area and gives space</li><li><code>.call(d3.axisBottom(xScale))</code> call the <code>d3.axisBottom</code> function. This function is in charge of rendering the axis, the <em>axisBottom</em> means that the ticks of the axis will be rendered bellow the axis line. There are 3 more functions: <code>d3.axisTop</code>, <code>d3.axisLeft</code>, <code>d3.axisRight</code> to render the axis in different orientations.</li></ul><blockquote><p>About the <a href="https://github.com/d3/d3-selection/blob/v2.0.0/README.md#selection_call"><code>call</code></a> method: This method call the function passed as argument and uses as first argument for the function of the selected element. In this case is the same as execute: <code>d3.axisBottom(xScale)(svg.select('.xaxis'))</code> (Remember that d3.axisBottom returns a function). The advantage of using <code>call</code> is you can concatenate methods because call returns the selection, not the result of the function</p></blockquote><p>After that we can see our x-axis <span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h3 id="Rendering-the-y-axis"><a href="#Rendering-the-y-axis" class="headerlink" title="Rendering the y-axis"></a>Rendering the y-axis</h3><p>Rendering the Y axis is almost the same as X axis:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">svg</span><br><span class="line">  .append(<span class="string">'g'</span>)</span><br><span class="line">  .attr(<span class="string">'class'</span>, <span class="string">'y axis'</span>)</span><br><span class="line">  .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + margin.left + <span class="string">','</span> + margin.top + <span class="string">')'</span>)</span><br><span class="line">  .call(d3.axisLeft(yScale))</span><br></pre></td></tr></tbody></table></figure><h2 id="Rendering-the-line"><a href="#Rendering-the-line" class="headerlink" title="Rendering the line"></a>Rendering the line</h2><p>Before do the chart rendering we need the data, in this case, we will use random values</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dataset = d3.range(n).map(<span class="function">(<span class="params">d</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> { <span class="attr">x</span>: d, <span class="attr">y</span>: d3.randomUniform(yMax)() }</span><br><span class="line">})</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">  { x: 0, y: 2.679771859053788 },</span></span><br><span class="line"><span class="comment">  { x: 1, y: 5.447777017888336 },</span></span><br><span class="line"><span class="comment">  ...</span></span><br><span class="line"><span class="comment">  { x: 19, y: 0.083980807899251 }</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>Now we will create the line generator that is a function that returns a </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> line = d3</span><br><span class="line">  .line()</span><br><span class="line">  .x(<span class="function">(<span class="params">d</span>) =&gt;</span> xScale(d.x))</span><br><span class="line">  .y(<span class="function">(<span class="params">d</span>) =&gt;</span> yScale(d.y))</span><br></pre></td></tr></tbody></table></figure><p>Line by line:</p><ul><li><code>.line()</code> is the basic line generator</li><li><code>.x((d) =&gt; xScale(d.x))</code> function that for every point in data set returns the x position in the draw area, this is the reason why we are using the scale function. <em>d</em> represent every dataset point</li><li><code>.y((d) =&gt; xScale(d.y)</code> same as previous line but referred to y-axis</li></ul><p>We can also add an extra call to the line generator to configure the interpolation behavior, for example: <code>.curve(d3.curveMonotoneX)</code> that makes the curve softer. But for now, a simple interpolation (linear) is enough.</p><p>Ok, now we have the line generator, and it’s time to draw the line in our chart.</p><p>First, we add a SVG group for the line we will draw </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lineWrapper = svg</span><br><span class="line">  .append(<span class="string">'g'</span>)</span><br><span class="line">  .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + margin.left + <span class="string">','</span> + margin.top + <span class="string">')'</span>);</span><br></pre></td></tr></tbody></table></figure><p>Line by line:</p><ul><li><code>.append('g')</code> appends a SVG group element (<code>g</code>) to the <code>svg</code> element. This group will contain the chart draw area</li><li><code>.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')</code> set the transform attribute to move the group, this makes easy managing the draw, because we don’t need to take care of the real position, for the draw area the coordinate system starts on (0, 0)</li></ul><p>And the render the line</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lineWrapper</span><br><span class="line">  .append(<span class="string">'path'</span>)</span><br><span class="line">  .datum(dataset)</span><br><span class="line">  .attr(<span class="string">'class'</span>, <span class="string">'line'</span>)</span><br><span class="line">  .attr(<span class="string">'d'</span>, line)</span><br></pre></td></tr></tbody></table></figure><p>Line by line:</p><ul><li><code>.append('path')</code> appends a path element (to draw the line)</li><li><code>.datum(dataset)</code> assigns the dataset to the path element (we will use it in the next lines)</li><li><code>.attr('class', 'line')</code> add the class <code>line</code> to the path element to make asy the css styling</li><li><code>.attr('d', line)</code> add the <code>d</code> attribute, to generate it class to the line generator passing the element, and the <code>datum</code></li></ul><blockquote><p>We used <code>datum</code> because data is static, but d3 provides other methods to link dynamic data to the dom elements, but I will talk about that in the future</p></blockquote><p>And this is all for the moment. <em>d3</em> is a powerful tool but needs you to know some concepts before starting to create charts. The example we did in this post is very, very simple but I think is a good starting point.</p><p>My idea is to write more post about <em>d3</em> going deeper into the current concept and how to configure and customize the current components (for example configure the axis, the labels, etc) </p><iframe src="https://codesandbox.io/embed/sharp-water-bmk3t?fontsize=14&amp;hidenavigation=1&amp;theme=dark&amp;view=preview" width="100%" height="400px" frameborder="0" loading="lazy" allowfullscreen=""></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Before starting is important to say that &lt;strong&gt;d3.js is not a chart library is a library for making charts&lt;/strong&gt;, if you are expecti</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Custom SVG icon set management with Vue</title>
    <link href="https://sergiocarracedo.es/custom-svg-icon-set-management-with-vue/"/>
    <id>https://sergiocarracedo.es/custom-svg-icon-set-management-with-vue/</id>
    <published>2021-04-01T00:00:00.000Z</published>
    <updated>2022-09-08T07:23:28.009Z</updated>
    
    <content type="html"><![CDATA[<p>Manage an icon set can seem a simple task but can be tricky.</p><p>First, there a lot of ways to use an icon on a web page, all with pros and contras:</p><p>Let’s use this SVG image created by <a href="https://freeicons.io/profile/730">Anu Rocks</a> for all examples.</p><p><strong>We will assume our icon set is monochrome.</strong></p><div style="background: #fff; display: block; padding: 10px; width: 25px; height: 25px; margin: auto;"><p><a href="https://freeicons.io/common-ui-icons/battery-medium-icon-54110"><img src="/images/2021/svg-iconset/example.svg"></a></p></div><h2 id="lt-img-gt-tag"><a href="#lt-img-gt-tag" class="headerlink" title="<img> tag"></a>&lt;img&gt; tag</h2><p>The simplest way of adding an icon is using the <code>&lt;img&gt;</code> tag as the other images.</p><p>Example: <code>&lt;img src="/i/example.svg" alt="Battery"&gt;</code></p><blockquote><p>You can also use the tag <code>&lt;object&gt;</code> with same result: <code>&lt;object type="image/svg+xml" data="/i/example.svg"&gt;&lt;/object&gt;</code></p></blockquote><h4 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages:"></a>Advantages:</h4><ul><li>Simple method</li><li>Image can be cached by the browser: if you use in multiple places, only need to download once</li><li>Good usability using the <code>alt</code> attribute</li></ul><h4 id="Disadvantages"><a href="#Disadvantages" class="headerlink" title="Disadvantages:"></a>Disadvantages:</h4><ul><li>Lost all SVG styling by CSS (Still using style over the image tag, but for example, you can’t change the color of the stroke or )</li><li>Lost all the possibilities of the SVG’s DOM manipulation</li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>Another way to insert an icon on your page is creating an HTML placeholder and use the image as a background</p><p>HTML:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lorem ipsum dolor <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon icon-battery"</span> <span class="attr">aria-label</span>=<span class="string">"Battery"</span> <span class="attr">title</span>=<span class="string">"Battery"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> 50%</span><br></pre></td></tr></tbody></table></figure><p>CSS:</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.icon</span> {</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: .<span class="number">5em</span>; </span><br><span class="line">    <span class="attribute">height</span>: .<span class="number">5em</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.icon-battery</span> {</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">/i/example.svg</span>) no-repeat center center;</span><br><span class="line">    <span class="attribute">background-size</span>: contain;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>Note the use of <code>.5em</code> as width and height to create a container width a size relative to container font size, <code>.5em</code> is better than 1em, because 1em uses the full size, but you can play with the value.</p></blockquote><p>This method is very similar to the previous one in terms of advantages and disadvantages.<br>You can also insert text into the <code>span</code> tag and  </p><h2 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h2><p>This method requires some extra work to convert SVG to font. It could be done <a href="https://glyphter.com/">online</a>: </p><p>Once we have the icons as font, we must import the font</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> {</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'My icon set font'</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">font-display</span>: auto;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"../webfonts/my-icon-set.eot"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>To use the icons we can use the glyph associated with an icon, for example, our battery icon can be the <code>A</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lorem ipsum dolor <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"font-family: 'My icon set font'"</span> <span class="attr">aria-label</span>=<span class="string">"Battery"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 50%</span><br></pre></td></tr></tbody></table></figure><p>There is another way: use the <code>:before</code> pseudo selector and the <code>content</code> property in your CSS to insert the font glyph</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.icon</span> {</span><br><span class="line"> <span class="attribute">font-family</span>: <span class="string">'My icon set font'</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.icon-batery</span>:before {</span><br><span class="line"> content: <span class="string">'A'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lorem ipsum dolor <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon icon-battery"</span>  <span class="attr">aria-label</span>=<span class="string">"Battery"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 50%</span><br></pre></td></tr></tbody></table></figure><h4 id="Advantages-1"><a href="#Advantages-1" class="headerlink" title="Advantages"></a>Advantages</h4><ul><li>It’s very easy changing the icon color, the icon inherits the context color</li><li>Font can be cached</li></ul><h4 id="Disadvantages-1"><a href="#Disadvantages-1" class="headerlink" title="Disadvantages"></a>Disadvantages</h4><ul><li>Requires extra work to convert the icons to fonts</li><li>Add a new icon requires to update the font</li><li>No tree-shaking, unused icons still there</li><li>Is confusing for screen readers, because we are inserting text</li><li>Sometimes align with the regular text fonts isn’t good</li></ul><blockquote><p>Note that is possible define a font using just SVG, but this method is not fully supported by commonly used browsers: <a href="https://caniuse.com/svg-fonts">https://caniuse.com/svg-fonts</a> </p></blockquote><h2 id="Inline-SVG"><a href="#Inline-SVG" class="headerlink" title="Inline SVG"></a>Inline SVG</h2><p>This is my favorite method in most cases. The method consists in inserting the SVG markup in your HTML.</p><p>In our example</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Lorem ipsum dolor  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">width</span>=<span class="string">"24"</span> <span class="attr">height</span>=<span class="string">"24"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 24 24"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">"evenodd"</span> <span class="attr">d</span>=<span class="string">"M17,5 C18.5976809,5 19.9036609,6.24891996 19.9949073,7.82372721 L20,8 L20,8.17 L20.1933113,8.24671351 C21.1458614,8.66012858 21.8418803,9.55339202 21.9763495,10.6214854 L21.9949073,10.8237272 L22,11 L22,13 C22,14.2181391 21.2716631,15.274045 20.201161,15.7433631 L20,15.822 L20,16 C20,17.5385075 18.8418794,18.8065215 17.3498634,18.9798168 L17.1762728,18.9949073 L17,19 L5,19 C3.40231912,19 2.09633912,17.75108 2.00509269,16.1762728 L2,16 L2,8 C2,6.40231912 3.24891996,5.09633912 4.82372721,5.00509269 L5,5 L17,5 Z M17,7 L5,7 C4.48716416,7 4.06449284,7.38604019 4.00672773,7.88337887 L4,8 L4,16 C4,16.5128358 4.38604019,16.9355072 4.88337887,16.9932723 L5,17 L17,17 C17.5128358,17 17.9355072,16.6139598 17.9932723,16.1166211 L18,16 L18,15 C18,14.5004355 18.3670085,14.0840077 18.8498945,14.0112465 L18.9632725,14.0006747 L19.075685,13.9972247 C19.5546159,13.9618905 19.9369487,13.5888432 19.9929352,13.1192658 L20,13 L20,11 C20,10.4871642 19.6139598,10.0644928 19.1166211,10.0067277 L18.8833789,9.99327227 C18.424297,9.93995063 18.0600494,9.57570299 18.0067277,9.11662113 L18,9 L18,8 C18,7.48716416 17.6139598,7.06449284 17.1166211,7.00672773 L17,7 Z M11,9 C11.5522847,9 12,9.44771525 12,10 L12,14 C12,14.5522847 11.5522847,15 11,15 L7,15 C6.44771525,15 6,14.5522847 6,14 L6,10 C6,9.44771525 6.44771525,9 7,9 L11,9 Z"</span> <span class="attr">fill</span>=<span class="string">"currentColor"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span> 50%</span><br></pre></td></tr></tbody></table></figure><blockquote><p>Note the use of <code>currentColor</code> for the fill attribute to inherit the fill color from the CSS context (color)</p></blockquote><h4 id="Advantages-2"><a href="#Advantages-2" class="headerlink" title="Advantages"></a>Advantages</h4><ul><li>It’s very easy changing the icon color, the icon inherits the context color</li><li>Even, if your icon is not monochrome you can change the color of every single path.</li><li>Can manipulate SVG elements independently</li><li>Icons can be animated (not only a doing a transform of the full icon, but you can also manipulate every path independently)</li><li></li></ul><h4 id="Disadvantages-2"><a href="#Disadvantages-2" class="headerlink" title="Disadvantages"></a>Disadvantages</h4><ul><li>Non-cachable. If the icons appear in several places you must insert the full code.</li><li>In static sites adds a lot of “bytes” to the HTML.</li><li>A change in your icon, require to find and replace on all icon occurrences.</li></ul><h2 id="Encapsulated-inline-SVG"><a href="#Encapsulated-inline-SVG" class="headerlink" title="Encapsulated inline SVG"></a>Encapsulated inline SVG</h2><p>We can improve the previous method using Vue (or another framework: React, Angular, etc, or just using web components). The idea is encapsulated every single icon in a Vue component:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">:width</span>=<span class="string">"size"</span> <span class="attr">:height</span>=<span class="string">"size"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 24 24"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">"evenodd"</span> <span class="attr">d</span>=<span class="string">"M17,5 C18.5976809,5 19.9036609,6.24891996 19.9949073,7.82372721 L20,8 L20,8.17 L20.1933113,8.24671351 C21.1458614,8.66012858 21.8418803,9.55339202 21.9763495,10.6214854 L21.9949073,10.8237272 L22,11 L22,13 C22,14.2181391 21.2716631,15.274045 20.201161,15.7433631 L20,15.822 L20,16 C20,17.5385075 18.8418794,18.8065215 17.3498634,18.9798168 L17.1762728,18.9949073 L17,19 L5,19 C3.40231912,19 2.09633912,17.75108 2.00509269,16.1762728 L2,16 L2,8 C2,6.40231912 3.24891996,5.09633912 4.82372721,5.00509269 L5,5 L17,5 Z M17,7 L5,7 C4.48716416,7 4.06449284,7.38604019 4.00672773,7.88337887 L4,8 L4,16 C4,16.5128358 4.38604019,16.9355072 4.88337887,16.9932723 L5,17 L17,17 C17.5128358,17 17.9355072,16.6139598 17.9932723,16.1166211 L18,16 L18,15 C18,14.5004355 18.3670085,14.0840077 18.8498945,14.0112465 L18.9632725,14.0006747 L19.075685,13.9972247 C19.5546159,13.9618905 19.9369487,13.5888432 19.9929352,13.1192658 L20,13 L20,11 C20,10.4871642 19.6139598,10.0644928 19.1166211,10.0067277 L18.8833789,9.99327227 C18.424297,9.93995063 18.0600494,9.57570299 18.0067277,9.11662113 L18,9 L18,8 C18,7.48716416 17.6139598,7.06449284 17.1166211,7.00672773 L17,7 Z M11,9 C11.5522847,9 12,9.44771525 12,10 L12,14 C12,14.5522847 11.5522847,15 11,15 L7,15 C6.44771525,15 6,14.5522847 6,14 L6,10 C6,9.44771525 6.44771525,9 7,9 L11,9 Z"</span> <span class="attr">fill</span>=<span class="string">"currentColor"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'battery-icon'</span>,</span></span><br><span class="line">  props: {</span><br><span class="line"><span class="javascript">    size: [<span class="built_in">String</span>, <span class="built_in">Number</span>]</span></span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>I added the <code>size</code> property to make the icon resizable without need CSS, and as you know icon aspect ratio you only need one dimension.<br>If the icon aspect ratio weren’t 1:1, you only need to do the math in the component:</p><p>For example a icon with a 16:10 aspect ratio (Using height as the base dimension):</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns="http://www.w3.org/2000/svg" :width="size * 15 / 24" :height="size" viewBox="0 0 24 15"&gt;</span><br></pre></td></tr></tbody></table></figure><p>You must create a component for every icon, and insert in your page is simple, just insert the component</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lorem ipsum dolor <span class="tag">&lt;<span class="name">battery-icon</span> <span class="attr">size</span>=<span class="string">"11"</span>&gt;</span> 50%</span><br></pre></td></tr></tbody></table></figure><p>With this method, you can encapsulate the icon markup, and his logic (for example you can add a property to set the color of the bar in the battery icon, or even the bar size, creating a dynamic icon)</p><p>If your page is not an SSR page you skip the cache disadvantage because your icon markup is not repeated in your code (but it’s in the browser memory)</p><p>Also, the disadvantage of replacing all the occurrences is fixed with this method.</p><p>Using this method, unused icons don’t are bundled in the build because your bundler (for example <em>webpack</em>) do the threeshaking before build.</p><p>One nice example of project using this method is <a href="https://www.npmjs.com/package/vue-material-design-icons">https://www.npmjs.com/package/vue-material-design-icons</a>, a Vue wrapper for the great project <a href="https://materialdesignicons.com/">https://materialdesignicons.com/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Manage an icon set can seem a simple task but can be tricky.&lt;/p&gt;
&lt;p&gt;First, there a lot of ways to use an icon on a web page, all with pro</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Deploying a static website in Azure Static Web Apps</title>
    <link href="https://sergiocarracedo.es/azure-static-web-apps/"/>
    <id>https://sergiocarracedo.es/azure-static-web-apps/</id>
    <published>2021-01-20T00:00:00.000Z</published>
    <updated>2022-09-08T07:23:28.009Z</updated>
    
    <content type="html"><![CDATA[<p>Nowadays <a href="https://jamstack.org/">JAMStack</a> is trendy because a lot of reasons: performance, security, decoupling, etc.</p><p>JAMStack consists of pre-rendering your website or application’s frontend and get the dynamic data from an API.</p><p>Your pre-rendered markup can be host in a server, but as it is static, your host only needs to serve static files, just HTML, CSS, and JS. You don’t need to run any code on the server.</p><p>There are a lot of different options to deploy a static website, for example:</p><ul><li><a href="https://pages.github.com/">Github Pages</a></li><li><a href="https://www.netlify.com/">Netlify</a></li><li><a href="https://vercel.com/">Vercel</a></li><li>etc.</li></ul><p>In this post I will talk about <a href="https://azure.microsoft.com/en-us/services/app-service/static/">Azure Static Web Apps</a>, this is a service to host your static (and lambda functions)</p><p>At the moment of writing this post, it’s in a preview, and it’s free.</p><p>How to deploy your app, for example, a Vue app.</p><ol><li><p>Go to <a href="https://portal.azure.com/">https://portal.azure.com/</a> and create a new account if you haven’t one yet.</p></li><li><p>Into the resource group click in <em>+ Create resource</em></p></li><li><p>Choose <strong>Static Web App (preview)</strong></p></li><li><p>You must select the subscription, the Resource group to assign this resource, the name of your app (to find it later in the Azure panel), the region where you want to serve the static files (choose one near your clients or users)</p></li><li><p>You need to link with your Github account and choose the repo (and the branch) to deploy.</p></li><li><p>Azure will create behalf you a Github Action to build your website and deploy it to SWA.</p></li></ol><p>Something like this</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Azure</span> <span class="string">Static</span> <span class="string">Web</span> <span class="string">Apps</span> <span class="string">CI/CD</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span>  <span class="comment"># This action will run on push to main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build_and_deploy_job:</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.event_name</span> <span class="string">==</span> <span class="string">'push'</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Deploy</span> <span class="string">Job</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">submodules:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">And</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">builddeploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">Azure/static-web-apps-deploy@v0.0.1-preview</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">azure_static_web_apps_api_token:</span> <span class="string">${{</span> <span class="string">secrets.AZURE_STATIC_WEB_APPS_API_TOKEN</span> <span class="string">}}</span></span><br><span class="line">          <span class="attr">repo_token:</span> <span class="string">${{</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">}}</span> <span class="comment"># Used for Github integrations (i.e. PR comments)</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">"upload"</span></span><br><span class="line">          <span class="attr">app_location:</span> <span class="string">"/"</span> <span class="comment"># Path to your app in the web server</span></span><br><span class="line">          <span class="attr">api_location:</span> <span class="string">"api"</span> <span class="comment"># Api source code path - optional</span></span><br><span class="line">          <span class="attr">output_location:</span> <span class="string">"dist"</span>           </span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">VUE_APP_MY_VARIABLE:</span> <span class="string">value</span></span><br><span class="line">          <span class="comment"># Environment variables needed to build your app</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>For more information about the actions you can read the official documentation: <a href="https://docs.microsoft.com/en-us/azure/static-web-apps/github-actions-workflow">https://docs.microsoft.com/en-us/azure/static-web-apps/github-actions-workflow</a></p><p>After doing this the Github action will run after every push to <code>master</code>, build the app, and deploy to azure.</p><blockquote><p>Azure provides you an url to access your website, like *.azurewebsites.net, you can also add your custom domain.</p></blockquote><h1 id="Configuring-routes"><a href="#Configuring-routes" class="headerlink" title="Configuring routes"></a>Configuring routes</h1><p>If you need to configure the routes, for example securing a route to allow only access to your company users, add a fallback route, or create a redirect you need to create a file named <code>routes.json</code> which is in the root directory after the build, in Vue you must store this in the <code>static</code> folder. </p><p>For example, this file forces users to must authenticated to access to any route and if the page requested is not found redirects to <code>200.html</code></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"routes"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"route"</span>: <span class="string">"/*"</span>,</span><br><span class="line">      <span class="attr">"allowedRoles"</span>: [<span class="string">"authenticated"</span>]</span><br><span class="line">    }</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"platformErrorOverrides"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"errorType"</span>: <span class="string">"NotFound"</span>,</span><br><span class="line">      <span class="attr">"serve"</span>: <span class="string">"/200.html"</span>,</span><br><span class="line">      <span class="attr">"statusCode"</span>: <span class="number">200</span></span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure><p>Mor info about routes.json <a href="https://docs.microsoft.com/en-us/azure/static-web-apps/routes">https://docs.microsoft.com/en-us/azure/static-web-apps/routes</a></p><p>I didn’t mention you can use <em>lambdas</em> to run server-side code (it is not free), but maybe I will write more about that in the future. </p><p>To summarizing, <strong>Azure Static Web Apps</strong> is another option to deploy static web apps, if you are using Azure in your company can be a good option to keep all the infrastructure services on the same platform, and it’s a simple alternative to deploy an App Service </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Nowadays &lt;a href=&quot;https://jamstack.org/&quot;&gt;JAMStack&lt;/a&gt; is trendy because a lot of reasons: performance, security, decoupling, etc.&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2020 in a nutshell</title>
    <link href="https://sergiocarracedo.es/2020/2020-in-a-nutshell/"/>
    <id>https://sergiocarracedo.es/2020/2020-in-a-nutshell/</id>
    <published>2020-12-30T00:00:00.000Z</published>
    <updated>2022-09-08T07:23:28.009Z</updated>
    
    <content type="html"><![CDATA[<p>2020 is almost complete, and it was a year that we will remember for a long time. I don’t want to be dramatic, but 2020 left a deep mark on all of us. </p><h1 id="Profesional"><a href="#Profesional" class="headerlink" title="Profesional"></a>Profesional</h1><p>In the professional terrain, in January I started a new job as a pure frontend guy in a big company. This job gives to me a big opportunity of work with amazing people. This job forces me to speak in English most of the time, this is the reason why I started to write this blog in English. It was a challenge and still being, but I’m always very happy to be challenged. In November, I moved to a new job an awesome professional opportunity, but a great opportunity to be part of a project whose goal is to help others and to make a better and more equitable world.</p><h1 id="Community"><a href="#Community" class="headerlink" title="Community"></a>Community</h1><p>This year was a bad year for the developer groups. On February 27th, we did our last face-to-face event in PHPVigo, and we had to make the tough (but right) decision to cancel the PulpoCon 2020, but after crazy months we started to work hard to make it possible to do online events, inaugurating the PHPVigo’s Twitch channel. I also began to help a little bit in other groups.</p><h1 id="Talks"><a href="#Talks" class="headerlink" title="Talks"></a>Talks</h1><p>Despite the bad year for the face-to-face meetings I was able to do a few talks:</p><ul><li>New features in ES2020 in <a href="https://www.youtube.com/watch?v=ziZO5KQM_KU&amp;t=5248s">https://www.youtube.com/watch?v=ziZO5KQM_KU&amp;t=5248s</a></li><li>Creating your own Vue UI components library: From scratch to NPM: <a href="https://www.youtube.com/watch?v=z_K5iuSjCDo">https://www.youtube.com/watch?v=z_K5iuSjCDo</a></li></ul><p>Both in Spanish. I also did two internal talks in my old company (in Spanish too).<br>One of my goals for the near future was to do a talk in English, and I achieved this on December, in an company internal talk. I’m very proud of that because one year ago I almost didn’t speak English.</p><h1 id="Open-source"><a href="#Open-source" class="headerlink" title="Open source"></a>Open source</h1><p>This year I created 2 new open-source projects.</p><ul><li><a href="https://github.com/sergiocarracedo/obs-stream-widgets">OBS stream widgets</a>, When we started to do online talks, we and other groups needed to show information on the screen (labels, titles, countdown, etc), and run the final contest to give participants some free licenses and other goodies. This project wrote in JS, is a set of tools to do that.</li><li><a href="https://github.com/sergiocarracedo/gandi-ddns-node">Gandi-ddns-node</a> I needed to update a subdomain with my local (dynamic IP), this is the reason why I wrote this script which uses Gandi.net API to update a domain or subdomain if your local IP changes.</li></ul><p>I also did a few PR to opensource projects, fixing bugs, or adding new features, my little contribution to the open-source world.</p><p><img src="/images/2020/nutshell/github_stats.png"></p><h1 id="Personal"><a href="#Personal" class="headerlink" title="Personal"></a>Personal</h1><p>I learned a lot of things this year: new frameworks, tools, etc. I also started programming in a new language with a different paradigm to the other languages I knew: GoLang.</p><p>I also made new teammates, friends, and colleges, I fly for the second time in my life <span class="github-emoji"><span>😅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>    </p><p>I’m sure I forget a lot of things in this 2020’s summary but in general terms, regardless of the pandemic, this was a good year.</p><p>I wish 2021 will be the year we will forget the pandemic thanks to the vaccines, science, and great health professionals.</p><p>Happy 2021!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2020 is almost complete, and it was a year that we will remember for a long time. I don’t want to be dramatic, but 2020 left a deep mark </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Webkit (Safari) memory leak using SVG filters</title>
    <link href="https://sergiocarracedo.es/2020/safari-svg-filters-memory-leak/"/>
    <id>https://sergiocarracedo.es/2020/safari-svg-filters-memory-leak/</id>
    <published>2020-11-02T00:00:00.000Z</published>
    <updated>2022-09-08T07:23:28.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-context"><a href="#The-context" class="headerlink" title="The context"></a>The context</h2><p>A few weeks ago I was developing a website using <a href="https://nuxtjs.org/">NuxtJs</a> (which is not important for the problem but the is the context <span class="github-emoji"><span>😉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> ). That was a website that needs to use a few images as building blocks, the typical section separator with a shape different to a simple line, in this case, the section’s separator had 2 colors and a shadow.</p><p>I decided to use SVG images for several reasons, for example the images had to adapt to different screen widths, and the images were simple (more complex than a line but simple, They were similar to 2 waves with 2 colors). The SVG files are very useful in these use case, because the file size is small, and you can scale them infinitely without lost definition.<br>One important thing in this issue as we’ll see later is that this image had a shadow.</p><h2 id="The-problem"><a href="#The-problem" class="headerlink" title="The problem"></a>The problem</h2><p>Well, I was almost done templating the website, and we started to test the website in different browsers and platforms, and everything was fine, except because Safari users complain about the browser displays a notice:</p><blockquote><p>This webpage is using significant memory. Closing it may improve the responsiveness of your Mac.</p></blockquote><p>As side effect, the website animations were not fluid.</p><h2 id="Reproducing-the-problem-and-fixing-it"><a href="#Reproducing-the-problem-and-fixing-it" class="headerlink" title="Reproducing the problem and fixing it"></a>Reproducing the problem and fixing it</h2><p>I needed to test the website by myself to find the reason of this issue. I don’t own a Mac computer, but I have a <a href="https://www.browserstack.com/">BrowserStack</a> account.</p><p><a href="https://www.browserstack.com/">BrowserStack</a> is a SaaS that allows you to connect, using your browser, to remote devices with other browsers / OS. You can even select old browser versions, a mobile device (like iPhones, etc)</p><p><img src="/images/2020/safari-svg/browserstack.jpg"> </p><blockquote><p><strong>Off-Topic</strong>: BrowserStack supports my open source project <a href="https://sirenogrid.com/">SirenoGrid</a></p></blockquote><p>So, with my BrowserStack account, I could try to reproduce the problem. I open a Safari 13.1 (lastest version) instance in MacOS Catalina, and opened the website, and using the devtools got info about memory usage, and <strong>it was over 1.4 GB!!!!</strong><br>And if you reloaded the website memory usage grows until the system got unresponsive.</p><p>The first thing I thought is that the problem was the animations. I remove them: <em>Nothing changes</em>.</p><p>I remove javascript: <em>Nothing</em> <span class="github-emoji"><span>😕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f615.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>I continue removing things and trying other things to understand the problem. <em>No results</em> <span class="github-emoji"><span>😮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>After a long time, I was already a little desperate I disabled all website content blocks, and I realized that when it was a block with an SVG image in the screen, the memory usage was high.</p><p>I tried the same for a block with a png image and memory still normal.</p><p>WTF?? It should be SVG images.</p><p>Then, I replaced all SVG images with PNG versions and website works with reasonable memory usage <span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="Isolating-the-issue"><a href="#Isolating-the-issue" class="headerlink" title="Isolating the issue"></a>Isolating the issue</h2><p>After fixing the problem and with more time I wanted to know because SVG files were causing this high memory usage.</p><p>I searched on Google information for issues in Safari and SVG and I didn’t find anything that fit my issue, some diffuse references.</p><p>I created a sandbox to isolate the issue, I will not go into detail, but after some test and fail iterations I realized that the issue was related to SVG Filters.</p><p>With this information, I repeated the Google search, and I found information relative to Safari, SVG and filters issues <a href="https://bugs.webkit.org/show_bug.cgi?id=78814">1</a>, <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=583471">2</a> (Some of them are very old), and the most similar: <a href="https://github.com/mapbox/mapbox-gl-js/issues/7476">https://github.com/mapbox/mapbox-gl-js/issues/7476</a></p><h2 id="The-bug"><a href="#The-bug" class="headerlink" title="The bug"></a>The bug</h2><p>If you open in Safari a normal webpage, for example: <a href="https://apple.com/">https://apple.com</a> which is a webpage with images, javascript, animations, video, etc. The Safari Timeline inspector says the memory usage is around 205MB</p><img src="/images/2020/safari-svg/apple_com.jpg" class="center mb-3"><p>I prepared a bug demo codesandbox, just with 2 simple svg images: </p><blockquote><p><a href="https://5emtw.csb.app/">https://5emtw.csb.app</a> <span class="github-emoji"><span>❗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Open with responsibility in Safari <span class="github-emoji"><span>❗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></blockquote><p>And in the first load that is the memory usage is around 600 MB!!!! <span class="github-emoji"><span>🤯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f92f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> That’s crazy</p><img src="/images/2020/safari-svg/memory_leak.jpg" class="center mb-3"><p>And if you reload the page a few times the situations will be worse</p><img src="/images/2020/safari-svg/memory_leak_after_3_reloads.jpg" class="center mb-3"><p>After 3 reloads the memory usage is 1.26 GB, absolutely crazy.</p><p>The same page, and the same images, but without filters</p><blockquote><p><a href="https://5emtw.csb.app/nofilters.html">https://5emtw.csb.app/nofilters.html</a></p></blockquote><p>The memory usage is only 21 MB, that it’s a very normal memory usage</p><img src="/images/2020/safari-svg/without-filters.jpg" class="center mb-3"><p>Even with a simple filter, like:</p><p><code>&lt;feFlood flood-opacity="1" result="BackgroundImageFix"/&gt;</code></p><p>The memory starts to go high, I’m not sure what cause the problem, but in my opinion is something related to composition, I guess the browser keeps in memory the raw result of applying a filter and after making all the compositions layers      .</p><p>I reported that bug in the Webkit Bugzilla page: <a href="https://bugs.webkit.org/show_bug.cgi?id=218422">https://bugs.webkit.org/show_bug.cgi?id=218422</a><br>I hope they fix it soon.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;The-context&quot;&gt;&lt;a href=&quot;#The-context&quot; class=&quot;headerlink&quot; title=&quot;The context&quot;&gt;&lt;/a&gt;The context&lt;/h2&gt;&lt;p&gt;A few weeks ago I was developing a</summary>
      
    
    
    
    
    <category term="safari" scheme="https://sergiocarracedo.es/tags/safari/"/>
    
    <category term="bug" scheme="https://sergiocarracedo.es/tags/bug/"/>
    
    <category term="browserstack" scheme="https://sergiocarracedo.es/tags/browserstack/"/>
    
  </entry>
  
  <entry>
    <title>Talk: Creating your own Vue UI components library: From scratch to NPM</title>
    <link href="https://sergiocarracedo.es/2020/creating-your-own-vue-ui-components-library-from-scratch-to-npm/"/>
    <id>https://sergiocarracedo.es/2020/creating-your-own-vue-ui-components-library-from-scratch-to-npm/</id>
    <published>2020-10-19T00:00:00.000Z</published>
    <updated>2022-09-08T07:23:28.009Z</updated>
    
    <content type="html"><![CDATA[<p>Past September 29th I did a talk about how to create your own Vue UI components.</p><p>I explained some tips about how to organize the components’ code, talked in deep about how to set the values in <code>package.json</code> and their meaning. And how to publish on NPM and then how to use them in another project.</p><p>The talk was in Spanish, but slides are in English.</p><div class="video-container"><iframe src="https://www.youtube.com/embed/z_K5iuSjCDo" frameborder="0" loading="lazy" allowfullscreen=""></iframe></div><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vS9j4GjB2eZrnGI9b47FbecBunSSa_zYPJJsNu2mcJ_uux4CbisJOdG6vaFXB9rPTiPnv4N_KeXlLPl/embed?start=false&amp;loop=false&amp;delayms=5000" width="100%" height="600" frameborder="0" loading="lazy" allowfullscreen=""></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Past September 29th I did a talk about how to create your own Vue UI components.&lt;/p&gt;
&lt;p&gt;I explained some tips about how to organize the c</summary>
      
    
    
    
    
    <category term="vue" scheme="https://sergiocarracedo.es/tags/vue/"/>
    
    <category term="npm" scheme="https://sergiocarracedo.es/tags/npm/"/>
    
    <category term="components" scheme="https://sergiocarracedo.es/tags/components/"/>
    
  </entry>
  
  <entry>
    <title>Automate the startup of your projects with yarn create and SAOjs</title>
    <link href="https://sergiocarracedo.es/2020/automatize-node-project-creation/"/>
    <id>https://sergiocarracedo.es/2020/automatize-node-project-creation/</id>
    <published>2020-09-22T00:00:00.000Z</published>
    <updated>2022-09-08T07:23:28.009Z</updated>
    
    <content type="html"><![CDATA[<p>Start a project in any language, framework, etc it’s not as simple as it seems. I mean, usually, the project requires a lot of configuration files, installing dependencies, set the environment, create skeleton files, etc.</p><p>Talking about JavaScript frameworks: everyone has his own CLI tool to start a project with the required files to start to code.</p><p>For example <strong>Angular</strong> has <a href="https://cli.angular.io/">@angular/cli</a> and you could execute <code>ng new [app-name]</code>or<br><strong>Vue</strong> has <a href="https://cli.vuejs.org/">@vue/cli</a> and you can start a Vue project executing <code>vue create [project name]</code>.</p><p>This is nice, but usually, the default config is not complaining your development’s requisites you still must editing the config files to set up the project according to your needs, for example, change <code>tsconfig.json</code> configuration, more <em>advanced</em>, you would like to add some code in router file or you would like to create a folder structure for the store, or anything.</p><p>Do all those tasks every time you start a project is boring and spend time.</p><p>In the background, these CLI tools are using a skeleton repo or similar to prepare your project, but thinking in a generic use case.</p><p>So we can do the same but adapting this use case to our use case.</p><h2 id="yarn-create-or-npx-create"><a href="#yarn-create-or-npx-create" class="headerlink" title="yarn create (or npx create)"></a><code>yarn create</code> (or <code>npx create</code>)</h2><p><a href="https://yarnpkg.com/">Yarn</a> is a node package manager with vitamins, and provides the command <code>create</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn create [my-starter-kit]</span><br></pre></td></tr></tbody></table></figure><p>You only need to have installed <code>yarn</code>, nothing else. This command gets from your <em>npm registry</em> a package named <code>create-</code> + the name you use in the command, in our example tries to get the package <code>create-my-starter-kit</code></p><p>Then, yarn reads the <code>package.json</code> file of the package, installs the dependencies, and run the command in the <code>bin</code> entry</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">{</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"create-my-starter-kit"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,  </span><br><span class="line">  <span class="attr">"bin"</span>: <span class="string">"lib/cli.js"</span>,</span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong><code>yarn create</code> won’t do anything else</strong></p><p>You must create the next steps, but, think about it, the user (you, a teammate, a user of an open-source project) only need yarn as a dependency.</p><p>In your <code>cli.js</code> you can do things to prepare the development environment by yourself. But, let’s see how to simplify all these tasks.</p><h2 id="SAOjs"><a href="#SAOjs" class="headerlink" title="SAOjs"></a>SAOjs</h2><p><a href="https://saojs.org/">SAO</a> describes itself as a <em>Futuristic scaffolding tool</em>. and it’s inspired in <a href="https://yeoman.io/">Yeoman</a></p><p>These tools allow you to ask the user who runs your <em>create-app</em> questions that you could use to make decisions to install or configure different elements.</p><p>You must create the file <code>saofile.js</code>, and this file must export this elements:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  templateData: ...,</span><br><span class="line">  prompts: ...,</span><br><span class="line">  actions: ...,</span><br><span class="line">  prepare: ...,</span><br><span class="line">  subGenerators: ...,</span><br><span class="line">  completed: ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Prompts"><a href="#Prompts" class="headerlink" title="Prompts"></a>Prompts</h2><p>Let’s talk about <code>prompts</code>. That must return an array of questions to want to do to the user, for example</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">prompts: [</span><br><span class="line">  {</span><br><span class="line">    type: <span class="string">'input'</span>,</span><br><span class="line">    name: <span class="string">'projectName'</span>,</span><br><span class="line">    message: <span class="string">'What is your project name?'</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    type: <span class="string">'list'</span>,</span><br><span class="line">    name: <span class="string">'packageManager'</span>,</span><br><span class="line">    message: <span class="string">'Your favourite package manager'</span>,</span><br><span class="line">    choices: [<span class="string">'yarn'</span>, <span class="string">'npm'</span>]</span><br><span class="line">  }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>When you run SAO (we’ll see how to do soon), it’ll ask the user the questions.</p><p>The “prompts” system is very useful, you can ask questions only if a previous question is has some value, etc.</p><p>You can also save some answers as preset for the next projects (Like Vue CLI does)</p><p><a href="https://v1.saojs.org/saofile.html#prompts">More information about prompts</a></p><h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h2><p>The other important key in the saofile’s object is the actions. They define the actions to do. The important thing is that the actions can be conditioned by the user answers.</p><h3 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h3><p>You can copy files from a <code>templateDir</code> (in your create package) to the target (the project to create). That’s that we needed ;) </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  type: <span class="string">'add'</span>,</span><br><span class="line">  files: <span class="string">'**'</span>, </span><br><span class="line">  templateDir: <span class="string">'/template'</span>,</span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>You could even filter the files to add depending on the user’s answers<br><a href="https://v1.saojs.org/saofile.html#type-add">More info</a></p><h3 id="Move"><a href="#Move" class="headerlink" title="Move"></a>Move</h3><p>Moves files in the target (the project to create)</p><h3 id="Modify"><a href="#Modify" class="headerlink" title="Modify"></a>Modify</h3><p>Modify files in the target (the project to create), that is very interesting too, for example, for updating config files according to what the user answered</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> packageName = <span class="built_in">this</span>.packageName</span><br><span class="line">{</span><br><span class="line">  type: <span class="string">'modify'</span>,</span><br><span class="line">  files: <span class="string">'package.json'</span>,</span><br><span class="line">  handler: (data) {</span><br><span class="line">    data.name = packageName</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>In the example, we changed the project name in the <code>package.json</code> according to the user’s previous answers.</p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>Delete files in the target.</p><h2 id="Running-SAO"><a href="#Running-SAO" class="headerlink" title="Running SAO"></a>Running SAO</h2><p>You can run SAO from command line or from your <code>cli.js</code> file:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sao({...customVariables})</span><br><span class="line">  .run()</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.trace(err)</span><br><span class="line">    process.exit(<span class="number">1</span>)</span><br><span class="line">  })</span><br></pre></td></tr></tbody></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Probably you worked before with something similar, every time you have been created a project with Vue CLI, Nuxt, React, etc. </p><p>That is a shallow introduction to all the SAO functionalities, but as you can see the possibilities to customize your project creation are high. </p><p>You could create a template with the config files you use habitually and store the creation script in NPM.js, in a private registry, and every time you create a project, invoke <code>yarn create my-project-scaffolding</code> and start to code without the need of prepare manually the config files or miss some dependency.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Start a project in any language, framework, etc it’s not as simple as it seems. I mean, usually, the project requires a lot of configurat</summary>
      
    
    
    
    
  </entry>
  
</feed>
